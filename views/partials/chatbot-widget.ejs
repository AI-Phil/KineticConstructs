<!-- Chatbot Integration for Langflow -->

<div id="langflow-chatbot-container" style="height: 500px; max-width: 450px; border: 1px solid #eee; margin-top: 20px; overflow: hidden; display: block;">
    <!-- Chatbot will be rendered here if embedded and profile config directs it -->
</div>

<%# Load CSS for the langflow-chatbot plugin %>
<link rel="stylesheet" href="/static/langflow-chatbot.css">
<link rel="stylesheet" href="/css/chatbot-widget.css"> <%# Load new simplified widget styles %>

<% if (langflowProxyApiBasePath) { %>
<script type="module" src="/js/session.js"></script>
<script src="/static/langflow-chatbot-plugin.js"></script>
<script type="module">
    import { getCookie, setCookie, generateUUID } from '/js/session.js';

    const CHATBOT_PROFILE_ID = "product-recommender";
    const CHAT_SESSION_COOKIE_NAME = "chatSessionId";
    const CHAT_SESSION_COOKIE_DAYS = 7;

    function manageChatSessionId() {
        let sessionId = getCookie(CHAT_SESSION_COOKIE_NAME);
        if (!sessionId) {
            sessionId = generateUUID();
            setCookie(CHAT_SESSION_COOKIE_NAME, sessionId, CHAT_SESSION_COOKIE_DAYS);
            console.log(`New chatSessionId generated: ${sessionId}`);
        } else {
            console.log(`Using existing chatSessionId: ${sessionId}`);
        }
        return sessionId;
    }

    async function initChatbot(proxyApiBasePath, sessionId) {
        const pluginInitOptions = {
            profileId: CHATBOT_PROFILE_ID,
            proxyApiBasePath: proxyApiBasePath,
            containerId: 'langflow-chatbot-container',
            sessionId: sessionId,
            mode: 'floating',
        };
        console.log(`Initializing LangflowChatbotPlugin for profile '${CHATBOT_PROFILE_ID}' with session '${sessionId}'.`);
        const chatbotInstance = await window.LangflowChatbotPlugin.init(pluginInitOptions);
        console.log(`LangflowChatbotPlugin for profile '${CHATBOT_PROFILE_ID}' (session: ${sessionId}) initialized.`);
        return chatbotInstance;
    }

    function setupChatResetListener(chatbotInstance, onResetCallback) {
        if (chatbotInstance && chatbotInstance.widgetInstance && chatbotInstance.widgetInstance.getPanelElement) {
            const internalWidget = chatbotInstance.widgetInstance;
            const widgetElementForDomEvent = internalWidget.getPanelElement();

            if (widgetElementForDomEvent) {
                widgetElementForDomEvent.addEventListener('chatReset', async () => {
                    console.log(`Chatbot: 'chatReset' event received for profile "${CHATBOT_PROFILE_ID}".`);
                    await onResetCallback();
                });
                console.log(`Chatbot: Attached 'chatReset' listener for profile "${CHATBOT_PROFILE_ID}".`);
            } else {
                console.warn(`Chatbot (EJS) for "${CHATBOT_PROFILE_ID}": Could not get panel element. Cannot attach 'chatReset' listener.`);
            }
        } else {
            console.warn(`Chatbot (EJS) for "${CHATBOT_PROFILE_ID}": Chatbot instance, widgetInstance, or getPanelElement not found. Cannot attach 'chatReset' listener.`);
        }
    }

    document.addEventListener('DOMContentLoaded', async () => {
        const proxyApiBasePath = '<%= langflowProxyApiBasePath %>';
        let currentChatSessionId = manageChatSessionId();

        const handleChatReset = async () => {
            const newChatSessionId = generateUUID();
            setCookie(CHAT_SESSION_COOKIE_NAME, newChatSessionId, CHAT_SESSION_COOKIE_DAYS);
            console.log(`Generated new chatSessionId after reset: ${newChatSessionId}`);
            currentChatSessionId = newChatSessionId;
            console.log(`Re-initializing chatbot with new session ID: ${newChatSessionId}`);
            await initializeAndRunChatbot(proxyApiBasePath, currentChatSessionId);
        };
        
        const initializeAndRunChatbot = async (apiPath, sessionId) => {
            const chatbotInstance = await initChatbot(apiPath, sessionId);
            setupChatResetListener(chatbotInstance, handleChatReset);
            setupProductRecommendationClickHandler(chatbotInstance);
        };

        await initializeAndRunChatbot(proxyApiBasePath, currentChatSessionId);
    });

    function setupProductRecommendationClickHandler(chatbotInstance) {
        // Get the container element from the chatbot instance
        const container = chatbotInstance.getContainerElement ? chatbotInstance.getContainerElement() : null;
        
        // Listen on document level to catch all clicks, then filter for chatbot-related ones
        document.addEventListener('click', function(e) {
            // Handler for product recommendation cards (both article elements and .product-recommendation elements)
            const productCard = e.target.closest('article') || e.target.closest('.product-recommendation');

            if (productCard) {
                // Find the first link in the card which should be the product link
                const titleLink = productCard.querySelector('h4 a') || productCard.querySelector('a');

                if (titleLink) {
                    // Prevent default link behavior and handle all clicks on the card consistently
                    e.preventDefault();
                    const url = titleLink.href;

                    // Dispatch background navigation event
                    const navEvent = new CustomEvent('backgroundNavigationRequest', {
                        detail: { url: url },
                        bubbles: true,
                        cancelable: true
                    });
                    document.dispatchEvent(navEvent);
                }
                return;
            }

            // Handler for all other links in the chat
            const link = e.target.closest('a');
            if (link && !e.defaultPrevented) {
                // Only for same-origin links
                if (link.hostname === window.location.hostname || !link.hostname) {
                    e.preventDefault();
                    const url = link.href;

                    // Dispatch background navigation event
                    const navEvent = new CustomEvent('backgroundNavigationRequest', {
                        detail: { url: url },
                        bubbles: true,
                        cancelable: true
                    });
                    document.dispatchEvent(navEvent);
                }
            }
        });
    }
</script>
<% } %>