{"_id": "CB-WHL-001_AM_v1.0", "product_id": "CB-WHL-001", "product_name": "RoverBot Starter Kit", "doc_type": "Assembly Manual", "version": "1.0", "title": "RoverBot Starter Kit Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# RoverBot Starter Kit Assembly Manual (v1.0)\n\nWelcome to Kinetic Constructs! Let's build your RoverBot.\n\n## Parts List\n\n*   1x Main Chassis (A1)\n*   1x Top Cover (A2)\n*   2x Motors (B1)\n*   2x Wheels (B2)\n*   1x Caster Wheel (B3)\n*   1x Battery Box (C1)\n*   1x Main Circuit Board (C2)\n*   1x IR Sensor Module (C3)\n*   4x Motor Screws (S1)\n*   6x Chassis Screws (S2)\n*   2x Sensor Screws (S3)\n*   1x Small Screwdriver\n\n*(Illustrations would show each part labelled)*\n\n## Assembly Steps\n\n1.  **Attach Motors:** Align Motor (B1) with the slots on the Main Chassis (A1). Secure using two Motor Screws (S1). Repeat for the second motor.\n    *(Diagram: Shows motor placement and screw holes)*\n2.  **Connect Wires:** Plug the red/black wires from each motor into the designated motor ports on the Main Circuit Board (C2). Ensure correct polarity.\n    *(Diagram: Close-up of board showing M1+, M1-, M2+, M2- ports)*\n3.  **Mount Circuit Board:** Place the Main Circuit Board (C2) onto the mounting pegs on the Main Chassis (A1). Secure with two Chassis Screws (S2).\n4.  **Attach Caster Wheel:** Insert the Caster Wheel (B3) into the front slot of the Main Chassis (A1). It should click into place.\n5.  **Mount Battery Box:** Secure the Battery Box (C1) to the underside of the Main Chassis (A1) using two Chassis Screws (S2). Plug the battery box connector into the power input on the Circuit Board (C2).\n6.  **Mount IR Sensor:** Attach the IR Sensor Module (C3) to the front mounting points on the Main Chassis (A1) using two Sensor Screws (S3). Plug the sensor cable into the designated sensor port on the Circuit Board (C2).\n7.  **Attach Wheels:** Push the Wheels (B2) firmly onto the motor axles until they are snug.\n8.  **Install Batteries:** Open the Battery Box (C1) and insert 4x AA batteries (not included), observing correct polarity. Close the cover.\n9.  **Attach Top Cover:** Place the Top Cover (A2) onto the Main Chassis (A1), aligning the clips. Secure with the remaining two Chassis Screws (S2).\n\nAssembly Complete! Refer to the User Guide for operation."}
{"_id": "CB-WHL-001_UG_v1.0", "product_id": "CB-WHL-001", "product_name": "RoverBot Starter Kit", "doc_type": "User Guide", "version": "1.0", "title": "RoverBot Starter Kit User Guide", "language": "en-US", "format": "Markdown", "text": "# RoverBot Starter Kit User Guide (v1.0)\n\n## Getting Started\n\n1.  **Power On:** Ensure batteries are correctly installed in the Battery Box. Slide the power switch on the Main Circuit Board (accessible through a slot in the chassis) to the 'ON' position. An LED on the board should light up.\n2.  **Install Remote Batteries:** Insert 2x AAA batteries (not included) into the IR Remote Control, observing polarity.\n\n## Using the IR Remote Control\n\n*(Diagram: Shows IR remote with buttons labelled)*\n\n*   **Forward Button:** Press and hold to move the RoverBot forward.\n*   **Backward Button:** Press and hold to move the RoverBot backward.\n*   **Left Button:** Press and hold to make the RoverBot turn left.\n*   **Right Button:** Press and hold to make the RoverBot turn right.\n*   **Mode Button (Obstacle Avoidance):** Press once to toggle Obstacle Avoidance mode. \n    *   *Mode Off (Default):* Direct control via directional buttons.\n    *   *Mode On:* The RoverBot will attempt to move forward and automatically turn when the front IR sensor detects an obstacle. The LED on the IR sensor may blink when an obstacle is detected. Direct directional control is disabled in this mode. Press Mode button again to turn off.\n\n## Basic Operation Notes\n\n*   The IR remote requires a line of sight to the IR sensor on the front of the RoverBot. Range is typically 3-5 meters indoors.\n*   Performance may vary on different surfaces (carpet vs. hard floors).\n*   Obstacle avoidance works best with solid, light-colored objects directly in front of the sensor.\n\n## Powering Off\n\n*   Slide the power switch on the RoverBot to the 'OFF' position.\n*   Remove batteries from the RoverBot and remote if storing for extended periods."}
{"_id": "CB-WHL-001_TMG_v1.0", "product_id": "CB-WHL-001", "product_name": "RoverBot Starter Kit", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.0", "title": "RoverBot Starter Kit Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# RoverBot Starter Kit Troubleshooting & Maintenance (v1.0)\n\n## Troubleshooting Common Issues\n\n*   **RoverBot Won't Turn On:**\n    *   Check if batteries are installed correctly in the Battery Box (polarity + / -).\n    *   Try fresh batteries.\n    *   Ensure the power switch is firmly in the 'ON' position.\n    *   Check the battery box connection to the circuit board.\n*   **Remote Control Not Working:**\n    *   Check if batteries are installed correctly in the remote.\n    *   Try fresh batteries.\n    *   Ensure you have a clear line of sight to the RoverBot's IR sensor.\n    *   Check if you are within range (3-5 meters).\n    *   Strong sunlight or fluorescent lighting can sometimes interfere with IR signals.\n*   **RoverBot Moves Erratically or Only One Wheel Spins:**\n    *   Check motor wire connections to the circuit board. Ensure they are fully plugged in and polarity is correct.\n    *   Check if wheels are pushed fully onto the axles and are not obstructed by debris.\n*   **Obstacle Avoidance Mode Not Working / Always Turning:**\n    *   Ensure the IR sensor is securely connected to the circuit board.\n    *   Clean the front of the IR sensor; dust or smudges can affect performance.\n    *   Check if there is something constantly in front of the sensor (e.g., a low table edge it can't see over).\n    *   Try in a different lighting environment.\n\n## Maintenance\n\n*   **Cleaning:** Wipe the RoverBot chassis and wheels with a dry or slightly damp cloth. Do not immerse in water.\n*   **Wheels & Axles:** Periodically check for hair or debris wrapped around the motor axles or caster wheel. Carefully remove any obstructions.\n*   **Battery Care:** Remove batteries if the RoverBot will not be used for several weeks to prevent potential leakage."}
{"_id": "CB-WHL-001_SCS_v1.0", "product_id": "CB-WHL-001", "product_name": "RoverBot Starter Kit", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "RoverBot Starter Kit Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# RoverBot Starter Kit Safety & Compliance (v1.0)\n\n**WARNING: CHOKING HAZARD -- Small parts. Not for children under 3 years.**\n**Recommended Age: 6+** Adult supervision recommended during assembly and operation.\n\n## Battery Safety Instructions\n\n*   Use only the type and size of batteries specified (4x AA for Robot, 2x AAA for Remote). Alkaline batteries recommended.\n*   Do not mix old and new batteries.\n*   Do not mix different types of batteries (e.g., alkaline, rechargeable, standard carbon-zinc).\n*   Install batteries with correct polarity (+ and -).\n*   Remove exhausted batteries promptly.\n*   Remove batteries if the product will not be used for an extended period.\n*   Do not short-circuit the battery terminals.\n*   Do not attempt to recharge non-rechargeable batteries.\n*   Rechargeable batteries must be removed from the toy before charging (if applicable design allows).\n*   Rechargeable batteries should only be charged under adult supervision.\n*   Dispose of batteries safely according to local regulations. Do not dispose of batteries in fire.\n\n## General Safety\n\n*   Do not operate the RoverBot near stairs or ledges where it could fall.\n*   Keep fingers, hair, and loose clothing away from moving wheels.\n*   Do not immerse the toy in water or other liquids.\n*   Operate in a safe, open indoor area away from obstacles and breakable objects.\n\n## Compliance Information (Example)\n\n*   This device complies with Part 15 of the FCC Rules. Operation is subject to the following two conditions: (1) this device may not cause harmful interference, and (2) this device must accept any interference received, including interference that may cause undesired operation.\n*   Changes or modifications not expressly approved by Kinetic Constructs could void the user's authority to operate the equipment.\n*   Conforms to the safety requirements of ASTM F963.\n*   CE Mark indicates compliance with relevant European directives.\n\nStore this sheet for future reference.\nKinetic Constructs - Building Tomorrow's Play."}
{"_id": "CB-WHL-002_AM_v1.1", "product_id": "CB-WHL-002", "product_name": "All-Terrain Explorer Bot", "doc_type": "Assembly Manual", "version": "1.1", "title": "All-Terrain Explorer Bot Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# All-Terrain Explorer Bot Assembly Manual (v1.1)\n\nLet's build your upgraded Explorer Bot!\n\n## Parts List\n\n*   1x Heavy-Duty Chassis (HD-A1)\n*   1x Electronics Cover (HD-A2)\n*   2x High-Torque Motors with Gearbox (HD-B1)\n*   4x Large Grippy Wheels (HD-B2)\n*   1x Rechargeable Battery Pack (HD-C1)\n*   1x Explorer Main Board w/ Bluetooth (HD-C2)\n*   1x Ultrasonic Sensor Module (HD-C3)\n*   8x Motor Screws (S1-HD)\n*   6x Chassis Screws (S2-HD)\n*   2x Sensor Screws (S3-HD)\n*   1x USB Charging Cable\n*   1x Small Screwdriver\n\n*(Illustrations would show each part labelled)*\n\n## Assembly Steps\n\n1.  **Mount Motors:** Attach the High-Torque Motors (HD-B1) to the designated mounts on the Heavy-Duty Chassis (HD-A1). Ensure the gearbox faces inwards. Secure each motor with four Motor Screws (S1-HD).\n    *(Diagram: Shows motor orientation and screw placement)*\n2.  **Connect Motor Wires:** Plug the wires from each motor into the M1A/M1B and M2A/M2B ports on the Explorer Main Board (HD-C2).\n    *(Diagram: Close-up of board showing motor ports)*\n3.  **Mount Main Board:** Place the Explorer Main Board (HD-C2) onto the chassis pegs. Secure with two Chassis Screws (S2-HD).\n4.  **Install Battery Pack:** Slide the Rechargeable Battery Pack (HD-C1) into its compartment on the chassis. Connect its plug to the battery input port on the Main Board (HD-C2).\n    *(Diagram: Shows battery compartment and connector)*\n5.  **Mount Ultrasonic Sensor:** Attach the Ultrasonic Sensor Module (HD-C3) to the front mounting bracket on the chassis using two Sensor Screws (S3-HD). Plug the sensor cable (typically 4-pin) into the ultrasonic sensor port on the Main Board (HD-C2).\n    *(Diagram: Shows sensor and port)*\n6.  **Attach Wheels:** Push the four Large Grippy Wheels (HD-B2) firmly onto the motor axles.\n7.  **Attach Electronics Cover:** Place the Electronics Cover (HD-A2) over the main board and battery, aligning the clips and screw holes. Secure with the remaining four Chassis Screws (S2-HD).\n\nAssembly Complete! Charge the battery fully before first use. Refer to the User & App Guide."}
{"_id": "CB-WHL-002_UG_v1.0", "product_id": "CB-WHL-002", "product_name": "All-Terrain Explorer Bot", "doc_type": "User & App Guide", "version": "1.0", "title": "All-Terrain Explorer Bot User & App Guide", "language": "en-US", "format": "Markdown", "text": "# All-Terrain Explorer Bot User & App Guide (v1.0)\n\n## Charging the Battery\n\n1.  Connect the included USB Charging Cable to the charging port on the Explorer Bot (accessible through the cover).\n2.  Connect the other end to a standard USB power adapter or computer USB port (Adapter not included).\n3.  A charging indicator LED near the port will light up (e.g., red while charging, green when full).\n4.  Allow approximately 2-3 hours for a full charge. Do not overcharge.\n\n## Powering On/Off\n\n*   Press and hold the power button on the Explorer Main Board (accessible through the cover) for 2 seconds to turn ON. You should hear a beep and see status LEDs light up.\n*   Press and hold the power button again for 2 seconds to turn OFF.\n\n## Connecting to the Kinetic Constructs App\n\n1.  **Download the App:** Search for \"Kinetic Constructs\" on the iOS App Store or Google Play Store and install the app on your compatible smartphone or tablet.\n2.  **Enable Bluetooth:** Ensure Bluetooth is enabled on your phone/tablet.\n3.  **Power On Robot:** Turn on your Explorer Bot.\n4.  **Launch App:** Open the Kinetic Constructs app.\n5.  **Connect:** Tap the 'Connect Robot' icon. The app will scan for nearby Kinetic Constructs devices. Select your Explorer Bot ([All-Terrain Explorer Bot](#/product/CB-WHL-002)) from the list.\n6.  **Pairing:** Follow any on-screen prompts. The status LED on the robot may change color or blink pattern upon successful connection.\n\n## App Controls - Drive Mode\n\n*(Screenshot: Shows app interface with virtual joystick)*\n\n*   Use the virtual joystick(s) or directional buttons in the app to drive the Explorer Bot forward, backward, left, and right.\n*   A speed slider may be available to adjust movement speed.\n*   The app may display the distance reading from the Ultrasonic Sensor in real-time.\n\n## App Controls - Block Coding Mode\n\n*   Switch to the 'Code' or 'Blocks' section in the app.\n*   This interface allows you to create programs for your robot using drag-and-drop blocks.\n*   Refer to the [Block Coding Guide](/document/CB-WHL-002_BCG_v1.0) for details.\n\n## Basic Operation\n\n*   The Explorer Bot is designed for indoor use on various surfaces like low-pile carpet and hard floors.\n*   The ultrasonic sensor helps detect obstacles in front of the robot. This data can be used in your coded programs."}
{"_id": "CB-WHL-002_BCG_v1.0", "product_id": "CB-WHL-002", "product_name": "All-Terrain Explorer Bot", "doc_type": "Block Coding Guide", "version": "1.0", "title": "All-Terrain Explorer Bot Block Coding Guide", "language": "en-US", "format": "Markdown", "text": "# All-Terrain Explorer Bot Block Coding Guide (v1.0)\n\nUnlock the potential of your Explorer Bot with block-based coding!\n\n## Accessing the Coding Interface\n\n1.  Connect your Explorer Bot to the Kinetic Constructs app via Bluetooth (see User & App Guide).\n2.  Navigate to the 'Code', 'Program', or 'Blocks' section within the app.\n\n## The Block Interface\n\n*(Screenshot: Shows the block coding environment - categories on left, workspace in center)*\n\n*   **Block Categories:** On the left, you'll find categories like 'Movement', 'Sensors', 'Control', 'Logic', 'Events'.\n*   **Workspace:** Drag blocks from the categories onto the central workspace to build your program.\n*   **Connecting Blocks:** Blocks snap together like puzzle pieces to create sequences of actions.\n\n## Basic Blocks\n\n*   **Event Blocks (e.g., 'When Start'):** Programs usually begin with an event block like 'When Start' or 'When Button Pressed'.\n*   **Movement Blocks:**\n    *   `Move Forward for [1] seconds at [50]% speed`\n    *   `Turn Left for [0.5] seconds at [40]% speed`\n    *   `Stop Moving`\n*   **Sensor Blocks:**\n    *   `Get Distance (cm)`: Returns the distance measured by the ultrasonic sensor.\n*   **Control Blocks:**\n    *   `Wait [1] seconds`\n    *   `Repeat [4] times { ... }`: Executes the blocks inside the loop multiple times.\n    *   `Forever { ... }`: Executes the blocks inside continuously.\n*   **Logic Blocks:**\n    *   `If <condition> then { ... } else { ... }`: Executes different blocks based on whether a condition is true or false.\n    *   `Distance < [20]`: A condition block used with 'If'. Compares the sensor distance to a value.\n\n## Example Project 1: Simple Square\n\n```markdown\nWhen Start:\n  Repeat [4] times {\n    Move Forward for [1] seconds at [60]% speed\n    Turn Right for [0.8] seconds at [50]% speed\n  }\n  Stop Moving\n```\n*Description: This program makes the robot attempt to drive in a square pattern.* \n\n## Example Project 2: Basic Obstacle Avoidance\n\n```markdown\nWhen Start:\n  Forever {\n    If Distance < [25] cm then {\n      Stop Moving\n      Move Backward for [0.5] seconds at [40]% speed\n      Turn Left for [1] second at [50]% speed\n    } else {\n      Move Forward at [60]% speed\n    }\n  }\n```\n*Description: The robot continuously moves forward. If it detects an object closer than 25cm, it stops, backs up, turns left, and then continues forward.* \n\n## Running Your Code\n\n*   Once your program is built, tap the 'Run' or 'Play' button in the app.\n*   The program instructions will be sent to the Explorer Bot via Bluetooth.\n*   Tap the 'Stop' button to halt the program execution.\n\nExperiment with different blocks and values to see what your Explorer Bot can do!"}
{"_id": "CB-WHL-002_TMG_v1.0", "product_id": "CB-WHL-002", "product_name": "All-Terrain Explorer Bot", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.0", "title": "All-Terrain Explorer Bot Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# All-Terrain Explorer Bot Troubleshooting & Maintenance (v1.0)\n\n## Troubleshooting Common Issues\n\n*   **Robot Won't Turn On:**\n    *   Ensure the battery is charged. Connect the USB cable and check the charging LED.\n    *   Press and hold the power button firmly for 2 seconds.\n    *   Check the battery connection to the main board inside the chassis.\n*   **Cannot Connect via Bluetooth:**\n    *   Ensure the robot is turned ON and within range (approx. 10 meters).\n    *   Ensure Bluetooth is enabled on your phone/tablet.\n    *   Try turning Bluetooth off and on again on your phone/tablet.\n    *   Try restarting the robot and the Kinetic Constructs app.\n    *   Make sure the robot is not already connected to another device.\n    *   On some devices, location services may need to be enabled for Bluetooth scanning.\n*   **Robot Not Moving Correctly (or One Side Not Moving):**\n    *   Check motor wire connections to the main board (M1A/M1B, M2A/M2B).\n    *   Check if wheels are securely attached and free from obstructions (hair, carpet fibers).\n    *   Ensure the battery is sufficiently charged; low battery can cause erratic movement.\n    *   If coding, check your movement blocks for correct duration, speed, and direction.\n*   **Ultrasonic Sensor Not Reading Correctly / Always Reading Zero or Max:**\n    *   Ensure the sensor cable is securely plugged into the correct port on the main board.\n    *   Check that the sensor 'eyes' (the two round components) are not obstructed or dirty. Wipe gently with a dry cloth.\n    *   In code, ensure you are using the correct sensor block and interpreting the value appropriately (e.g., comparing distance in cm).\n    *   Very soft or angled surfaces might be difficult for the sensor to detect reliably.\n*   **App Crashes or Freezes:**\n    *   Ensure you have the latest version of the Kinetic Constructs app installed.\n    *   Try restarting the app.\n    *   Try restarting your phone/tablet.\n    *   Check if your phone/tablet meets the minimum OS requirements for the app.\n\n## Maintenance\n\n*   **Charging:** Only use the provided USB cable. Avoid leaving the robot charging unattended for excessive periods.\n*   **Cleaning:** Wipe the chassis, wheels, and sensors with a dry or slightly damp cloth. Keep electronic components dry.\n*   **Wheels & Motors:** Check periodically for debris entanglement.\n*   **Battery Care:** Recharge the battery before it becomes completely depleted if possible. If storing for months, charge the battery to about 50% first."}
{"_id": "CB-WHL-002_SCS_v1.0", "product_id": "CB-WHL-002", "product_name": "All-Terrain Explorer Bot", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "All-Terrain Explorer Bot Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# All-Terrain Explorer Bot Safety & Compliance (v1.0)\n\n**WARNING: CHOKING HAZARD -- Small parts may be generated during assembly or if broken. Not for children under 3 years.**\n**Recommended Age: 8+** Adult supervision recommended during assembly, operation, and coding.\n\n## Battery Safety Instructions (Rechargeable Li-ion/Li-Po)\n\n*   Contains a non-user-replaceable rechargeable battery pack.\n*   Charge only using the supplied USB cable and a certified USB power source (5V DC, min 500mA).\n*   Do not attempt to open, disassemble, or modify the battery pack or robot casing containing it.\n*   Do not expose to extreme temperatures, direct sunlight, or moisture.\n*   Do not incinerate or dispose of in fire.\n*   Stop charging immediately if the battery becomes hot, swells, smokes, or emits an odor.\n*   Charge in a well-ventilated area away from flammable materials.\n*   Disconnect the charging cable once charging is complete (approx. 2-3 hours).\n*   Dispose of the product containing the battery according to local electronic waste regulations.\n\n## General Safety\n\n*   Do not operate near stairs or ledges.\n*   Keep fingers, hair, and loose clothing away from moving wheels and motors.\n*   Do not immerse the toy in water.\n*   Operate in a safe, relatively clear indoor area.\n*   The ultrasonic sensor emits inaudible sound waves; do not place directly against the ear.\n\n## Bluetooth & RF Exposure\n\n*   This device contains a Bluetooth transmitter.\n*   Maintain a distance of at least 20cm between the device and users during operation to comply with RF exposure guidelines (typical guideline statement).\n\n## Compliance Information (Example)\n\n*   **FCC ID:** [Example FCC ID: XXXXXXXXXXXXX]\n*   This device complies with Part 15 of the FCC Rules. Operation is subject to the following two conditions: (1) this device may not cause harmful interference, and (2) this device must accept any interference received, including interference that may cause undesired operation.\n*   FCC Radiation Exposure Statement: This equipment complies with FCC radiation exposure limits set forth for an uncontrolled environment. This equipment should be installed and operated with minimum distance 20cm between the radiator & your body.\n*   **IC:** [Example IC ID: YYYYY-YYYYYYYYY]\n*   Complies with CAN ICES-3(B)/NMB-3(B).\n*   Conforms to the safety requirements of ASTM F963.\n*   CE Mark indicates compliance with relevant European directives (e.g., RED, RoHS, Toy Safety Directive).\n\nStore this sheet for future reference.\nKinetic Constructs - Building Tomorrow's Play."}
{"_id": "CB-WHL-003_AM_v1.0", "product_id": "CB-WHL-003", "product_name": "SwiftLine Follower Bot", "doc_type": "Assembly Manual", "version": "1.0", "title": "SwiftLine Follower Bot Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# SwiftLine Follower Bot Assembly Manual (v1.0)\n\nBuild your speedy line-following robot!\n\n## Parts List\n\n*   1x Lightweight Chassis (LF-A1)\n*   1x Top Plate (LF-A2)\n*   2x High-Speed Motors (LF-B1)\n*   2x Narrow Wheels (LF-B2)\n*   1x Front Ball Caster (LF-B3)\n*   1x Rechargeable Battery Pack (LF-C1)\n*   1x Line Follower Main Board w/ Bluetooth (LF-C2)\n*   1x IR Line Sensor Array (LF-C3, typically 3-5 sensors)\n*   4x Motor Screws (S1-LF)\n*   6x Chassis Screws (S2-LF)\n*   2x Sensor Array Screws (S3-LF)\n*   1x USB Charging Cable\n*   1x Small Screwdriver\n*   1x Black Electrical Tape (for creating lines)\n\n*(Illustrations would show each part labelled)*\n\n## Assembly Steps\n\n1.  **Attach Motors:** Mount the High-Speed Motors (LF-B1) to the Lightweight Chassis (LF-A1). Secure with Motor Screws (S1-LF).\n2.  **Connect Motor Wires:** Plug wires into M1A/M1B and M2A/M2B ports on the Line Follower Main Board (LF-C2).\n3.  **Mount Main Board:** Secure the Main Board (LF-C2) onto the chassis pegs using Chassis Screws (S2-LF).\n4.  **Install Battery:** Place the Battery Pack (LF-C1) in its holder and connect to the board.\n5.  **Mount Ball Caster:** Attach the Ball Caster (LF-B3) to the front underside of the chassis.\n6.  **Mount Line Sensor Array:** Attach the IR Line Sensor Array (LF-C3) to the front underside, ensuring sensors face down and are positioned slightly ahead of the wheels. Use Sensor Array Screws (S3-LF). Connect the sensor cable to the designated port on the Main Board (LF-C2).\n    *(Diagram: Shows optimal height and position of sensor array relative to the ground and wheels)*\n7.  **Attach Wheels:** Push Narrow Wheels (LF-B2) onto motor axles.\n8.  **Attach Top Plate:** Secure the Top Plate (LF-A2) using the remaining Chassis Screws (S2-LF).\n\nAssembly Complete! Charge the battery. Refer to User Guide & Coding Guide."}
{"_id": "CB-WHL-003_UG_v1.0", "product_id": "CB-WHL-003", "product_name": "SwiftLine Follower Bot", "doc_type": "User & App Guide", "version": "1.0", "title": "SwiftLine Follower Bot User & App Guide", "language": "en-US", "format": "Markdown", "text": "# SwiftLine Follower Bot User & App Guide (v1.0)\n\n## Charging & Power\n\n*   Charge the battery using the USB cable as described for [All-Terrain Explorer Bot](/product/CB-WHL-002).\n*   Power ON/OFF using the button on the main board.\n\n## Connecting to the App\n\n*   Connect via Bluetooth using the Kinetic Constructs app, similar to [All-Terrain Explorer Bot](/product/CB-WHL-002).\n\n## App Controls\n\n*   **Drive Mode:** Manual control via virtual joystick.  \n*   **Line Follow Mode (Pre-Programmed):** Select 'Line Follow' mode in the app. Place the bot on a black line (approx 1.5-2.5cm wide) on a white background. The bot should attempt to follow the line automatically using its built-in program.  \n*   **Calibration (Recommended):** Before running Line Follow mode or custom code, use the 'Calibrate Sensors' function in the app. Place the bot entirely on the white surface, press calibrate. Then place it so sensors are over the black line, press calibrate again. This helps the bot distinguish the line.  \n*   **Coding Mode:** Access the block coding interface to create custom line-following logic or other programs.\n\n## Creating Lines\n\n*   Use the included black electrical tape on a smooth, light-colored surface (like white poster board or tile floor).  \n*   Avoid sharp turns initially; gradual curves work best.  \n*   Ensure good contrast between the line and the background.\n\n## Basic Operation\n\n*   The bot uses the IR sensor array to detect the difference in reflection between the black line and the white background to steer."}
{"_id": "CB-WHL-003_BCG_v1.0", "product_id": "CB-WHL-003", "product_name": "SwiftLine Follower Bot", "doc_type": "Block Coding Guide", "version": "1.0", "title": "SwiftLine Follower Bot Block Coding Guide (Incl. PID Concepts)", "language": "en-US", "format": "Markdown", "text": "# SwiftLine Follower Bot Block Coding Guide (v1.0)\n\nMaster line following with block coding!\n\n## Accessing the Coding Interface\n\n*   Connect to the Kinetic Constructs app and navigate to the 'Code' section.\n\n## New Blocks for Line Following\n\n*   **Sensor Blocks:**\n    *   `Get Line Sensor Values`: Returns a list or value indicating sensor readings (e.g., [0, 0, 1, 0, 0] might mean the middle sensor sees the line).\n    *   `Get Line Position`: Returns a calculated value representing the line's position relative to the center (e.g., -2=far left, 0=center, +2=far right).\n*   **Calibration Blocks:**\n    *   `Calibrate Line Sensors`: Initiates the calibration routine (usually requires placing on white then black).\n\n## Example Project 1: Simple Bang-Bang Control\n\n```markdown\nWhen Start:\n  Calibrate Line Sensors\n  Wait [2] seconds\n  Forever {\n    LinePos = Get Line Position\n    If LinePos < 0 then {\n      // Line is to the left, turn left slightly\n      Set Left Motor Speed [30]%\n      Set Right Motor Speed [60]%\n    } else if LinePos > 0 then {\n      // Line is to the right, turn right slightly\n      Set Left Motor Speed [60]%\n      Set Right Motor Speed [30]%\n    } else {\n      // Line is roughly centered, go straight\n      Set Left Motor Speed [60]%\n      Set Right Motor Speed [60]%\n    }\n  }\n```\n*Description: A simple but often wobbly line follower. Turns sharply left or right based on which side the line is on.* \n\n## Introduction to PID Control (Conceptual)\n\n*   Simple control (like above) can overshoot or oscillate. PID (Proportional-Integral-Derivative) control makes smoother adjustments.\n*   **Proportional (P):** The further the line is from the center, the sharper the turn. (Error = Line Position)\n    *   `Correction = P_Constant * Error`\n*   **Integral (I):** Accumulates past errors. Helps correct steady-state errors (e.g., if always slightly off-center on curves).\n    *   `Integral = Integral + Error`\n    *   `Correction = Correction + (I_Constant * Integral)`\n*   **Derivative (D):** Reacts to how quickly the error is changing. Helps dampen oscillations.\n    *   `Derivative = Error - PreviousError`\n    *   `Correction = Correction + (D_Constant * Derivative)`\n    *   `PreviousError = Error`\n*   **Applying Correction:** The calculated `Correction` value adjusts the motor speeds.\n    *   `Left Speed = BaseSpeed + Correction`\n    *   `Right Speed = BaseSpeed - Correction`\n\n## Example Project 2: Proportional (P) Control\n\n```markdown\nWhen Start:\n  P_Constant = 10 // Tune this value!\n  BaseSpeed = 50\n  Calibrate Line Sensors\n  Wait [2] seconds\n  Forever {\n    Error = Get Line Position\n    Correction = P_Constant * Error\n    LeftSpeed = BaseSpeed + Correction\n    RightSpeed = BaseSpeed - Correction\n    // Clamp speeds to valid range (e.g., 0-100)\n    LeftSpeed = clamp(LeftSpeed, 0, 100)\n    RightSpeed = clamp(RightSpeed, 0, 100)\n    Set Left Motor Speed LeftSpeed %\n    Set Right Motor Speed RightSpeed %\n  }\n```\n*Description: A smoother line follower using proportional control. Requires tuning the `P_Constant` for best performance.* \n\n*(Further sections could introduce adding I and D terms with more complex blocks or dedicated PID blocks if available)*\n\n## Running Your Code\n\n*   Build, Run, and Stop code via the app interface."}
{"_id": "CB-WHL-003_TMG_v1.1", "product_id": "CB-WHL-003", "product_name": "SwiftLine Follower Bot", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.1", "title": "SwiftLine Follower Bot Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# SwiftLine Follower Bot Troubleshooting & Maintenance (v1.1)\n\n## Troubleshooting Common Issues\n\n*   **(General Issues like Power/Bluetooth):** Refer to [All-Terrain Explorer Bot Troubleshooting & Maintenance Guide](/document/CB-WHL-002_TMG).\n*   **Bot Doesn't Follow Line / Loses Line Easily:**\n    *   **Run Calibration:** Use the app's 'Calibrate Sensors' function *every time* lighting conditions or the surface changes significantly.\n    *   **Check Sensor Height:** Ensure the sensor array is at the optimal height (typically 3-5mm) above the surface. Too high or too low affects readings.\n    *   **Clean Sensors:** Gently wipe the IR emitters and detectors on the sensor array.\n    *   **Check Line Quality:** Use tape with good contrast on a clean, smooth surface. Avoid very sharp turns, gaps in the tape, or reflective surfaces near the line.\n    *   **Ambient Light:** Strong direct sunlight or specific types of artificial light can interfere with IR sensors. Try in different lighting.\n    *   **Speed:** If using custom code, the bot might be moving too fast for the sensors/control logic to keep up. Try reducing `BaseSpeed`.\n    *   **PID Tuning (if applicable):** If using P, PI, or PID control, the constants (P_Constant, I_Constant, D_Constant) need careful tuning. Incorrect values cause poor performance. Start with P, then add D, then I, tuning each step.\n*   **Bot Oscillates (Wobbles) Side-to-Side:**\n    *   Likely PID tuning issue. If using P-only, `P_Constant` might be too high. If using PID, `D_Constant` might be too low or `P_Constant` too high.\n    *   Check sensor height and calibration.\n*   **Bot Always Turns One Direction:**\n    *   Check motor connections.\n    *   Check if one side of the sensor array is dirty or damaged.\n    *   Run calibration.\n    *   Check your code logic for biases.\n\n## Maintenance\n\n*   **(General Maintenance like Charging/Cleaning):** Refer to [All-Terrain Explorer Bot Troubleshooting & Maintenance Guide](/document/CB-WHL-002_TMG).\n*   **Line Sensor Care:** Keep the sensor array clean and free from scratches.\n*   **Wheels:** Ensure wheels are clean for consistent traction."}
{"_id": "CB-WHL-003_SCS_v1.0", "product_id": "CB-WHL-003", "product_name": "SwiftLine Follower Bot", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "SwiftLine Follower Bot Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# SwiftLine Follower Bot Safety & Compliance (v1.0)\n\n**WARNING: CHOKING HAZARD -- Small parts. Not for children under 3 years.**\n**Recommended Age: 9+** Adult supervision recommended.\n\n## Battery Safety Instructions (Rechargeable)\n\n*   Follow guidelines provided for [All-Terrain Explorer Bot](/product/CB-WHL-002) (Rechargeable Battery Pack).\n\n## General Safety\n\n*   This robot can move quickly. Operate in a clear, safe indoor area away from people, pets, stairs, and breakable objects.\n*   Keep fingers, hair, and loose clothing away from moving wheels.\n*   Do not immerse in water.\n*   The IR Line Sensor emits low-level infrared light, considered safe for normal operation.\n\n## Bluetooth & RF Exposure\n\n*   Follow guidelines provided for [All-Terrain Explorer Bot](/product/CB-WHL-002).\n\n## Compliance Information (Example)\n\n*   Follow guidelines and example IDs provided for [All-Terrain Explorer Bot](/product/CB-WHL-002) (FCC, IC, CE, ASTM).\n\nStore this sheet for future reference.\nKinetic Constructs - Building Tomorrow's Play."}
{"_id": "CB-TRK-001_AM_v1.0", "product_id": "CB-TRK-001", "product_name": "Tank Treads Bot", "doc_type": "Assembly Manual", "version": "1.0", "title": "Tank Treads Bot Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# Tank Treads Bot Assembly Manual (v1.0)\n\nAssemble your powerful tracked robot!\n\n## Parts List\n\n*   1x Tracked Chassis Base (TRK-A1)\n*   1x Upper Deck (TRK-A2)\n*   2x Motor with Gearbox Units (TRK-B1)\n*   2x Drive Sprockets (TRK-B2)\n*   4x Idler Wheels (TRK-B3)\n*   2x Rubber Track Sets (TRK-B4)\n*   1x Rechargeable Battery Pack (TRK-C1)\n*   1x Track Bot Main Board w/ Bluetooth (TRK-C2)\n*   1x Front Bumper/Sensor Mount (TRK-D1)\n*   8x Motor Screws\n*   10x Chassis Screws\n*   4x Idler Wheel Axles/Screws\n*   1x USB Charging Cable\n*   1x Screwdriver\n\n*(Illustrations needed)*\n\n## Assembly Steps\n\n1.  **Mount Motors:** Attach Motor Units (TRK-B1) to the rear of the Chassis Base (TRK-A1). Secure with Motor Screws.\n2.  **Attach Drive Sprockets:** Push Drive Sprockets (TRK-B2) onto the motor output shafts.\n3.  **Attach Idler Wheels:** Mount the Idler Wheels (TRK-B3) onto the front and potentially middle axle points on the chassis using Idler Wheel Axles/Screws.\n    *(Diagram: Show wheel placement)*\n4.  **Install Tracks:** Wrap one Rubber Track Set (TRK-B4) around the drive sprocket and idler wheels on one side. Ensure teeth engage with the sprocket. Repeat for the other side. Adjust tension if mechanism allows (some designs might have adjustable idlers).\n    *(Diagram: Shows how to wrap track)*\n5.  **Connect Motor Wires:** Plug motor wires into M1A/M1B, M2A/M2B ports on the Main Board (TRK-C2).\n6.  **Mount Main Board:** Secure the Main Board (TRK-C2) to the Chassis Base (TRK-A1) using Chassis Screws.\n7.  **Install Battery:** Place Battery Pack (TRK-C1) and connect to the board.\n8.  **Attach Upper Deck & Bumper:** Secure the Upper Deck (TRK-A2) and Front Bumper (TRK-D1) using remaining Chassis Screws.\n\nAssembly Complete! Charge the battery."}
{"_id": "CB-TRK-001_UG_v1.0", "product_id": "CB-TRK-001", "product_name": "Tank Treads Bot", "doc_type": "User & App Guide", "version": "1.0", "title": "Tank Treads Bot User & App Guide", "language": "en-US", "format": "Markdown", "text": "# Tank Treads Bot User & App Guide (v1.0)\n\n## Charging & Power\n\n*   Charge the battery via USB (similar to [All-Terrain Explorer Bot](/product/CB-WHL-002)).\n*   Power ON/OFF via button on the main board.\n\n## Connecting to the App\n\n*   Connect via Bluetooth using the Kinetic Constructs app.\n\n## App Controls - Drive Mode\n\n*(Screenshot: App interface with Tank/Skid Steer controls)*\n\n*   Use the virtual joysticks optimized for tank control (Skid Steer). Pushing both forward moves straight, pushing one forward and one back spins in place, etc.\n*   Speed control may be available.\n\n## App Controls - Block Coding Mode\n\n*   Access the block coding interface to program custom movements and behaviors.\n\n## Basic Operation\n\n*   Tank Treads provide good traction on various indoor surfaces, including low carpet and small obstacles (e.g., wires, thresholds).\n*   Avoid running in sand, dirt, or water, which can jam the tracks or damage electronics.\n*   Turning is achieved by varying the speed/direction of the two tracks (skid steering)."}
{"_id": "CB-TRK-001_BCG_v1.0", "product_id": "CB-TRK-001", "product_name": "Tank Treads Bot", "doc_type": "Block Coding Guide", "version": "1.0", "title": "Tank Treads Bot Block Coding Guide", "language": "en-US", "format": "Markdown", "text": "# Tank Treads Bot Block Coding Guide (v1.0)\n\nProgram your Tank Treads Bot!\n\n## Accessing the Coding Interface\n\n*   Connect via the Kinetic Constructs app and go to the 'Code' section.\n\n## Movement Blocks (Tank Specific)\n\n*   Blocks may be similar to wheeled robots (`Move Forward`, `Turn Left`, etc.), but the underlying control sends different signals to the motors for skid steering.\n*   Alternatively, there might be specific blocks:\n    *   `Set Left Track Speed [50]%`\n    *   `Set Right Track Speed [70]%`\n    *   `Spin Clockwise for [1] sec at [60]% speed`\n*   Refer to the available blocks in the app.\n\n## Example Project 1: Spin and Go\n\n```markdown\nWhen Start:\n  Spin Clockwise for [1] second at [70]% speed\n  Wait [0.5] seconds\n  Move Forward for [2] seconds at [60]% speed\n  Stop Moving\n```\n*Description: Performs a spin, pauses, then moves forward.* \n\n## Example Project 2: Bump and Turn (Requires adding optional bumper sensors or using motor stall detection if available)\n\n*(Assuming a simple bumper switch connected to a digital input pin, or a way to detect increased motor current)*\n\n```markdown\nWhen Start:\n  Forever {\n    Move Forward at [50]% speed\n    Wait until <Bumper Pressed> or <Motor Stalled> // Requires specific event or sensor blocks\n    Move Backward for [1] second at [40]% speed\n    Spin Left for [0.8] seconds at [60]% speed\n  }\n```\n*Description: Moves forward until it hits something, then backs up and turns. Note: Requires sensors not included in base kit or advanced motor control.* \n\n## Running Your Code\n\n*   Build, Run, and Stop code via the app interface."}
{"_id": "CB-TRK-001_TMG_v1.0", "product_id": "CB-TRK-001", "product_name": "Tank Treads Bot", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.0", "title": "Tank Treads Bot Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# Tank Treads Bot Troubleshooting & Maintenance (v1.0)\n\n## Troubleshooting Common Issues\n\n*   **(General Issues like Power/Bluetooth):** Refer to [All-Terrain Explorer Bot Troubleshooting & Maintenance Guide](/document/CB-WHL-002_TMG_v1.0).\n*   **One Track Not Moving / Bot Spins in Circles:**\n    *   Check motor wire connections for the affected track.\n    *   Check if the track is jammed, too tight, or has come off the sprockets/wheels.\n    *   Ensure the drive sprocket is securely attached to the motor shaft.\n*   **Tracks Slipping or Coming Off:**\n    *   Check track tension. If adjustable, tighten slightly. If not adjustable, ensure all idler wheels and sprockets are correctly installed.\n    *   Clean tracks and wheels/sprockets of debris.\n    *   Avoid running on very slippery surfaces or making extremely sharp turns at high speed.\n*   **Robot Moves Sluggishly:**\n    *   Check battery charge level.\n    *   Check for debris caught in tracks or around axles/sprockets.\n    *   Ensure tracks are not overly tight.\n\n## Maintenance\n\n*   **(General Maintenance like Charging/Cleaning):** Refer to [All-Terrain Explorer Bot Troubleshooting & Maintenance Guide](/document/CB-WHL-002_TMG_v1.0). Pay extra attention to cleaning the tracks.\n*   **Track Tension:** Periodically check if tracks feel loose. Adjust if possible, or check for worn parts.\n*   **Debris Removal:** Regularly inspect tracks, wheels, and sprockets for embedded dirt, hair, or carpet fibers and clean them out."}
{"_id": "CB-TRK-001_SCS_v1.0", "product_id": "CB-TRK-001", "product_name": "Tank Treads Bot", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "Tank Treads Bot Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# Tank Treads Bot Safety & Compliance (v1.0)\n\n**WARNING: CHOKING HAZARD -- Small parts. Not for children under 3 years.**\n**Recommended Age: 8+** Adult supervision recommended.\n\n## Battery Safety Instructions (Rechargeable)\n\n*   Follow guidelines provided for [All-Terrain Explorer Bot](/product/CB-WHL-002) (Rechargeable Battery Pack).\n\n## General Safety\n\n*   Keep fingers, hair, and loose clothing away from moving tracks, wheels, and gears.\n*   Operate in a safe indoor area. Avoid stairs and ledges.\n*   Do not operate in sand, dirt, water, or tall grass/carpet which can jam the tracks.\n*   Do not immerse in water.\n\n## Bluetooth & RF Exposure\n\n*   Follow guidelines provided for [All-Terrain Explorer Bot](/product/CB-WHL-002).\n\n## Compliance Information (Example)\n\n*   Follow guidelines and example IDs provided for [All-Terrain Explorer Bot](/product/CB-WHL-002) (FCC, IC, CE, ASTM).\n\nStore this sheet for future reference.\nKinetic Constructs - Building Tomorrow's Play."}
{"_id": "CB-TRK-002_AM_v1.0", "product_id": "CB-TRK-002", "product_name": "Arctic Explorer TrackBot", "doc_type": "Assembly Manual", "version": "1.0", "title": "Arctic Explorer TrackBot Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# Arctic Explorer TrackBot Assembly Manual (v1.0)\n\nBuild your sensor-enhanced Arctic Explorer!\n\n## Parts List\n\n*   (Similar chassis/track components as [Tank Treads Bot](/product/CB-TRK-001), potentially different color/theme: TRK-AE-A1, etc.)\n*   2x Motor with Gearbox Units (TRK-AE-B1)\n*   2x Drive Sprockets, 4x Idler Wheels, 2x Track Sets (TRK-AE-B2/B3/B4)\n*   1x Rechargeable Battery Pack (TRK-AE-C1)\n*   1x Explorer Pro Main Board w/ Bluetooth & Wi-Fi (TRK-AE-C2)\n*   1x Temperature Sensor Module (TRK-AE-C3)\n*   1x Light Sensor Module (TRK-AE-C4)\n*   1x Ultrasonic Sensor Module (TRK-AE-C5)\n*   (Screws, Cables, Tools)\n*   Themed stickers/accessories\n\n*(Illustrations needed)*\n\n## Assembly Steps\n\n1.  **Assemble Chassis & Tracks:** Follow steps similar to [Tank Treads Bot](/product/CB-TRK-001) (Motors, Sprockets, Idlers, Tracks).\n2.  **Mount Main Board & Battery:** Install the Explorer Pro Main Board (TRK-AE-C2) and Battery (TRK-AE-C1). Connect motors and battery.\n3.  **Mount Sensors:**\n    *   Attach Ultrasonic Sensor (TRK-AE-C5) to the front bumper/mount.\n    *   Mount Temperature Sensor (TRK-AE-C3) (e.g., on the upper deck, away from motors).\n    *   Mount Light Sensor (TRK-AE-C4) (e.g., facing upwards or forwards on the upper deck).\n    *   Connect all sensor cables to their designated ports on the Main Board.\n    *(Diagram: Show recommended sensor placements and board connections)*\n4.  **Attach Upper Deck/Covers:** Secure the remaining chassis parts.\n5.  **Apply Stickers (Optional):** Add the themed Arctic Explorer decals.\n\nAssembly Complete! Charge the battery."}
{"_id": "CB-TRK-002_UG_v1.1", "product_id": "CB-TRK-002", "product_name": "Arctic Explorer TrackBot", "doc_type": "User & App Guide", "version": "1.1", "title": "Arctic Explorer TrackBot User & App Guide", "language": "en-US", "format": "Markdown", "text": "# Arctic Explorer TrackBot User & App Guide (v1.1)\n\n## Charging & Power\n\n*   Charge via USB. Power ON/OFF via button.\n\n## Connecting to the App (Bluetooth)\n\n*   Connect via Bluetooth using the Kinetic Constructs app for basic control and block coding.\n\n## Connecting to Wi-Fi (for Python/Advanced Use)\n\n1.  Ensure the robot is powered on.\n2.  In the Kinetic Constructs app (while connected via Bluetooth), navigate to Settings > Wi-Fi Setup.\n3.  Follow the prompts to scan for local Wi-Fi networks (2.4GHz only supported).\n4.  Select your network SSID and enter the password.\n5.  The robot will attempt to connect. Status LEDs may indicate connection success/failure.\n6.  Once connected, the robot can potentially be accessed over the network using its IP address (for Python programming - see [Arctic Explorer TrackBot Python API Reference](/document/CB-TRK-002_API_v1.0)).\n\n## App Controls\n\n*   **Drive Mode:** Tank/Skid steer controls.\n*   **Sensor Dashboard:** The app may display real-time readings from the Temperature, Light, and Ultrasonic sensors.\n*   **Block Coding Mode:** Access the block coding interface.\n*   **Python Mode (Setup):** May provide info needed for Python connection (IP Address).\n\n## Basic Operation\n\n*   Operates similarly to [Tank Treads Bot](/product/CB-TRK-001) but with added sensor capabilities for more complex programming."}
{"_id": "CB-TRK-002_BCG_v1.0", "product_id": "CB-TRK-002", "product_name": "Arctic Explorer TrackBot", "doc_type": "Block Coding Guide", "version": "1.0", "title": "Arctic Explorer TrackBot Block Coding Guide", "language": "en-US", "format": "Markdown", "text": "# Arctic Explorer TrackBot Block Coding Guide (v1.0)\n\nProgram your Explorer with advanced sensors!\n\n## Accessing the Coding Interface\n\n*   Connect via the Kinetic Constructs app ('Code' section).\n\n## New Sensor Blocks\n\n*   **Sensor Blocks:**\n    *   `Get Temperature (°C / °F)`: Returns ambient temperature reading.\n    *   `Get Light Level (0-100)`: Returns ambient light intensity (relative value).\n    *   `Get Distance (cm)`: Returns ultrasonic sensor reading.\n\n## Example Project 1: Thermostat Bot\n\n```markdown\nWhen Start:\n  Set Threshold = 25 // Degrees C\n  Forever {\n    Temp = Get Temperature (°C)\n    If Temp > Threshold then {\n      // Simulate 'cooling fan' - spin motors slowly\n      Set Left Track Speed [20]%\n      Set Right Track Speed [20]%\n      // Optional: Add LED block if available\n      Set LED Color Red \n    } else {\n      Stop Moving\n      Set LED Color Green\n    }\n    Wait [5] seconds // Check temperature every 5 seconds\n  }\n```\n*Description: If the temperature goes above 25°C, the bot spins its tracks slowly (like a fan) and turns an LED Red.* \n\n## Example Project 2: Light-Seeking Bot\n\n```markdown\nWhen Start:\n  Forever {\n    Light = Get Light Level\n    If Light < 30 then {\n      // It's dark, search for light by spinning\n      Spin Clockwise for [0.5] seconds at [40]% speed\n    } else {\n      // It's bright enough, stop\n      Stop Moving\n    }\n    Wait [1] second\n  }\n```\n*Description: If the light level is low, the bot spins, potentially moving towards a brighter area. If bright, it stops.* \n\n## Combining Sensors\n\nYou can use multiple sensors in your logic (e.g., move forward, but if an obstacle is detected OR it gets too hot, then stop).\n\n## Running Your Code\n\n*   Build, Run, and Stop code via the app."}
{"_id": "CB-TRK-002_API_v1.0", "product_id": "CB-TRK-002", "product_name": "Arctic Explorer TrackBot", "doc_type": "Python API Reference", "version": "1.0", "title": "Arctic Explorer TrackBot Python API Reference", "language": "en-US", "format": "Markdown", "text": "# Arctic Explorer TrackBot Python API Reference (v1.0)\n\nControl your Explorer Bot directly using Python!\n\n## Setup\n\n1.  **Install Library:** `pip install kinetic_constructs_bots` (Assumes a library is provided)\n2.  **Connect Robot to Wi-Fi:** Use the mobile app to connect your robot to the same Wi-Fi network as your computer.\n3.  **Find Robot IP:** Use the mobile app or a network scanning tool to find the robot's IP address.\n\n## Connecting to the Robot\n\n```python\nfrom kinetic_constructs_bots import ArcticExplorer\n\n# Replace with your robot's actual IP address\nrobot_ip = \"192.168.1.150\"\n\ntry:\n    bot = ArcticExplorer(ip_address=robot_ip)\n    print(\"Connected to Arctic Explorer!\")\nexcept ConnectionError as e:\n    print(f\"Failed to connect: {e}\")\n    exit()\n\n```\n\n## Motor Control\n\n```python\n# Set individual track speeds (-100 to 100)\n# Positive = forward, Negative = backward\nbot.set_track_speeds(left_speed=50, right_speed=50) # Move forward\nbot.sleep(2) # Time delay function needed\n\nbot.set_track_speeds(left_speed=50, right_speed=-50) # Spin clockwise\nbot.sleep(1)\n\n# Stop motors\nbot.stop_motors()\n\n# Higher-level functions might exist\n# bot.move_forward(speed=60, duration=3)\n# bot.turn_left(speed=50, angle=90) # Angle might be approximate\n```\n\n## Sensor Reading\n\n```python\ntemperature_c = bot.get_temperature()\n# temperature_f = bot.get_temperature(unit='F')\nprint(f\"Temperature: {temperature_c}°C\")\n\nlight_level = bot.get_light_level() # Returns a value (e.g., 0-1023 or 0-100)\nprint(f\"Light Level: {light_level}\")\n\ndistance_cm = bot.get_distance()\nprint(f\"Distance: {distance_cm} cm\")\n```\n\n## Example: Obstacle Avoidance\n\n```python\nimport time\n\ntry:\n    while True:\n        distance = bot.get_distance()\n        if distance is not None and distance < 20:\n            print(\"Obstacle detected!\")\n            bot.set_track_speeds(-40, -40) # Back up\n            time.sleep(1)\n            bot.set_track_speeds(-50, 50) # Turn right\n            time.sleep(0.8)\n        else:\n            bot.set_track_speeds(60, 60) # Go forward\n        \n        time.sleep(0.1) # Loop delay\n\nexcept KeyboardInterrupt:\n    print(\"Stopping program.\")\nfinally:\n    bot.stop_motors()\n    # bot.disconnect() # Optional disconnect function\n\n```\n\n## API Reference (Summary)\n\n*   `ArcticExplorer(ip_address)`: Constructor\n*   `set_track_speeds(left_speed, right_speed)`: -100 to 100\n*   `stop_motors()`\n*   `get_temperature(unit='C')`: Returns float or None\n*   `get_light_level()`: Returns int or None\n*   `get_distance()`: Returns float (cm) or None\n*   `sleep(seconds)`: Pauses execution (provided by library or use `time.sleep`)\n*   *(Other potential functions: `move_forward`, `turn_degrees`, LED control, battery status, etc.)*\n\nRefer to the full library documentation for details and error handling."}
{"_id": "CB-TRK-002_TMG_v1.2", "product_id": "CB-TRK-002", "product_name": "Arctic Explorer TrackBot", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.2", "title": "Arctic Explorer TrackBot Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# Arctic Explorer TrackBot Troubleshooting & Maintenance (v1.2)\n\n## Troubleshooting Common Issues\n\n*   **(General & Track Issues):** Refer to [Tank Treads Bot Troubleshooting & Maintenance Guide](/document/CB-TRK-001_TMG).\n*   **(Bluetooth Issues):** Refer to [All-Terrain Explorer Bot Troubleshooting & Maintenance Guide](/document/CB-WHL-002_TMG).\n*   **Cannot Connect to Wi-Fi:**\n    *   Double-check Wi-Fi network name (SSID) and password during setup.\n    *   Ensure the robot is within range of the Wi-Fi router.\n    *   Verify the network is 2.4GHz (most IoT devices don't support 5GHz).\n    *   Restart the robot and the Wi-Fi router.\n    *   Check router settings - MAC filtering or other security might block the robot.\n*   **Cannot Connect via Python (Network Error):**\n    *   Ensure the robot is ON and connected to the *same* Wi-Fi network as your computer.\n    *   Verify the IP address being used in the script is correct. The robot's IP might change (DHCP).\n    *   Check firewall settings on your computer; it might be blocking outgoing connections to the robot's port.\n    *   Try pinging the robot's IP address from your computer's command line/terminal (`ping <robot_ip>`).\n*   **Incorrect Sensor Readings:**\n    *   **Temperature:** Allow sensor time to acclimatize. Avoid direct sunlight or heat from motors affecting readings. Check connection.\n    *   **Light:** Readings are relative. Check sensor isn't covered or dirty. Test under different known light conditions. Check connection.\n    *   **Ultrasonic:** Refer to [All-Terrain Explorer Bot Troubleshooting & Maintenance Guide](/document/CB-WHL-002_TMG) for ultrasonic sensor issues (cleanliness, obstructions, surface types). Check connection.\n\n## Maintenance\n\n*   **(General & Track Maintenance):** Refer to [Tank Treads Bot Troubleshooting & Maintenance Guide](/document/CB-TRK-001_TMG).\n*   **Sensor Care:** Keep sensor modules clean and connections secure."}
{"_id": "CB-TRK-002_SCS_v1.0", "product_id": "CB-TRK-002", "product_name": "Arctic Explorer TrackBot", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "Arctic Explorer TrackBot Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# Arctic Explorer TrackBot Safety & Compliance (v1.0)\n\n**WARNING: CHOKING HAZARD -- Small parts. Not for children under 3 years.**  \n**Recommended Age: 12+** Adult supervision recommended, especially for Wi-Fi setup and Python programming.\n\n## Battery Safety Instructions (Rechargeable)\n\n*   Follow guidelines provided for [All-Terrain Explorer Bot](/product/CB-WHL-002) (Rechargeable Battery Pack).\n\n## General Safety\n\n*   Follow guidelines provided for [Tank Treads Bot](/product/CB-TRK-001) (Tracked Robots).\n\n## Wi-Fi / Bluetooth & RF Exposure\n\n*   This device contains Wi-Fi and Bluetooth transmitters.\n*   Follow RF exposure distance guidelines provided for [All-Terrain Explorer Bot](/product/CB-WHL-002) (maintain >20cm).\n*   Network Security: Connecting the device to a Wi-Fi network carries inherent security risks. Ensure your Wi-Fi network uses strong WPA2/WPA3 security. Kinetic Constructs is not responsible for network security breaches.\n\n## Compliance Information (Example)\n\n*   Follow guidelines and example IDs provided for [All-Terrain Explorer Bot](/product/CB-WHL-002) (FCC, IC, CE, ASTM). Note that Wi-Fi modules have specific regulatory requirements often detailed separately.\n*   Contains FCC ID: [Example FCC ID for Wi-Fi module]\n*   Contains IC: [Example IC ID for Wi-Fi module]\n\nStore this sheet for future reference.  \nKinetic Constructs - Building Tomorrow's Play."}
{"_id": "CB-LEG4-001_AM_v1.0", "product_id": "CB-LEG4-001", "product_name": "QuadruPed Walker Kit", "doc_type": "Assembly Manual", "version": "1.0", "title": "QuadruPed Walker Kit Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# QuadruPed Walker Kit Assembly Manual (v1.0)\n\nBuild your four-legged walking robot!\n\n## Parts List\n\n*   1x Main Body Chassis (QP-A1)\n*   4x Upper Leg Segments (QP-L1)\n*   4x Lower Leg Segments (QP-L2)\n*   4x Feet (QP-L3)\n*   8x Standard Servo Motors (QP-S1) - 2 per leg\n*   1x Servo Control Board w/ Bluetooth (QP-C1)\n*   1x Rechargeable Battery Pack (QP-C2)\n*   Servo Horns & Screws Pack (QP-H1)\n*   Assorted Screws & Nuts Pack (QP-M1)\n*   1x USB Charging Cable\n*   Screwdrivers/Tools\n\n*(Illustrations needed)*\n\n## Assembly Steps (High Level)\n\n**Important:** Servo Centering - Before attaching servo horns, it's often recommended to connect servos to the board, power up briefly (or use a servo tester) to allow them to move to their default center position (e.g., 90 degrees). Then attach the horns in the orientation shown in the diagrams.\n\n1.  **Assemble Legs:**\n    *   Attach one servo (e.g., 'hip' servo) to the Main Body Chassis (QP-A1).\n    *   Attach the Upper Leg Segment (QP-L1) to this servo using a horn and screws.\n    *   Attach the second servo (e.g., 'knee' servo) to the end of the Upper Leg Segment.\n    *   Attach the Lower Leg Segment (QP-L2) to the knee servo using a horn.\n    *   Attach the Foot (QP-L3) to the Lower Leg Segment.\n    *(Diagram: Detailed view of one leg assembly, showing servo placement and horn orientation)*\n2.  **Repeat for all 4 Legs:** Carefully replicate the leg assembly for all four corners, ensuring correct orientation (left/right legs might differ).\n3.  **Mount Control Board & Battery:** Secure the Servo Control Board (QP-C1) and Battery Pack (QP-C2) onto the Main Body Chassis.\n4.  **Connect Servos:** Plug the 3-pin connector from each of the 8 servos into the designated numbered ports on the Control Board (QP-C1). Ensure correct polarity (Signal, V+, GND - usually marked).\n    *(Diagram: Shows board layout and servo port numbering/wiring)*\n5.  **Connect Battery:** Plug the battery into the board.\n6.  **Tidy Wires:** Use cable ties or channels if provided to manage servo wires neatly.\n\nAssembly Complete! Charge the battery. Leg calibration might be needed (see User Guide/TMG)."}
{"_id": "CB-LEG4-001_UG_v1.0", "product_id": "CB-LEG4-001", "product_name": "QuadruPed Walker Kit", "doc_type": "User & App Guide", "version": "1.0", "title": "QuadruPed Walker Kit User & App Guide", "language": "en-US", "format": "Markdown", "text": "# QuadruPed Walker Kit User & App Guide (v1.0)\n\n## Charging & Power\n\n*   Charge the battery via USB.\n*   Power ON/OFF via switch/button on the control board.\n\n## Connecting to the App\n\n*   Connect via Bluetooth using the Kinetic Constructs app.\n\n## App Controls - Walk Mode\n\n*(Screenshot: App interface with walking controls)*\n\n*   Use virtual joystick or buttons for basic walking gaits: Forward, Backward, Turn Left, Turn Right.\n*   May include speed control.\n*   May include buttons for pre-programmed actions (e.g., 'Wave', 'Bow').\n\n## App Controls - Servo Calibration / Posing\n\n*   A section in the app might allow fine-tuning the default 'center' position of each servo if the robot doesn't stand level.\n*   May allow manual control of individual servo angles to create custom poses.\n\n## App Controls - Block Coding Mode\n\n*   Access the block coding interface to program custom gaits and behaviors.\n\n## Basic Operation\n\n*   Place the robot on a flat, relatively smooth surface.\n*   The robot uses pre-programmed sequences of servo movements (gaits) to walk.\n*   Walking speed and stability depend on the surface and the gait used."}
{"_id": "CB-LEG4-001_BCG_v1.0", "product_id": "CB-LEG4-001", "product_name": "QuadruPed Walker Kit", "doc_type": "Block Coding Guide", "version": "1.0", "title": "QuadruPed Walker Kit Block Coding Guide", "language": "en-US", "format": "Markdown", "text": "# QuadruPed Walker Kit Block Coding Guide (v1.0)\n\nProgram your QuadruPed's movements!\n\n## Accessing the Coding Interface\n\n*   Connect via the Kinetic Constructs app ('Code' section).\n\n## New Servo & Gait Blocks\n\n*   **Servo Control Blocks:**\n    *   `Set Servo [Port Number] Angle to [0-180] degrees`\n    *   `Set Servo [Leg Name/Number] [Joint Name/Number] Angle to [degrees]` (Higher level)\n*   **Gait Blocks (Pre-defined):**\n    *   `Walk Forward for [steps/seconds]`\n    *   `Turn Left [steps/degrees]`\n    *   `Perform Action [Wave/Bow/Dance]`\n*   **Timing Blocks:**\n    *   `Wait [milliseconds/seconds]` (Crucial for timing servo movements)\n\n## Example Project 1: Simple Dance Routine\n\n```markdown\nWhen Start:\n  Perform Action [Bow]\n  Wait [1] second\n  Set Servo [Front Left] [Hip] Angle to [110] degrees\n  Set Servo [Front Left] [Knee] Angle to [70] degrees\n  Wait [0.5] seconds\n  Set Servo [Front Left] [Hip] Angle to [90] degrees // Return to normal\n  Set Servo [Front Left] [Knee] Angle to [90] degrees // Return to normal\n  Wait [0.5] seconds\n  Perform Action [Wave]\n```\n*Description: Makes the robot bow, lift its front-left leg slightly, put it down, then perform a wave action.* \n\n## Example Project 2: Custom Simple Walk Step (One Leg Forward)\n\n*(This is highly simplified - real gaits are complex!)*\n\n```markdown\n// Function to move Front Left leg forward\nDefine Function Move_FL_Forward {\n  // Lift leg\n  Set Servo [FL] [Hip] Angle to [80] // Lift up slightly\n  Wait [100] ms\n  // Move forward\n  Set Servo [FL] [Knee] Angle to [110] // Swing forward\n  Wait [200] ms\n  // Lower leg\n  Set Servo [FL] [Hip] Angle to [90] // Lower down\n  Wait [100] ms\n}\n\n// Function to return Front Left leg\nDefine Function Move_FL_Backward {\n // ... (Similar sequence for backward motion)\n}\n\nWhen Start:\n  // Initial stance\n  Set All Servos to 90 degrees (Example)\n  Wait [1] second\n  \n  // Step forward with FL\n  Move_FL_Forward()\n  Wait [0.5] seconds\n  // Return FL\n  Move_FL_Backward()\n```\n*Description: Attempts to define a function for moving one leg forward. A real walking gait requires coordinating multiple legs simultaneously for balance.* \n\n## Understanding Gaits\n\n*   Walking requires lifting legs, shifting weight, and maintaining balance.\n*   Common gaits involve moving diagonal pairs of legs (trot) or alternating legs in sequence.\n*   Experiment with small angle changes and wait times.\n\n## Running Your Code\n\n*   Build, Run, Stop via the app."}
{"_id": "CB-LEG4-001_TMG_v1.0", "product_id": "CB-LEG4-001", "product_name": "QuadruPed Walker Kit", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.0", "title": "QuadruPed Walker Kit Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# QuadruPed Walker Kit Troubleshooting & Maintenance (v1.0)\n\n## Troubleshooting Common Issues\n\n*   **(General Issues like Power/Bluetooth):** Refer to [All-Terrain Explorer Bot Troubleshooting & Maintenance Guide](/document/CB-WHL-002_TMG).\n*   **Robot Won't Stand / Leans Over:**\n    *   **Servo Centering:** Servos might not have been centered correctly during assembly. Use the app's Calibration feature if available, or carefully readjust servo horns to achieve a level stance when all servos are set to their center position (e.g., 90 degrees).\n    *   **Incorrect Assembly:** Double-check leg assembly against the manual, ensuring left/right legs are correct and servos are oriented properly.\n    *   **Loose Screws:** Ensure all screws, especially those holding servo horns, are tight.\n*   **One Leg Doesn't Move / Moves Incorrectly:**\n    *   **Check Servo Connection:** Ensure the servo's 3-pin connector is fully plugged into the correct port on the control board and with the correct polarity (Signal/V+/GND).\n    *   **Check Servo Horn:** Make sure the servo horn is securely attached to the servo shaft with its screw.\n    *   **Faulty Servo:** The servo itself might be damaged. Try swapping the connection with a known working servo to diagnose.\n    *   **Code Issue:** If programming custom movements, check the servo port number and angle values in your code.\n*   **Robot Walks Poorly / Falls Over Easily:**\n    *   **Surface:** Try on a different flat surface. Very slippery or very high-friction surfaces can be difficult.\n    *   **Gait:** The pre-programmed or custom gait might be unstable. Try slower speeds or different gaits available in the app. Custom gaits require careful tuning for balance.\n    *   **Battery Level:** Low battery can cause servos to perform poorly.\n    *   **Servo Jitter:** See below.\n*   **Servos Buzzing or Jittering Excessively:**\n    *   **Load:** The servo might be under too much strain or obstructed. Check for free movement.\n    *   **Power:** Ensure battery is fully charged. Jitter can increase with low voltage.\n    *   **Servo Quality/Damage:** Some jitter is normal, but excessive noise or erratic movement might indicate a failing servo.\n    *   **Calibration:** Ensure servos are calibrated correctly.\n\n## Maintenance\n\n*   **(General Maintenance like Charging/Cleaning):** Keep robot clean, avoid water.\n*   **Screw Tightness:** Periodically check that screws holding the chassis and servo horns are tight.\n*   **Servo Care:** Avoid forcing the legs manually against the servo gears. Store in a neutral standing position."}
{"_id": "CB-LEG4-001_SCS_v1.0", "product_id": "CB-LEG4-001", "product_name": "QuadruPed Walker Kit", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "QuadruPed Walker Kit Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# QuadruPed Walker Kit Safety & Compliance (v1.0)\n\n**WARNING: CHOKING HAZARD -- Small parts. Not for children under 3 years.**  \n**Recommended Age: 9+** Adult supervision required during assembly and operation.\n\n## Battery Safety Instructions (Rechargeable)\n\n*   Follow guidelines provided for [All-Terrain Explorer Bot](/product/CB-WHL-002) (Rechargeable Battery Pack).\n*   Battery pack often powers multiple servos; monitor for overheating during prolonged use.\n\n## General Safety\n\n*   **Pinch Hazard:** Moving leg segments and servo gears can create pinch points. Keep fingers, hair, and clothing clear during operation.\n*   Operate on a flat, stable surface away from edges, stairs, people, and pets.\n*   Do not lift the robot by its legs while it is powered on and moving.\n*   Do not immerse in water.\n*   Servos can generate heat during use; allow cooling periods if components feel excessively hot.\n\n## Bluetooth & RF Exposure\n\n*   Follow guidelines provided for [All-Terrain Explorer Bot](/product/CB-WHL-002).\n\n## Compliance Information (Example)\n\n*   Follow guidelines and example IDs provided for [All-Terrain Explorer Bot](/product/CB-WHL-002) (FCC, IC, CE, ASTM).\n\nStore this sheet for future reference.  \nKinetic Constructs - Building Tomorrow's Play."}
{"_id": "CB-LEG6-001_AM_v1.2", "product_id": "CB-LEG6-001", "product_name": "HexaBot Explorer", "doc_type": "Assembly Manual", "version": "1.2", "title": "HexaBot Explorer Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# HexaBot Explorer Assembly Manual (v1.2)\n\nAssemble your advanced six-legged walker!\n\n## Parts List (Increased Complexity)\n\n*   1x Main Hexapod Body (HX-A1)\n*   6x Coxa Leg Segments (HX-L1)\n*   6x Femur Leg Segments (HX-L2)\n*   6x Tibia Leg Segments (HX-L3)\n*   18x High-Torque Servo Motors (HX-S1) - 3 per leg (Coxa, Femur, Tibia joints)\n*   1x Advanced Servo Control Board w/ Bluetooth (HX-C1)\n*   1x Rechargeable Battery Pack (High Capacity) (HX-C2)\n*   1x Ultrasonic Sensor Module (HX-C3)\n*   Servo Horns & Screws Pack (HX-H1)\n*   Extensive Screw, Nut & Standoff Pack (HX-M1)\n*   1x USB Charging Cable\n*   Required Tools\n\n*(Detailed illustrations absolutely essential)*\n\n## Assembly Steps (High Level & Complex)\n\n**Important:** Servo Centering is critical. Follow centering procedure before attaching any horns.\n\n1.  **Assemble Legs (x6):**\n    *   Mount Coxa servo to Main Body (HX-A1).\n    *   Attach Coxa Segment (HX-L1) to Coxa servo horn.\n    *   Mount Femur servo to Coxa Segment.\n    *   Attach Femur Segment (HX-L2) to Femur servo horn.\n    *   Mount Tibia servo to Femur Segment.\n    *   Attach Tibia Segment (HX-L3) to Tibia servo horn.\n    *(Diagram: Exploded view of a single 3-DOF leg assembly)*\n2.  **Mount Legs to Body:** Attach each completed leg assembly to the correct position on the Main Hexapod Body (HX-A1). Ensure correct orientation.\n3.  **Mount Control Board & Battery:** Secure the Advanced Control Board (HX-C1) and high-capacity Battery Pack (HX-C2) within the body.\n4.  **Mount Ultrasonic Sensor:** Attach the Sensor (HX-C3) to the front of the body.\n5.  **Connect Servos (18 total):** Carefully plug each servo into the correct, numbered port on the Control Board (HX-C1). Polarity is crucial.\n    *(Diagram: Board layout showing all 18+ servo ports)*\n6.  **Connect Sensor & Battery:** Plug in the sensor and battery cables.\n7.  **Wire Management:** Carefully route and secure the numerous servo wires using provided clips or ties. Avoid pinching wires in joints.\n8.  **Attach Body Covers (if any):** Secure any top/bottom covers.\n\nAssembly is complex and requires patience. Double-check each step. Charge the battery fully."}
{"_id": "CB-LEG6-001_UG_v1.0", "product_id": "CB-LEG6-001", "product_name": "HexaBot Explorer", "doc_type": "User & App Guide", "version": "1.0", "title": "HexaBot Explorer User & App Guide", "language": "en-US", "format": "Markdown", "text": "# HexaBot Explorer User & App Guide (v1.0)\n\n## Charging & Power\n\n*   Charge the high-capacity battery via USB (may take longer, 4-5 hours).\n*   Power ON/OFF via switch/button on the control board.\n\n## Connecting to the App\n\n*   Connect via Bluetooth using the Kinetic Constructs app.\n\n## App Controls - Gait Control\n\n*(Screenshot: App interface with hexapod walking controls)*\n\n*   Use virtual joystick or buttons for various gaits: Tripod Gait (standard), Ripple Gait, Wave Gait (slower, more stable).\n*   Control direction: Forward, Backward, Turn Left/Right (rotation), Strafe Left/Right (sideways movement may be possible).\n*   Speed control for selected gait.\n*   Body height adjustment controls.\n*   Pre-programmed actions (e.g., 'Raise Body', 'Lower Body', 'Wiggle').\n\n## App Controls - Sensor Display\n\n*   Real-time display of Ultrasonic Sensor distance reading.\n\n## App Controls - Calibration & Posing\n\n*   Advanced servo calibration screen to fine-tune standing position and leg angles.\n*   Individual servo control ('Pose Mode') for creating complex static poses.\n\n## App Controls - Block Coding & Python\n\n*   Access block coding interface.\n*   App may provide information/setup for connecting via Python (likely over Bluetooth serial or potentially Wi-Fi if board supports it, though product description only listed BT).\n\n## Basic Operation\n\n*   Hexapods offer superior stability on uneven terrain compared to 4-legged bots.\n*   Different gaits offer trade-offs between speed and stability.\n*   Requires significant power; runtime depends on activity level."}
{"_id": "CB-LEG6-001_BCG_v1.0", "product_id": "CB-LEG6-001", "product_name": "HexaBot Explorer", "doc_type": "Block Coding Guide", "version": "1.0", "title": "HexaBot Explorer Block Coding Guide", "language": "en-US", "format": "Markdown", "text": "# HexaBot Explorer Block Coding Guide (v1.0)\n\nCommand your 18-servo HexaBot!\n\n## Accessing the Coding Interface\n\n*   Connect via the Kinetic Constructs app ('Code' section).\n\n## Hexapod Specific Blocks\n\n*   **High-Level Gait Blocks:**\n    *   `Start Walking [Gait Type] [Direction] at [Speed]%` (e.g., Gait Type: Tripod, Ripple; Direction: Forward, Left)\n    *   `Stop Walking`\n    *   `Adjust Body Height to [Percentage/Height]`\n    *   `Rotate Body [Angle] degrees`\n    *   `Perform Action [Action Name]`\n*   **Mid-Level Leg Control Blocks:**\n    *   `Set Leg [Leg Number/Name] Position to (X, Y, Z)` (Inverse Kinematics - controls foot position)\n*   **Low-Level Servo Control Blocks:**\n    *   `Set Servo [Port Number] Angle to [degrees]` (Direct control of individual joints)\n*   **Sensor Blocks:**\n    *   `Get Distance (cm)` (Ultrasonic)\n\n## Example Project 1: Sensor Reaction\n\n```markdown\nWhen Start:\n  Start Walking [Tripod] [Forward] at [50]% speed\n  Forever {\n    Distance = Get Distance (cm)\n    If Distance < 20 then {\n      Stop Walking\n      Perform Action [Raise Body] // Alert pose\n      Wait [2] seconds\n      Perform Action [Lower Body]\n      Start Walking [Tripod] [Backward] at [40]% speed\n      Wait [1.5] seconds\n      Start Walking [Tripod] [Turn Right] at [50]% speed // Turn away\n      Wait [1] second\n      Start Walking [Tripod] [Forward] at [50]% speed // Continue\n    }\n    Wait [0.1] seconds // Check sensor frequently\n  }\n```\n*Description: Walks forward using tripod gait. If obstacle detected, stops, raises body, waits, lowers, backs up, turns, then continues forward.* \n\n## Example Project 2: Custom Leg Wave (Low Level)\n\n```markdown\nWhen Start:\n  // Assume default standing angles are set\n  Wait [1] second\n  // Lift Front Right Leg (Leg 1)\n  Set Servo [Leg1_Coxa] Angle to [100] // Swing out slightly\n  Set Servo [Leg1_Femur] Angle to [70] // Lift up\n  Set Servo [Leg1_Tibia] Angle to [120] // Extend lower leg\n  Wait [1] second\n  // Wiggle Tibia\n  Set Servo [Leg1_Tibia] Angle to [100]\n  Wait [200] ms\n  Set Servo [Leg1_Tibia] Angle to [140]\n  Wait [200] ms\n  Set Servo [Leg1_Tibia] Angle to [120]\n  Wait [0.5] seconds\n  // Return to standing position (reverse angles)\n  Set Servo [Leg1_Tibia] Angle to [90] // Assuming 90 is default\n  Set Servo [Leg1_Femur] Angle to [90]\n  Set Servo [Leg1_Coxa] Angle to [90]\n```\n*Description: Uses low-level servo control to make the front-right leg perform a wave-like motion. Requires knowing the specific servo ports or names for Leg 1 joints.* \n\n## Inverse Kinematics (IK)\n\n*   If `Set Leg Position (X,Y,Z)` blocks are available, they are much easier for positioning feet.\n*   You specify where you want the foot in 3D space relative to the body, and the firmware calculates the required Coxa, Femur, and Tibia angles automatically.\n\n## Running Your Code\n\n*   Build, Run, Stop via the app."}
{"_id": "CB-LEG6-001_API_v1.0", "product_id": "CB-LEG6-001", "product_name": "HexaBot Explorer", "doc_type": "Python API Reference", "version": "1.0", "title": "HexaBot Explorer Python API Reference", "language": "en-US", "format": "Markdown", "text": "# HexaBot Explorer Python API Reference (v1.0)\n\nControl your HexaBot with Python precision.\n\n## Setup & Connection\n\n*   **Install Library:** `pip install kinetic_constructs_bots`\n*   **Connection:** Typically via Bluetooth Serial Port Profile (SPP) or potentially Wi-Fi if the board supports it (check board specifics). Finding the correct serial port (e.g., COM3 on Windows, /dev/tty.something on Mac/Linux) after pairing via Bluetooth is necessary.\n\n```python\nfrom kinetic_constructs_bots import HexaBotExplorer\nimport time\n\n# Example using Serial Port (replace 'COM3' with your actual port)\nserial_port = \"COM3\" \n\ntry:\n    # May require baudrate specification too\n    bot = HexaBotExplorer(port=serial_port, baudrate=115200)\n    print(\"Connected to HexaBot Explorer!\")\nexcept ConnectionError as e:\n    print(f\"Failed to connect: {e}\")\n    exit()\n\n```\n\n## High-Level Gait Control\n\n```python\n# Start walking (Gait type might be enum or string)\nbot.start_walk(gait_type=\"Tripod\", direction=\"Forward\", speed=50)\ntime.sleep(5)\nbot.stop_walk()\n\nbot.turn_inplace(angle=90, speed=60)\ntime.sleep(3)\n\n# Adjust body height (e.g., 0-100% or mm)\nbot.set_body_height(70)\ntime.sleep(1)\n\n# Pre-defined actions\nbot.perform_action(\"Wave\") \ntime.sleep(2)\n```\n\n## Inverse Kinematics (IK) Control\n\n```python\n# Control individual leg foot position (X, Y, Z relative to body center or leg origin)\n# Leg numbering might be 0-5 or 1-6\nleg_index = 0 # Front Right\nx, y, z = 150, 0, -80 # Example coordinates in mm\n\nbot.set_leg_position(leg_index, x, y, z)\ntime.sleep(1)\n\n# Get current estimated foot position\ncurrent_pos = bot.get_leg_position(leg_index)\nif current_pos:\n    print(f\"Leg {leg_index} position: {current_pos}\")\n```\n\n## Direct Servo Control\n\n```python\n# Control individual servos (Requires knowing port mapping)\n# Servo indices might be 0-17 or structured (leg, joint)\nservo_index = 2 # Example: Front Right Tibia servo\nangle = 120 # Degrees\n\nbot.set_servo_angle(servo_index, angle)\ntime.sleep(0.5)\n\n# Get current servo angle (might be estimated or actual)\ncurrent_angle = bot.get_servo_angle(servo_index)\nif current_angle is not None:\n    print(f\"Servo {servo_index} angle: {current_angle}\")\n```\n\n## Sensor Reading\n\n```python\ndistance_cm = bot.get_distance() # Ultrasonic\nif distance_cm is not None:\n    print(f\"Distance: {distance_cm} cm\")\n```\n\n## API Reference (Summary)\n\n*   `HexaBotExplorer(port, baudrate)` or `HexaBotExplorer(ip_address)`\n*   `start_walk(gait_type, direction, speed)`\n*   `stop_walk()`\n*   `turn_inplace(angle, speed)`\n*   `set_body_height(height)`\n*   `perform_action(action_name)`\n*   `set_leg_position(leg_index, x, y, z)`\n*   `get_leg_position(leg_index)` -> tuple(x, y, z) or None\n*   `set_servo_angle(servo_index, angle)`\n*   `get_servo_angle(servo_index)` -> float or None\n*   `get_distance()` -> float or None\n*   `disconnect()`\n\nRefer to the full library documentation for precise function names, parameters, coordinate systems, and gait options."}
{"_id": "CB-LEG6-001_TMG_v1.1", "product_id": "CB-LEG6-001", "product_name": "HexaBot Explorer", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.1", "title": "HexaBot Explorer Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# HexaBot Explorer Troubleshooting & Maintenance (v1.1)\n\n## Troubleshooting Common Issues\n\n*   **(General Power/Bluetooth Issues):** Refer to [All-Terrain Explorer Bot Troubleshooting & Maintenance Guide](/document/CB-WHL-002_TMG).\n*   **(Servo Centering / Standing Issues):** Refer to [QuadruPed Walker Kit Troubleshooting & Maintenance Guide](/document/CB-LEG4-001_TMG). Calibration is even more critical with 18 servos. Use the app's calibration tool extensively.\n*   **(Individual Leg/Servo Issues):** Refer to [QuadruPed Walker Kit Troubleshooting & Maintenance Guide](/document/CB-LEG4-001_TMG) (Check connections, horns, potential faulty servo).\n*   **Robot Shakes or Moves Erratically During Walking:**\n    *   **Calibration:** Improper calibration is a common cause.\n    *   **Surface:** Very smooth surfaces might cause slipping; very rough surfaces might snag legs.\n    *   **Gait/Speed:** Try a slower, more stable gait (e.g., Wave or Ripple instead of Tripod). Reduce speed.\n    *   **Loose Screws:** Check all leg and servo mounting screws.\n    *   **Low Battery:** Insufficient power can cause servos to behave erratically.\n    *   **Code Issue:** If using custom code (blocks or Python), ensure timings and angle calculations are correct. Small errors multiply quickly.\n*   **Cannot Connect via Python (Serial Port Issues):**\n    *   Ensure correct serial port name is used (differs between Windows/Mac/Linux).\n    *   Verify the correct baud rate is specified (often 9600, 57600, or 115200).\n    *   Make sure no other application (like the mobile app) is actively connected to the robot via Bluetooth at the same time.\n    *   Check drivers for the Bluetooth adapter or USB-Serial converter if used.\n    *   Permissions issue (Linux sometimes requires adding user to 'dialout' group).\n*   **(Ultrasonic Sensor Issues):** Refer to [All-Terrain Explorer Bot Troubleshooting & Maintenance Guide](/document/CB-WHL-002_TMG).\n*   **Overheating:**\n    *   Running complex gaits or custom code with many simultaneous servo movements for extended periods can cause servos or the control board to overheat.\n    *   Allow cooling periods during intense use.\n    *   Ensure wires are not bundled tightly, restricting airflow.\n\n## Maintenance\n\n*   **(General Cleaning):** Keep clean, avoid water.\n*   **Screw Tightness:** Regularly check all ~100+ screws, especially servo horns and leg joints.\n*   **Wire Inspection:** Periodically check servo wires for pinching, chafing, or loose connections at the control board.\n*   **Battery Care:** Maintain charge of the high-capacity battery. Store partially charged if unused for long periods.\n*   **Calibration:** Re-run calibration routine periodically or if walking performance degrades."}
{"_id": "CB-LEG6-001_SCS_v1.0", "product_id": "CB-LEG6-001", "product_name": "HexaBot Explorer", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "HexaBot Explorer Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# HexaBot Explorer Safety & Compliance (v1.0)\n\n**WARNING: CHOKING HAZARD -- Small parts. Not for children under 3 years.**  \n**Recommended Age: 10+** Significant adult supervision required due to complexity and number of moving parts.\n\n## Battery Safety Instructions (Rechargeable High-Capacity)\n\n*   Follow guidelines provided for [All-Terrain Explorer Bot](/product/CB-WHL-002) (Rechargeable Battery Pack).\n*   The high-capacity battery powers 18 servos and control board; monitor for overheating during charging and operation. Use only the specified charger/cable.\n\n## General Safety\n\n*   **Multiple Pinch Hazards:** With 18 servos and complex leg linkages, there are numerous potential pinch points. Keep hands, fingers, hair, and clothing well clear during operation.\n*   Operate on a stable floor area away from edges, stairs, liquids, people, and pets.\n*   Do not lift the robot while it is powered and moving.\n*   The robot can be heavy; handle with care.\n*   Servos and control board can become hot during prolonged use. Handle with caution and allow cooling.\n*   Do not immerse in water.\n\n## Bluetooth & RF Exposure\n\n*   Follow guidelines provided for [All-Terrain Explorer Bot](/product/CB-WHL-002).\n\n## Compliance Information (Example)\n\n*   Follow guidelines and example IDs provided for [All-Terrain Explorer Bot](/product/CB-WHL-002) (FCC, IC, CE, ASTM).\n\nStore this sheet for future reference.  \nKinetic Constructs - Building Tomorrow's Play."}
{"_id": "CB-LEG6-002_AM_v1.0", "product_id": "CB-LEG6-002", "product_name": "HexaBot Sentry", "doc_type": "Assembly Manual", "version": "1.0", "title": "HexaBot Sentry Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# HexaBot Sentry Assembly Manual (v1.0)\n\nBuild the ultimate surveillance and exploration hexapod!\n\n## Parts List (Similar to LEG6-001 + Additions)\n\n*   (Hexapod Body, Legs, 18x Servos - potentially upgraded servos: HXS-S1)\n*   1x Sentry Control Board (Wi-Fi, Bluetooth, Processor) ([HXS-C1](/product/HXS-C1))\n*   1x High-Capacity Battery Pack ([HXS-C2](/product/HXS-C2))\n*   1x Pan-Tilt Camera Turret Assembly ([HXS-CAM1](/product/HXS-CAM1))\n    *   2x Micro Servos for Pan/Tilt\n    *   1x Camera Module (connects to board)\n    *   Turret mounting parts\n*   1x Ultrasonic Sensor Module ([HXS-C3](/product/HXS-C3))\n*   Servo Horns, Screws, Tools, Cables\n\n*(Illustrations essential)*\n\n## Assembly Steps (High Level)\n\n1.  **Assemble Hexapod Base:** Follow steps similar to [QuadruPed Walker Kit](/product/CB-LEG4-001) to build the 6 legs and attach them to the main body.\n2.  **Mount Sentry Control Board & Battery:** Install the advanced Sentry board ([HXS-C1](/product/HXS-C1)) and battery ([HXS-C2](/product/HXS-C2)).\n3.  **Assemble Camera Turret:**\n    *   Mount the Pan servo to the turret base.\n    *   Mount the Tilt servo to the pan bracket.\n    *   Attach the Camera Module holder to the tilt servo.\n    *   Mount the Camera Module in its holder.\n    *(Diagram: Exploded view of camera turret assembly)*\n4.  **Mount Turret to Body:** Attach the completed turret assembly to the designated spot on the HexaBot's body (usually front/top).\n5.  **Mount Ultrasonic Sensor:** Attach sensor ([HXS-C3](/product/HXS-C3)).\n6.  **Connect Servos (18 leg + 2 turret = 20 total):** Plug all leg servos and the two turret servos (Pan, Tilt) into the correct ports on the Sentry Control Board.\n7.  **Connect Camera Module:** Plug the camera ribbon cable or connector into the dedicated camera port on the Sentry board.\n8.  **Connect Sensor & Battery.**\n9.  **Wire Management:** Carefully route and secure all servo and camera wires.\n10. **Attach Body Covers.**\n\nAssembly is very complex. Charge battery."}
{"_id": "CB-LEG6-002_UG_v1.0", "product_id": "CB-LEG6-002", "product_name": "HexaBot Sentry", "doc_type": "User & App Guide", "version": "1.0", "title": "HexaBot Sentry User & App Guide", "language": "en-US", "format": "Markdown", "text": "# HexaBot Sentry User & App Guide (v1.0)\n\n## Charging & Power\n\n*   Charge high-capacity battery via USB.\n*   Power ON/OFF via switch/button.\n\n## Connecting (Wi-Fi Recommended)\n\n*   **Primary Connection: Wi-Fi:** Use the Kinetic Constructs app (initially via Bluetooth for setup) to connect the Sentry bot to your 2.4GHz Wi-Fi network (similar process to [Arctic Explorer TrackBot](/product/CB-TRK-002)). Wi-Fi is needed for video streaming and advanced Python control.\n*   **Bluetooth:** Can be used for initial setup and potentially basic controls if Wi-Fi is unavailable, but functionality (especially video) will be limited.\n\n## App Controls (Connected via Wi-Fi)\n\n*(Screenshot: Sentry App Interface showing video feed and controls)*\n\n*   **Video Feed:** Displays live First-Person View (FPV) from the robot's camera.\n*   **Gait Control:** Joystick/buttons for walking (Tripod, etc.), turning, strafing, height adjust.\n*   **Camera Control:** Separate joystick/buttons to Pan (left/right) and Tilt (up/down) the camera turret.\n*   **Sensor Display:** Shows ultrasonic distance.\n*   **AI Modes (Simple):** Buttons to activate pre-programmed behaviors like:\n    *   `Patrol Mode`: Robot walks along a simple path (if programmed) or wanders, potentially reacting to obstacles.\n    *   `Sentry Mode`: Robot stays still but pans camera, perhaps reacting to motion (basic detection if supported).\n*   **Python Mode:** Interface likely focuses on providing connection info (IP address) and potentially a simple terminal or file transfer for Python scripts.\n\n## Basic Operation\n\n*   Requires a stable Wi-Fi connection for full functionality.\n*   Video streaming quality depends on Wi-Fi signal strength.\n*   AI modes are introductory and rely on pre-set programming or simple sensor triggers."}
{"_id": "CB-LEG6-002_API_v1.1", "product_id": "CB-LEG6-002", "product_name": "HexaBot Sentry", "doc_type": "Python API Reference", "version": "1.1", "title": "HexaBot Sentry Python API Reference", "language": "en-US", "format": "Markdown", "text": "# HexaBot Sentry Python API Reference (v1.1)\n\nUnlock advanced control and vision capabilities with Python.\n\n## Setup & Connection (Wi-Fi)\n\n*   **Install Library:** `pip install kinetic_constructs_bots opencv-python` (OpenCV likely needed for image processing)\n*   **Connect Robot to Wi-Fi:** Use mobile app.\n*   **Find Robot IP:** Use mobile app or network scan.\n\n```python\nfrom kinetic_constructs_bots import HexaBotSentry\nimport cv2\nimport time\n\nrobot_ip = \"192.168.1.155\" # Your robot's IP\n\ntry:\n    bot = HexaBotSentry(ip_address=robot_ip)\n    print(\"Connected to HexaBot Sentry!\")\nexcept ConnectionError as e:\n    print(f\"Failed to connect: {e}\")\n    exit()\n\n```\n\n## Movement Control (Inherited/Similar to HexaBot Explorer)\n\n```python\n# High-level gaits\nbot.start_walk(gait_type=\"Tripod\", direction=\"Forward\", speed=50)\ntime.sleep(3)\nbot.stop_walk()\n\n# IK Leg Control\n# bot.set_leg_position(leg_index, x, y, z)\n\n# Direct Servo Control (Legs 0-17)\n# bot.set_servo_angle(servo_index, angle)\n```\n\n## Camera Turret Control\n\n```python\n# Control Pan/Tilt servos (Angles in degrees)\n# Assumes 0=Left, 180=Right for Pan; 0=Down, 180=Up for Tilt (check docs)\npan_angle = 90 # Center\ntilt_angle = 110 # Slightly up\n\nbot.set_pan_angle(pan_angle)\nbot.set_tilt_angle(tilt_angle)\ntime.sleep(1)\n\n# Or set both simultaneously\n# bot.set_turret_angles(pan=120, tilt=80)\n\n# Get current angles\ncurrent_pan = bot.get_pan_angle()\ncurrent_tilt = bot.get_tilt_angle()\nprint(f\"Turret: Pan={current_pan}, Tilt={current_tilt}\")\n```\n\n## Video Streaming & Image Processing\n\n```python\ntry:\n    # Start video stream (check library specifics - might return a stream object or handle internally)\n    bot.start_video_stream()\n    time.sleep(1) # Allow stream to initialize\n\n    while True:\n        # Get frame from the robot\n        frame = bot.get_video_frame()\n\n        if frame is not None:\n            # frame is likely a NumPy array (BGR format for OpenCV)\n            \n            # --- Simple Example: Show the frame --- \n            cv2.imshow(\"HexaBot Sentry FPV\", frame)\n\n            # --- Example: Basic Motion Detection (Optional) ---\n            # (Requires storing previous frame, converting to grayscale, blurring, diffing, thresholding, finding contours - standard OpenCV techniques)\n\n            # --- Example: Basic Color Detection (Optional) ---\n            # hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\n            # lower_blue = np.array([100, 150, 50])\n            # upper_blue = np.array([140, 255, 255])\n            # mask = cv2.inRange(hsv, lower_blue, upper_blue)\n            # if cv2.countNonZero(mask) > 500: # If enough blue detected\n            #     print(\"Blue object detected!\")\n            # cv2.imshow(\"Blue Mask\", mask)\n\n            # Exit loop if 'q' is pressed\n            if cv2.waitKey(1) & 0xFF == ord('q'):\n                break\n        else:\n            print(\"Failed to get frame\")\n            time.sleep(0.5)\n\nexcept KeyboardInterrupt:\n    print(\"Stopping program.\")\nfinally:\n    print(\"Cleaning up...\")\n    bot.stop_video_stream()\n    bot.stop_walk()\n    # Reset turret position?\n    # bot.set_turret_angles(pan=90, tilt=90)\n    cv2.destroyAllWindows()\n    # bot.disconnect()\n\n```\n\n## Sensor Reading\n\n```python\ndistance_cm = bot.get_distance() # Ultrasonic\n```\n\n## API Reference (Additions/Changes from HexaBot Explorer)\n\n*   `HexaBotSentry(ip_address)`\n*   `set_pan_angle(angle)`\n*   `set_tilt_angle(angle)`\n*   `set_turret_angles(pan, tilt)`\n*   `get_pan_angle()` -> float or None\n*   `get_tilt_angle()` -> float or None\n*   `start_video_stream()`\n*   `stop_video_stream()`\n*   `get_video_frame()` -> NumPy array (image) or None\n*   *(AI/Patrol functions might have API counterparts: `start_patrol()`, `set_patrol_path([...])`)*\n\nConsult full library documentation for image formats, error handling, and advanced features."}
{"_id": "CB-LEG6-002_TMG_v1.0", "product_id": "CB-LEG6-002", "product_name": "HexaBot Sentry", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.0", "title": "HexaBot Sentry Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# HexaBot Sentry Troubleshooting & Maintenance (v1.0)\n\n## Troubleshooting Common Issues\n\n*   **(General, Track, Servo, Calibration, Wi-Fi Issues):** Refer to TMGs for [Arctic Explorer TrackBot](/product/CB-TRK-002) and [HexaBot Sentry](/product/CB-LEG6-002).\n*   **Camera Turret Not Moving / Incorrect Movement:**\n    *   Check Pan/Tilt servo connections to the control board (correct ports, polarity).\n    *   Ensure turret is assembled correctly and servos can move freely without obstruction.\n    *   Check servo horns are securely attached.\n    *   Verify control commands (app or code) are sending correct angle targets.\n    *   Possible faulty micro servo.\n*   **No Video Feed in App / Python:**\n    *   Ensure robot is connected via Wi-Fi (video usually requires Wi-Fi).\n    *   Check camera module connection to the Sentry control board (is the ribbon cable fully seated?).\n    *   Restart the robot and the app/Python script.\n    *   Check Wi-Fi signal strength; weak signal causes dropouts or failure to stream.\n    *   Ensure `start_video_stream()` is called in Python before `get_video_frame()`.\n    *   Possible faulty camera module or control board issue.\n*   **Video Feed Laggy or Low Quality:**\n    *   Poor Wi-Fi signal is the most common cause. Move closer to the router or reduce network congestion.\n    *   Robot's processor might be overloaded if running complex code simultaneously.\n    *   App/Python script might not be processing frames fast enough.\n*   **AI Modes Not Working:**\n    *   These often depend on sensor input or pre-programmed paths. Ensure sensors are working and paths are defined (if applicable).\n    *   Check app/firmware is up to date.\n\n## Maintenance\n\n*   **(General, Leg, Servo, Screw Maintenance):** Refer to [HexaBot Sentry](/product/CB-LEG6-002) TMG.\n*   **Camera Lens:** Keep the camera lens clean using a soft microfiber cloth.\n*   **Turret Mechanism:** Ensure the pan/tilt mechanism remains free of dust and debris."}
{"_id": "CB-LEG6-002_SCS_v1.0", "product_id": "CB-LEG6-002", "product_name": "HexaBot Sentry", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "HexaBot Sentry Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# HexaBot Sentry Safety & Compliance (v1.0)\n\n**WARNING: CHOKING HAZARD -- Small parts. Not for children under 3 years.**  \n**Recommended Age: 14+** High complexity. Adult supervision strongly recommended.\n\n## Battery Safety Instructions (Rechargeable High-Capacity)\n\n*   Follow guidelines provided for [All-Terrain Explorer Bot](/product/CB-WHL-002). Monitor for overheating.\n\n## General Safety\n\n*   **Multiple Pinch Hazards:** Leg joints (18 servos) and camera turret (2 servos) present pinch risks. Keep clear during operation.\n*   Operate on stable floor away from edges, liquids, people, pets.\n*   Do not lift while powered/moving.\n*   Can be heavy; handle carefully.\n*   Components (servos, board, processor) can get hot.\n*   Do not immerse in water.\n*   **Privacy Considerations:** The camera records video. Be mindful of privacy when operating. Do not record individuals without their consent. Comply with all local laws regarding video recording.\n\n## Wi-Fi / Bluetooth & RF Exposure\n\n*   Contains Wi-Fi and Bluetooth transmitters.\n*   Follow RF exposure distance guidelines (>20cm).\n*   Secure your Wi-Fi network.\n\n## Compliance Information (Example)\n\n*   Follow guidelines for [Arctic Explorer TrackBot](/product/CB-TRK-002) / [All-Terrain Explorer Bot](/product/CB-WHL-002) (FCC, IC, CE, ASTM). Includes specific IDs for Wi-Fi/BT module and potentially camera module if it has separate certifications.\n*   Contains FCC ID: [Example Sentry Board FCC ID]\n*   Contains IC: [Example Sentry Board IC ID]\n\nStore this sheet for future reference.\nKinetic Constructs - Building Tomorrow's Play."}
{"_id": "CB-SPDR-009_AM_v1.2", "product_id": "CB-SPDR-009", "product_name": "ArachnoBot Builder", "doc_type": "Assembly Manual", "version": "1.2", "title": "ArachnoBot Builder Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# ArachnoBot Builder Assembly Manual (v1.2)\n\nConstruct your intricate 8-legged walking robot!\n\n## Parts List (Very Complex)\n\n*   1x Main Spider Body Chassis (Top & Bottom Plates) (SPDR-A1, SPDR-A2)\n*   8x Coxa Mounting Brackets (SPDR-B1)\n*   8x Coxa Leg Segments (SPDR-L1)\n*   8x Femur Leg Segments (SPDR-L2)\n*   8x Tibia Leg Segments (SPDR-L3)\n*   24x Standard or High-Torque Servos (SPDR-S1) - 3 per leg\n*   1x ArachnoBot Control Board w/ Bluetooth (SPDR-C1)\n*   1x Rechargeable Battery Pack (High Capacity) (SPDR-C2)\n*   1x Ultrasonic Sensor Module (SPDR-C3)\n*   Servo Horns & Screws Pack (SPDR-H1)\n*   Very Large Assorted Screw, Nut, Standoff Pack (SPDR-M1)\n*   1x USB Charging Cable\n*   Required Tools\n\n*(Detailed illustrations absolutely essential)*\n\n## Assembly Steps (High Level & Very Complex)\n\n**Important:** Servo Centering is critical. Follow centering procedure before attaching any horns.\n\n1.  **Assemble Legs (x8):** Similar to HexaBot, but 8 times. Each leg has 3 servos (Coxa, Femur, Tibia) and 3 segments (L1, L2, L3).\n    *   Mount Coxa servo bracket (SPDR-B1) to Body Plate.\n    *   Mount Coxa servo to bracket.\n    *   Attach Coxa Segment (SPDR-L1) to Coxa servo horn.\n    *   Mount Femur servo to Coxa Segment.\n    *   Attach Femur Segment (SPDR-L2) to Femur servo horn.\n    *   Mount Tibia servo to Femur Segment.\n    *   Attach Tibia Segment (SPDR-L3) to Tibia servo horn.\n    *(Diagram: Exploded view of a single 3-DOF spider leg assembly)*\n2.  **Mount Legs to Body:** Attach each completed leg assembly to the correct position on the Main Body Plates (SPDR-A1/A2). Ensure correct orientation (4 per side).\n3.  **Mount Control Board & Battery:** Secure the ArachnoBot Control Board (SPDR-C1) and Battery Pack (SPDR-C2) within the body chassis.\n4.  **Mount Ultrasonic Sensor:** Attach the Sensor (SPDR-C3) to the front of the body.\n5.  **Connect Servos (24 total):** Carefully plug each servo into the correct, numbered port on the Control Board. Polarity is crucial. This requires extreme care.\n    *(Diagram: Board layout showing all 24+ servo ports)*\n6.  **Connect Sensor & Battery:** Plug in the sensor and battery cables.\n7.  **Wire Management:** Meticulously route and secure the numerous servo wires. Avoid pinching wires in joints or obstructing movement.\n8.  **Assemble Body Plates:** Secure the top and bottom body plates together.\n\nAssembly is extremely complex and time-consuming. Double-check orientation and connections at each stage. Charge the battery fully."}
{"_id": "CB-SPDR-009_UG_v1.1", "product_id": "CB-SPDR-009", "product_name": "ArachnoBot Builder", "doc_type": "User & App Guide", "version": "1.1", "title": "ArachnoBot Builder User & App Guide", "language": "en-US", "format": "Markdown", "text": "# ArachnoBot Builder User & App Guide (v1.1)\n\n## Charging & Power\n\n*   Charge the high-capacity battery via USB (may take 4-6 hours).\n*   Power ON/OFF via switch/button on the control board.\n\n## Connecting to the App\n\n*   Connect via Bluetooth using the Kinetic Constructs app.\n\n## App Controls - Gait Control\n\n*(Screenshot: App interface with spider walking controls)*\n\n*   Use virtual joystick or buttons for various gaits: Tripod (using 6 legs), Tetrapod, Ripple, Wave gaits adapted for 8 legs.\n*   Control direction: Forward, Backward, Turn Left/Right (rotation).\n*   Speed control for selected gait.\n*   Body height and stance width adjustments.\n*   Pre-programmed actions (e.g., 'Threat Pose', 'Scuttle').\n\n## App Controls - Sensor Display\n\n*   Real-time display of Ultrasonic Sensor distance reading.\n\n## App Controls - Calibration & Posing\n\n*   Advanced servo calibration screen (essential for 24 servos).\n*   Individual servo control ('Pose Mode') for complex static poses.\n\n## App Controls - Block Coding & Python\n\n*   Access block coding interface.\n*   App may provide info for connecting via Python (likely Bluetooth Serial Port Profile).\n\n## Basic Operation\n\n*   8 legs provide excellent stability and redundancy.\n*   Complex gaits required for smooth movement.\n*   Significant power consumption due to 24 servos."}
{"_id": "CB-SPDR-009_BCG_v1.0", "product_id": "CB-SPDR-009", "product_name": "ArachnoBot Builder", "doc_type": "Block Coding Guide", "version": "1.0", "title": "ArachnoBot Builder Block Coding Guide", "language": "en-US", "format": "Markdown", "text": "# ArachnoBot Builder Block Coding Guide (v1.0)\n\nProgram the complex movements of your 24-servo ArachnoBot!\n\n## Accessing the Coding Interface\n\n*   Connect via the Kinetic Constructs app ('Code' section).\n\n## ArachnoBot Specific Blocks\n\n*   **High-Level Gait Blocks:**\n    *   `Start Walking [Gait Type] [Direction] at [Speed]%` (Gait Types: Tripod8, Tetrapod, Ripple8, etc.)\n    *   `Stop Walking`\n    *   `Adjust Body [Height/Stance] to [Value]`\n    *   `Perform Action [Action Name]`\n*   **Mid-Level Leg Control Blocks:**\n    *   `Set Leg [Leg Number 1-8] Position to (X, Y, Z)` (Inverse Kinematics)\n*   **Low-Level Servo Control Blocks:**\n    *   `Set Servo [Port Number 0-23] Angle to [degrees]`\n*   **Sensor Blocks:**\n    *   `Get Distance (cm)` (Ultrasonic)\n\n## Example Project 1: Peek-a-Boo\n\n```markdown\nWhen Start:\n  Start Walking [Tripod8] [Forward] at [40]% speed\n  Forever {\n    Distance = Get Distance (cm)\n    If Distance < 30 then {\n      Stop Walking\n      Adjust Body [Height] to [30] // Lower body\n      Wait [3] seconds // Hide\n      Adjust Body [Height] to [80] // Peek up quickly\n      Wait [1] second\n      Start Walking [Tripod8] [Turn Left] at [50]% speed // Turn away\n      Wait [1.5] seconds\n      Start Walking [Tripod8] [Forward] at [40]% speed // Continue\n    }\n    Wait [0.1] seconds\n  }\n```\n*Description: Walks forward. If obstacle detected, lowers body ('hides'), waits, peeks up, then turns and continues.* \n\n## Example Project 2: Leg Ripple (Low Level)\n\n```markdown\n// Function to lift and lower one leg slightly\nDefine Function WiggleLeg(LegNum) {\n  // Get servo ports for this leg (Complex mapping needed!)\n  CoxaPort = GetCoxaPort(LegNum)\n  FemurPort = GetFemurPort(LegNum)\n  TibiaPort = GetTibiaPort(LegNum)\n  \n  // Lift slightly\n  Set Servo [FemurPort] Angle to [80] \n  Wait [100] ms\n  // Lower back\n  Set Servo [FemurPort] Angle to [90] // Assume 90 is default\n  Wait [100] ms\n}\n\nWhen Start:\n  // Initial Stance\n  Wait [1] second\n  Forever {\n    // Ripple from front-right (Leg 1) to back-right (Leg 4)\n    WiggleLeg(1)\n    WiggleLeg(2)\n    WiggleLeg(3)\n    WiggleLeg(4)\n    // Could add left side ripple here too\n  }\n```\n*Description: Attempts a simple ripple effect by slightly lifting/lowering each leg on the right side in sequence. Requires helper functions or direct knowledge of servo port mapping.* \n\n## Challenges\n\n*   Coordinating 24 servos for smooth, stable gaits is complex.\n*   Inverse Kinematics blocks (`Set Leg Position`) are highly recommended over low-level servo control for movement.\n*   Power management can be a factor in complex routines.\n\n## Running Your Code\n\n*   Build, Run, Stop via the app."}
{"_id": "CB-SPDR-009_API_v1.0", "product_id": "CB-SPDR-009", "product_name": "ArachnoBot Builder", "doc_type": "Python API Reference", "version": "1.0", "title": "ArachnoBot Builder Python API Reference", "language": "en-US", "format": "Markdown", "text": "# ArachnoBot Builder Python API Reference (v1.0)\n\nMaster the ArachnoBot with Python.\n\n## Setup & Connection (Bluetooth Serial)\n\n*   **Install Library:** `pip install kinetic_constructs_bots`\n*   **Connection:** Via Bluetooth Serial Port Profile (SPP). Pair the device and identify the correct serial port.\n\n```python\nfrom kinetic_constructs_bots import ArachnoBot\nimport time\n\nserial_port = \"COM4\" # Your robot's serial port\n\ntry:\n    bot = ArachnoBot(port=serial_port, baudrate=115200)\n    print(\"Connected to ArachnoBot!\")\nexcept ConnectionError as e:\n    print(f\"Failed to connect: {e}\")\n    exit()\n\n```\n\n## High-Level Gait Control\n\n```python\n# Start walking (Gait type for 8 legs)\nbot.start_walk(gait_type=\"Tetrapod\", direction=\"Forward\", speed=40)\ntime.sleep(6)\nbot.stop_walk()\n\n# Adjust body height/stance\nbot.set_body_pose(height=60, stance_width=120) # Example values\ntime.sleep(1)\n\n# Pre-defined actions\nbot.perform_action(\"ThreatPose\")\ntime.sleep(2)\n```\n\n## Inverse Kinematics (IK) Control\n\n```python\n# Control individual leg foot position (X, Y, Z)\nleg_index = 7 # Example: Back Left\nx, y, z = -120, -100, -90 # Example coordinates in mm\n\nbot.set_leg_position(leg_index, x, y, z)\ntime.sleep(1)\n\ncurrent_pos = bot.get_leg_position(leg_index)\n```\n\n## Direct Servo Control\n\n```python\n# Control individual servos (0-23)\nservo_index = 20 # Example: Leg 7 Tibia servo\nangle = 75 # Degrees\n\nbot.set_servo_angle(servo_index, angle)\ntime.sleep(0.5)\n\ncurrent_angle = bot.get_servo_angle(servo_index)\n```\n\n## Sensor Reading\n\n```python\ndistance_cm = bot.get_distance() # Ultrasonic\n```\n\n## API Reference (Summary - similar to HexaBot + 8 legs)\n\n*   `ArachnoBot(port, baudrate)`\n*   `start_walk(gait_type, direction, speed)` (8-leg gaits)\n*   `stop_walk()`\n*   `set_body_pose(height, stance_width, ...)`\n*   `perform_action(action_name)`\n*   `set_leg_position(leg_index [0-7], x, y, z)`\n*   `get_leg_position(leg_index [0-7])` -> tuple(x, y, z) or None\n*   `set_servo_angle(servo_index [0-23], angle)`\n*   `get_servo_angle(servo_index [0-23])` -> float or None\n*   `get_distance()` -> float or None\n*   `disconnect()`\n\nConsult library documentation for full details."}
{"_id": "CB-SPDR-009_TMG_v1.3", "product_id": "CB-SPDR-009", "product_name": "ArachnoBot Builder", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.3", "title": "ArachnoBot Builder Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# ArachnoBot Builder Troubleshooting & Maintenance (v1.3)\n\n## Troubleshooting Common Issues\n\n*   **(General, Servo, Calibration, Bluetooth Serial Issues):** Refer to TMGs for [HexaBot Sentry](/product/CB-LEG6-002) and [QuadruPed Walker Kit](/product/CB-LEG4-001). Problems are amplified with 24 servos.\n*   **Extreme Instability / Incorrect Gait Execution:**\n    *   **Calibration is Paramount:** Meticulously calibrate all 24 servos using the app. Even small errors on multiple legs cause major problems.\n    *   **Servo Wiring:** Triple-check that *every* servo is plugged into the *exact* correct port on the control board. A single swapped servo will wreck gait calculations.\n    *   **Assembly Errors:** Verify leg segment orientations and servo horn positions against the manual for all 8 legs.\n    *   **Low Battery:** 24 servos draw significant power. Ensure battery is fully charged.\n    *   **Code Errors:** Complex custom code (Blocks/Python) is prone to errors in logic, timing, or IK calculations.\n*   **Specific Leg Malfunctioning:** Treat as per [QuadruPed Walker Kit](/product/CB-LEG4-001) TMG (check connection, horn, servo).\n*   **Control Board Overheating / Resetting:**\n    *   Sustained, complex movement of 24 servos generates significant load and heat.\n    *   Ensure adequate ventilation around the control board.\n    *   Allow cooling periods during intense operation.\n    *   Possible faulty board or undersized power regulation (if issue persists).\n*   **(Ultrasonic Sensor Issues):** Refer to [All-Terrain Explorer Bot](/product/CB-WHL-002) TMG.\n\n## Maintenance\n\n*   **(General Cleaning):** Keep clean, avoid water.\n*   **Screw Tightness:** Critically important. Regularly check tightness of all screws, especially the large number associated with servo horns and leg joints.\n*   **Wire Inspection:** Carefully inspect the complex wiring harness for any signs of damage, pinching, or loose connections. Secure loose wires.\n*   **Battery Care:** Maintain the high-capacity battery.\n*   **Calibration:** Frequent re-calibration may be necessary to maintain optimal performance."}
{"_id": "CB-SPDR-009_SCS_v1.0", "product_id": "CB-SPDR-009", "product_name": "ArachnoBot Builder", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "ArachnoBot Builder Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# ArachnoBot Builder Safety & Compliance (v1.0)\n\n**WARNING: CHOKING HAZARD -- Small parts. Not for children under 3 years.**  \n**Recommended Age: 12+** Extreme complexity. Significant adult supervision required.\n\n## Battery Safety Instructions (Rechargeable High-Capacity)\n\n*   Follow guidelines for [All-Terrain Explorer Bot](/product/CB-WHL-002). Battery powers 24 servos; monitor for overheating.\n\n## General Safety\n\n*   **Numerous Pinch Hazards:** 24 servos and complex multi-jointed legs create many pinch points. Keep hands, fingers, hair, clothing well clear.\n*   Operate on stable floor away from edges, liquids, people, pets.\n*   Do not lift while powered/moving.\n*   Robot is heavy and complex; handle with care.\n*   Components can get very hot during use.\n*   Do not immerse in water.\n\n## Bluetooth & RF Exposure\n\n*   Follow guidelines for [All-Terrain Explorer Bot](/product/CB-WHL-002).\n\n## Compliance Information (Example)\n\n*   Follow guidelines for [All-Terrain Explorer Bot](/product/CB-WHL-002) (FCC, IC, CE, ASTM).\n\nStore this sheet for future reference.  \nKinetic Constructs - Building Tomorrow's Play."}
{"_id": "CB-SPDR-010_AM_v1.0", "product_id": "CB-SPDR-010", "product_name": "Mini ArachnoBot", "doc_type": "Assembly Manual", "version": "1.0", "title": "Mini ArachnoBot Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# Mini ArachnoBot Assembly Manual (v1.0)\n\nBuild your smaller, simpler spider bot!\n\n## Parts List (Simpler than SPDR-009)\n\n*   1x Mini Spider Body (Integrated Chassis) (MSPDR-A1)\n*   8x Leg Servo Mounting Plates (MSPDR-B1)\n*   8x Upper Leg Segments (MSPDR-L1)\n*   8x Lower Leg Segments (MSPDR-L2)\n*   16x Micro Servos (MSPDR-S1) - 2 per leg (Coxa, Femur/Tibia combined joint)\n*   1x Mini Arachno Control Board w/ Bluetooth (MSPDR-C1)\n*   1x Small Rechargeable Battery (MSPDR-C2)\n*   Servo Horns & Screws Pack (MSPDR-H1)\n*   Assorted Screws & Nuts Pack (MSPDR-M1)\n*   1x USB Charging Cable\n*   Tools\n\n*(Illustrations needed)*\n\n## Assembly Steps (Simplified 2-DOF Legs)\n\n**Important:** Center servos before attaching horns.\n\n1.  **Assemble Legs (x8):**\n    *   Mount Coxa servo plate (MSPDR-B1) to Body (MSPDR-A1).\n    *   Mount Coxa servo to plate.\n    *   Attach Upper Leg Segment (MSPDR-L1) to Coxa servo horn.\n    *   Mount second servo (Femur/Tibia joint) to end of Upper Leg Segment.\n    *   Attach Lower Leg Segment (MSPDR-L2) to second servo horn.\n    *(Diagram: Shows simpler 2-servo leg assembly)*\n2.  **Mount Legs:** Attach all 8 legs to the body.\n3.  **Mount Board & Battery:** Install Mini Control Board (MSPDR-C1) and Battery (MSPDR-C2).\n4.  **Connect Servos (16 total):** Plug each micro servo into the correct port (0-15) on the board.\n5.  **Connect Battery.**\n6.  **Wire Management:** Tuck wires neatly.\n7.  **Attach Cover (if any).**\n\nAssembly is moderately complex. Charge battery."}
{"_id": "CB-SPDR-010_UG_v1.0", "product_id": "CB-SPDR-010", "product_name": "Mini ArachnoBot", "doc_type": "User & App Guide", "version": "1.0", "title": "Mini ArachnoBot User & App Guide", "language": "en-US", "format": "Markdown", "text": "# Mini ArachnoBot User & App Guide (v1.0)\n\n## Charging & Power\n\n*   Charge small battery via USB (approx 1-2 hours).\n*   Power ON/OFF via switch.\n\n## Connecting to the App\n\n*   Connect via Bluetooth using the Kinetic Constructs app.\n\n## App Controls - Walk Mode\n\n*(Screenshot: App with simple spider controls)*\n\n*   Joystick/buttons for basic gaits (likely simpler tripod/tetrapod adapted for 2-DOF legs).\n*   Forward, Backward, Turn Left/Right.\n*   Maybe simple actions like 'Wiggle'.\n\n## App Controls - Calibration\n\n*   Servo calibration screen for the 16 servos.\n\n## App Controls - Block Coding\n\n*   Access block coding interface.\n\n## Basic Operation\n\n*   Simpler movement than 3-DOF version due to fewer joints per leg.\n*   Relies on pre-programmed gaits for walking."}
{"_id": "CB-SPDR-010_BCG_v1.0", "product_id": "CB-SPDR-010", "product_name": "Mini ArachnoBot", "doc_type": "Block Coding Guide", "version": "1.0", "title": "Mini ArachnoBot Block Coding Guide", "language": "en-US", "format": "Markdown", "text": "# Mini ArachnoBot Block Coding Guide (v1.0)\n\nProgram your 16-servo Mini ArachnoBot!\n\n## Accessing the Coding Interface\n\n*   Connect via the Kinetic Constructs app ('Code' section).\n\n## Mini ArachnoBot Blocks\n\n*   **High-Level Gait Blocks:**\n    *   `Start Walking [Direction] at [Speed]%` (Uses default gait)\n    *   `Stop Walking`\n    *   `Perform Action [Wiggle/Dance]`\n*   **Low-Level Servo Control Blocks:**\n    *   `Set Servo [Port Number 0-15] Angle to [degrees]`\n*   **(No complex IK or sensor blocks expected for this model)**\n\n## Example Project 1: Stand Up, Sit Down\n\n```markdown\n// Assumes 90 degrees is normal standing for Femur/Tibia joint\nDefine Function StandUp() {\n  // Set all Femur/Tibia servos (Ports 1, 3, 5, ... 15) to 70 degrees (Example)\n  For i from 1 to 15 step 2 {\n     Set Servo [i] Angle to [70]\n  }\n}\n\nDefine Function SitDown() {\n  // Set all Femur/Tibia servos to 110 degrees (Example)\n  For i from 1 to 15 step 2 {\n     Set Servo [i] Angle to [110]\n  }\n}\n\nWhen Start:\n  Wait [1] second\n  StandUp()\n  Wait [2] seconds\n  SitDown()\n  Wait [2] seconds\n  // Return to normal (set servos back to 90)\n  For i from 1 to 15 step 2 {\n     Set Servo [i] Angle to [90]\n  }\n```\n*Description: Makes the bot raise and lower its body by adjusting all the second servos in each leg simultaneously. Requires knowing which ports map to which joints.* \n\n## Example Project 2: Alternating Leg Lifts\n\n```markdown\nWhen Start:\n  Wait [1] second\n  Forever {\n    // Lift Right Legs (Ports 1, 5, 9, 13 - Femur/Tibia joint)\n    Set Servo [1] Angle to [70]\n    Set Servo [5] Angle to [70]\n    Set Servo [9] Angle to [70]\n    Set Servo [13] Angle to [70]\n    // Lower Left Legs (Ports 3, 7, 11, 15)\n    Set Servo [3] Angle to [90]\n    Set Servo [7] Angle to [90]\n    Set Servo [11] Angle to [90]\n    Set Servo [15] Angle to [90]\n    Wait [0.5] seconds\n\n    // Lift Left Legs\n    Set Servo [3] Angle to [70]\n    Set Servo [7] Angle to [70]\n    Set Servo [11] Angle to [70]\n    Set Servo [15] Angle to [70]\n    // Lower Right Legs\n    Set Servo [1] Angle to [90]\n    Set Servo [5] Angle to [90]\n    Set Servo [9] Angle to [90]\n    Set Servo [13] Angle to [90]\n    Wait [0.5] seconds\n  }\n```\n*Description: Creates a basic alternating lift/lower motion between right and left legs.* \n\n## Running Your Code\n\n*   Build, Run, Stop via the app."}
{"_id": "CB-SPDR-010_TMG_v1.0", "product_id": "CB-SPDR-010", "product_name": "Mini ArachnoBot", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.0", "title": "Mini ArachnoBot Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# Mini ArachnoBot Troubleshooting & Maintenance (v1.0)\n\n## Troubleshooting Common Issues\n\n*   **(General Power/Bluetooth Issues):** Refer to [All-Terrain Explorer Bot Troubleshooting & Maintenance Guide](/document/CB-WHL-002_TMG).\n*   **(Servo Centering / Standing Issues):** Refer to [QuadruPed Walker Kit Troubleshooting & Maintenance Guide](/document/CB-LEG4-001_TMG). Calibration needed for 16 servos.\n*   **(Individual Leg/Servo Issues):** Refer to [QuadruPed Walker Kit Troubleshooting & Maintenance Guide](/document/CB-LEG4-001_TMG) (Check connections, horns, potential faulty micro servo).\n*   **Walking Performance Poor:**\n    *   Ensure calibration is accurate.\n    *   Check battery level (16 servos draw power).\n    *   Ensure surface is suitable (not too slippery or snaggy).\n    *   Check for binding in leg joints or loose screws.\n\n## Maintenance\n\n*   **(General Cleaning):** Keep clean.\n*   **Screw Tightness:** Regularly check servo horn and chassis screws.\n*   **Servo Care:** Avoid forcing legs. Store in neutral position."}
{"_id": "CB-SPDR-010_SCS_v1.0", "product_id": "CB-SPDR-010", "product_name": "Mini ArachnoBot", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "Mini ArachnoBot Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# Mini ArachnoBot Safety & Compliance (v1.0)\n\n**WARNING: CHOKING HAZARD -- Small parts. Not for children under 3 years.**  \n**Recommended Age: 10+** Adult supervision recommended.\n\n## Battery Safety Instructions (Rechargeable)\n\n*   Follow guidelines for [All-Terrain Explorer Bot](/product/CB-WHL-002).\n\n## General Safety\n\n*   **Pinch Hazards:** 16 moving servos and leg joints. Keep clear.\n*   Operate on stable floor away from edges, liquids, people, pets.\n*   Do not lift while powered/moving.\n*   Components can get warm.\n*   Do not immerse in water.\n\n## Bluetooth & RF Exposure\n\n*   Follow guidelines for [All-Terrain Explorer Bot](/product/CB-WHL-002).\n\n## Compliance Information (Example)\n\n*   Follow guidelines for [All-Terrain Explorer Bot](/product/CB-WHL-002) (FCC, IC, CE, ASTM).\n\nStore this sheet for future reference.  \nKinetic Constructs - Building Tomorrow's Play."}
{"_id": "CB-ARM-001_AM_v1.0", "product_id": "CB-ARM-001", "product_name": "Grabber Arm Kit", "doc_type": "Assembly Manual", "version": "1.0", "title": "Grabber Arm Kit Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# Grabber Arm Kit Assembly Manual (v1.0)\n\nBuild your programmable robotic arm!\n\n## Parts List\n\n*   1x Base Plate (ARM-A1)\n*   1x Rotating Base Servo Mount (ARM-A2)\n*   1x Shoulder Joint Bracket (ARM-B1)\n*   1x Upper Arm Segment (ARM-B2)\n*   1x Elbow Joint Bracket (ARM-C1)\n*   1x Forearm Segment (ARM-C2)\n*   1x Gripper Assembly (ARM-D1) - May be pre-assembled or require assembly\n*   3x Standard Servos (ARM-S1) - Base Rotation, Shoulder, Elbow\n*   1x Micro Servo (ARM-S2) - Gripper\n*   1x Arm Control Board w/ Bluetooth (ARM-C1)\n*   1x Power Supply (Wall Adapter or Battery Pack - check product specifics) (ARM-P1)\n*   Servo Horns & Screws Pack\n*   Assorted Screws & Nuts Pack\n*   Tools\n\n*(Illustrations essential)*\n\n## Assembly Steps (High Level)\n\n**Important:** Center servos before attaching horns/brackets.\n\n1.  **Mount Base Servo:** Attach Base Rotation servo to Base Plate (ARM-A1) using mount (ARM-A2).\n2.  **Attach Shoulder Bracket:** Attach Shoulder Joint Bracket (ARM-B1) to the Base Rotation servo horn.\n3.  **Mount Shoulder Servo:** Attach Shoulder servo to the Shoulder Joint Bracket.\n4.  **Attach Upper Arm:** Attach Upper Arm Segment (ARM-B2) to the Shoulder servo horn.\n5.  **Mount Elbow Servo:** Attach Elbow servo to the end of the Upper Arm Segment using Elbow Bracket (ARM-C1).\n6.  **Attach Forearm:** Attach Forearm Segment (ARM-C2) to the Elbow servo horn.\n7.  **Assemble/Mount Gripper:** Assemble the Gripper (ARM-D1) if needed. Mount the Gripper servo (ARM-S2) to the Forearm. Attach the Gripper assembly to the Forearm and connect linkage to the Gripper servo horn.\n    *(Diagram: Close-up of gripper assembly and servo linkage)*\n8.  **Mount Control Board:** Secure the Arm Control Board (ARM-C1) to the Base Plate.\n9.  **Connect Servos (4 total):** Plug Base, Shoulder, Elbow, and Gripper servos into designated ports on the Control Board.\n10. **Connect Power:** Connect the Power Supply (ARM-P1) to the board.\n11. **Wire Management:** Tidy servo wires.\n\nAssembly Complete."}
{"_id": "CB-ARM-001_UG_v1.0", "product_id": "CB-ARM-001", "product_name": "Grabber Arm Kit", "doc_type": "User & App Guide", "version": "1.0", "title": "Grabber Arm Kit User & App Guide", "language": "en-US", "format": "Markdown", "text": "# Grabber Arm Kit User & App Guide (v1.0)\n\n## Powering the Arm\n\n*   Connect the specified Power Supply (ARM-P1) to the control board and a wall outlet (if adapter) or ensure battery pack is charged/installed.\n*   Power ON via switch on the control board.\n\n## Connecting to the App\n\n*   Connect via Bluetooth using the Kinetic Constructs app.\n\n## App Controls - Manual Control\n\n*(Screenshot: App interface with sliders/buttons for each joint)*\n\n*   Sliders or buttons to control the angle of each servo individually: Base Rotation, Shoulder, Elbow, Gripper (Open/Close).\n*   May include speed control for movements.\n\n## App Controls - Teach Pendant / Record Mode\n\n*   Some apps may allow you to manually move the arm to a series of positions ('waypoints') and record them.\n*   'Play' button executes the recorded sequence of movements.\n\n## App Controls - Block Coding\n\n*   Access the block coding interface to program custom sequences and logic.\n\n## Basic Operation\n\n*   The arm is designed for picking up small, lightweight objects.\n*   Avoid overloading the arm or forcing the gripper.\n*   Ensure the base is stable during operation."}
{"_id": "CB-ARM-001_BCG_v1.0", "product_id": "CB-ARM-001", "product_name": "Grabber Arm Kit", "doc_type": "Block Coding Guide", "version": "1.0", "title": "Grabber Arm Kit Block Coding Guide", "language": "en-US", "format": "Markdown", "text": "# Grabber Arm Kit Block Coding Guide (v1.0)\n\nAutomate your Grabber Arm!\n\n## Accessing the Coding Interface\n\n*   Connect via the Kinetic Constructs app ('Code' section).\n\n## Robotic Arm Blocks\n\n*   **Joint Control Blocks:**\n    *   `Set Base Angle to [degrees]`\n    *   `Set Shoulder Angle to [degrees]`\n    *   `Set Elbow Angle to [degrees]`\n    *   `Set Gripper [Open / Close]` or `Set Gripper Angle [degrees]`\n    *   `Set All Joints [BaseDeg], [ShoulderDeg], [ElbowDeg], [GripperState]` (Move to Pose)\n*   **Movement Speed Blocks:**\n    *   `Set Movement Speed to [Percent / Value]`\n*   **Timing Blocks:**\n    *   `Wait [seconds]`\n\n## Example Project 1: Pick and Place (Simple Sequence)\n\n```markdown\n// Define Positions (Angles discovered through manual control/testing)\nDefine Position Home = [Base:90, Shoulder:150, Elbow:150, Gripper:Open]\nDefine Position Pick_Hover = [Base:45, Shoulder:100, Elbow:100, Gripper:Open]\nDefine Position Pick_Down = [Base:45, Shoulder:80, Elbow:120, Gripper:Open]\nDefine Position Place_Hover = [Base:135, Shoulder:100, Elbow:100, Gripper:Closed]\nDefine Position Place_Down = [Base:135, Shoulder:80, Elbow:120, Gripper:Closed]\n\nWhen Start:\n  Set Movement Speed to [50] // Moderate speed\n  \n  // Go Home\n  Set All Joints Home\n  Wait [2] seconds\n  \n  // Move to Pick Hover\n  Set All Joints Pick_Hover\n  Wait [1.5] seconds\n  \n  // Move Down to Pick\n  Set All Joints Pick_Down\n  Wait [1] second\n  \n  // Grab\n  Set Gripper [Close]\n  Wait [1] second\n  \n  // Lift Up (back to Hover)\n  Set All Joints Pick_Hover // Gripper stays closed from previous state\n  Wait [1] second \n  \n  // Move to Place Hover\n  Set All Joints Place_Hover\n  Wait [1.5] seconds\n  \n  // Move Down to Place\n  Set All Joints Place_Down\n  Wait [1] second\n  \n  // Release\n  Set Gripper [Open]\n  Wait [1] second\n  \n  // Lift Up (back to Hover)\n  Set All Joints Place_Hover // Gripper stays open\n  Wait [1] second\n\n  // Go Home\n  Set All Joints Home\n```\n*Description: A pre-defined sequence to move the arm from Home, hover over a pick location, lower, grab, lift, move to a place location, lower, release, lift, and return home. Requires finding the correct joint angles for each position beforehand.* \n\n## Tips\n\n*   Use manual control in the app to find the servo angles needed for different positions.\n*   Use `Wait` blocks to allow movements to complete.\n*   Start with slow speeds (`Set Movement Speed`) and increase gradually.\n\n## Running Your Code\n\n*   Build, Run, Stop via the app."}
{"_id": "CB-ARM-001_TMG_v1.0", "product_id": "CB-ARM-001", "product_name": "Grabber Arm Kit", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.0", "title": "Grabber Arm Kit Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# Grabber Arm Kit Troubleshooting & Maintenance (v1.0)\n\n## Troubleshooting Common Issues\n\n*   **(General Power/Bluetooth Issues):** Refer to [All-Terrain Explorer Bot Troubleshooting & Maintenance Guide](/document/CB-WHL-002_TMG)\n*   **Arm Not Moving / One Joint Not Moving:**\n    *   Check power supply connection and ensure board is powered ON.\n    *   Check servo connections to the control board (correct port, polarity).\n    *   Ensure servo horns/brackets are securely attached with screws.\n    *   Check for physical obstructions binding the joint.\n    *   Possible faulty servo.\n*   **Arm Movement Jerky or Inaccurate:**\n    *   **Servo Centering:** Ensure servos were centered correctly during assembly. Re-calibrate if necessary (app or manual adjustment).\n    *   **Loose Screws:** Check all screws holding servos and joints.\n    *   **Power Supply:** Insufficient power can cause poor servo performance. Ensure the correct power supply is used and functioning.\n    *   **Load:** Trying to lift objects that are too heavy will strain servos.\n    *   **Code:** Rapid commands without waits or incorrect angle calculations in code.\n*   **Gripper Not Working / Weak Grip:**\n    *   Check micro servo connection for the gripper.\n    *   Ensure gripper linkage is connected correctly to the servo horn.\n    *   Check gripper mechanism for obstructions.\n    *   Servo horn screw might be loose.\n    *   Object might be too large or heavy for the gripper.\n*   **Servos Buzzing Loudly:**\n    *   Servo might be stalled against its physical limit or an obstruction.\n    *   Servo might be under excessive load.\n    *   Low power can sometimes increase buzzing.\n    *   Possible internal damage to servo gears.\n\n## Maintenance\n\n*   **Cleaning:** Keep clean, dust-free. Avoid liquids.\n*   **Screw Tightness:** Periodically check joint and servo mounting screws.\n*   **Lubrication:** Check manual - some complex joints might benefit from occasional plastic-safe lubricant, but often not required.\n*   **Servo Care:** Avoid manually forcing joints."}
{"_id": "CB-ARM-001_SCS_v1.0", "product_id": "CB-ARM-001", "product_name": "Grabber Arm Kit", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "Grabber Arm Kit Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# Grabber Arm Kit Safety & Compliance (v1.0)\n\n**WARNING: CHOKING HAZARD -- Small parts. Not for children under 3 years.**  \n**Recommended Age: 9+** Adult supervision recommended.\n\n## Power Supply Safety\n\n*   Use only the power supply (adapter or battery pack) specified for this product.\n*   If using a wall adapter, ensure it is certified for your region. Plug directly into a suitable wall outlet. Do not use extension cords unsafely.\n*   Inspect power supply cord periodically for damage.\n*   Unplug when not in use for extended periods.\n\n## General Safety\n\n*   **Pinch Hazards:** Moving arm joints and gripper present pinch risks. Keep hands, fingers, hair, clothing clear during operation.\n*   Operate on a stable, flat surface.\n*   Do not overload the arm or gripper.\n*   Ensure adequate clearance for arm movement to avoid hitting objects or people.\n*   Servos can get warm during operation.\n*   Do not immerse in water.\n\n## Bluetooth & RF Exposure\n\n*   Follow guidelines for [All-Terrain Explorer Bot](/product/CB-WHL-002).\n\n## Compliance Information (Example)\n\n*   Follow guidelines for [All-Terrain Explorer Bot](/product/CB-WHL-002) (FCC, IC, CE, ASTM).\n*   Power supply unit will have its own compliance markings.\n\nStore this sheet for future reference.  \nKinetic Constructs - Building Tomorrow's Play."}
{"_id": "CB-ARM-002_AM_v1.0", "product_id": "CB-ARM-002", "product_name": "Mobile Grabber Bot", "doc_type": "Assembly Manual", "version": "1.0", "title": "Mobile Grabber Bot Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# Mobile Grabber Bot Assembly Manual (v1.0)\n\nCombine mobility and manipulation!\n\n## Parts List (Combines Wheeled Base & Arm)\n\n*   **Wheeled Base Components:**\n    *   1x Mobile Base Chassis (MGB-A1)\n    *   2x Drive Motors (MGB-B1)\n    *   2x Wheels (MGB-B2)\n    *   1x Caster Wheel (MGB-B3)\n*   **Robotic Arm Components (Similar to [Grabber Arm Kit (CB-ARM-001)](/product/CB-ARM-001)):**\n    *   Arm Base/Joints/Segments/Gripper (MGB-ARM-X)\n    *   3x Standard Servos (Shoulder, Elbow, Base Rotation - mounted on chassis)\n    *   1x Micro Servo (Gripper)\n*   **Electronics:**\n    *   1x Mobile Bot Control Board (Handles Motors & Servos, Bluetooth) (MGB-C1)\n    *   1x Rechargeable Battery Pack (MGB-C2)\n*   Assorted Screws, Nuts, Horns, Tools, USB Cable\n\n*(Illustrations essential)*\n\n## Assembly Steps (High Level - Integration Focus)\n\n1.  **Assemble Mobile Base:**\n    *   Mount Drive Motors (MGB-B1) to chassis.\n    *   Attach Wheels (MGB-B2) and Caster Wheel (MGB-B3).\n2.  **Mount Base Rotation Servo:** Attach the arm's Base Rotation servo to the designated spot on the mobile chassis.\n3.  **Assemble Arm Structure:** Build the arm (Shoulder, Elbow, Gripper servos and segments) similar to [Grabber Arm Kit (CB-ARM-001)](/product/CB-ARM-001), starting from the Base Rotation servo mounted on the chassis.\n    *(Diagram: Shows arm structure being built onto the mobile base)*\n4.  **Mount Control Board & Battery:** Secure the main control board (MGB-C1) and battery (MGB-C2) onto the chassis.\n5.  **Connect Motors:** Plug drive motor wires into motor ports on the board.\n6.  **Connect Servos (4 total):** Plug Base, Shoulder, Elbow, and Gripper servos into designated servo ports on the board.\n7.  **Connect Battery.**\n8.  **Wire Management:** Carefully route motor and servo wires.\n9.  **Attach Covers (if any).**\n\nAssembly Complete. Charge battery."}
{"_id": "CB-ARM-002_UG_v1.0", "product_id": "CB-ARM-002", "product_name": "Mobile Grabber Bot", "doc_type": "User & App Guide", "version": "1.0", "title": "Mobile Grabber Bot User & App Guide", "language": "en-US", "format": "Markdown", "text": "# Mobile Grabber Bot User & App Guide (v1.0)\n\n## Charging & Power\n\n*   Charge battery via USB.\n*   Power ON/OFF via switch/button.\n\n## Connecting to the App\n\n*   Connect via Bluetooth using the Kinetic Constructs app.\n\n## App Controls - Integrated Control\n\n*(Screenshot: App interface showing both driving and arm controls)*\n\n*   **Drive Controls:** Virtual joystick or buttons for mobile base movement (Forward, Backward, Left, Right).\n*   **Arm Controls:** Separate sliders/buttons for Base Rotation, Shoulder, Elbow, and Gripper servos.\n*   **Combined Mode:** Some interfaces might allow simultaneous driving and arm movement.\n*   **Teach Pendant / Record Mode:** May be available for recording sequences involving both driving and arm actions.\n\n## App Controls - Block Coding & Python\n\n*   Access block coding interface.\n*   App may provide info for connecting via Python (Bluetooth Serial).\n\n## Basic Operation\n\n*   Combines wheeled robot movement with arm manipulation.\n*   Requires careful coordination to drive and operate the arm simultaneously.\n*   Consider the robot's stability when extending the arm or carrying objects."}
{"_id": "CB-ARM-002_BCG_v1.0", "product_id": "CB-ARM-002", "product_name": "Mobile Grabber Bot", "doc_type": "Block Coding Guide", "version": "1.0", "title": "Mobile Grabber Bot Block Coding Guide", "language": "en-US", "format": "Markdown", "text": "# Mobile Grabber Bot Block Coding Guide (v1.0)\n\nProgram driving and grabbing actions together!\n\n## Accessing the Coding Interface\n\n*   Connect via the Kinetic Constructs app ('Code' section).\n\n## Combined Block Sets\n\n*   Includes blocks from both wheeled robots and robotic arms:\n*   **Movement Blocks:**\n    *   `Move Forward for [seconds/distance] at [speed]%`\n    *   `Turn Left for [seconds/angle] at [speed]%`\n    *   `Stop Moving`\n*   **Arm Joint Blocks:**\n    *   `Set Base Angle to [degrees]`\n    *   `Set Shoulder Angle to [degrees]`\n    *   `Set Elbow Angle to [degrees]`\n    *   `Set Gripper [Open / Close]`\n    *   `Set Arm Pose [Angles List/Name]`\n*   **Timing & Control Blocks:**\n    *   `Wait [seconds]`\n    *   `Repeat`, `If/Else`, etc.\n\n## Example Project: Fetch Quest\n\n```markdown\n// Define Positions/Angles\nDefine Pose Home = [Base:90, Shoulder:150, Elbow:150, Gripper:Open]\nDefine Pose ReadyToGrab = [Base:90, Shoulder:100, Elbow:100, Gripper:Open]\nDefine Pose GrabLow = [Base:90, Shoulder:80, Elbow:120, Gripper:Open]\nDefine Pose Carry = [Base:90, Shoulder:110, Elbow:130, Gripper:Closed]\n\nWhen Start:\n  Set Arm Pose Home\n  Wait [1] second\n  \n  // Move towards object\n  Move Forward for [3] seconds at [50]% speed\n  Wait [3.5] seconds // Wait for movement completion\n  Stop Moving \n  Wait [0.5] seconds\n  \n  // Prepare to grab\n  Set Arm Pose ReadyToGrab\n  Wait [1.5] seconds\n  \n  // Lower and grab\n  Set Arm Pose GrabLow\n  Wait [1] second\n  Set Gripper [Close]\n  Wait [1] second\n  \n  // Lift to carry position\n  Set Arm Pose Carry\n  Wait [1.5] seconds\n  \n  // Return to start\n  Move Backward for [3] seconds at [50]% speed\n  Wait [3.5] seconds\n  Stop Moving\n  Wait [0.5] seconds\n  \n  // Lower and release (Simplified - assumes back at start)\n  Set Arm Pose ReadyToGrab // Gripper still closed\n  Wait [1] second\n  Set Gripper [Open]\n  Wait [1] second\n  \n  // Go Home\n  Set Arm Pose Home\n```\n*Description: Attempts to drive forward, position the arm, grab an object, lift it, drive back, release it, and reset. Requires careful measurement/tuning of drive times and arm positions.* \n\n## Challenges\n\n*   Coordinating driving and arm movements accurately requires precise timing and potentially sensor feedback (if available).\n*   Robot's position uncertainty (wheel slippage) makes precise placement difficult without additional sensors (like line following or vision).\n\n## Running Your Code\n\n*   Build, Run, Stop via the app."}
{"_id": "CB-ARM-002_API_v1.0", "product_id": "CB-ARM-002", "product_name": "Mobile Grabber Bot", "doc_type": "Python API Reference", "version": "1.0", "title": "Mobile Grabber Bot Python API Reference", "language": "en-US", "format": "Markdown", "text": "# Mobile Grabber Bot Python API Reference (v1.0)\n\nControl drive motors and arm servos with Python.\n\n## Setup & Connection (Bluetooth Serial)\n\n*   **Install Library:** `pip install kinetic_constructs_bots`\n*   **Connection:** Via Bluetooth Serial Port Profile (SPP).\n\n```python\nfrom kinetic_constructs_bots import MobileGrabberBot\nimport time\n\nserial_port = \"COM5\" # Your robot's serial port\n\ntry:\n    bot = MobileGrabberBot(port=serial_port, baudrate=115200)\n    print(\"Connected to Mobile Grabber Bot!\")\nexcept ConnectionError as e:\n    print(f\"Failed to connect: {e}\")\n    exit()\n\n```\n\n## Drive Motor Control\n\n```python\n# Set individual motor speeds (-100 to 100)\nbot.set_motor_speeds(left_speed=50, right_speed=50) # Move forward\ntime.sleep(2)\n\nbot.set_motor_speeds(left_speed=0, right_speed=0) # Stop\n# or bot.stop_motors()\n\n# Higher level functions might exist\n# bot.drive_distance(distance_cm=30, speed=60)\n# bot.turn_angle(angle_deg=90, speed=50)\n```\n\n## Arm Servo Control\n\n```python\n# Control individual arm servos by angle (degrees)\nbot.set_base_angle(110)\nbot.set_shoulder_angle(100)\nbot.set_elbow_angle(90)\ntime.sleep(1.5)\n\n# Control gripper (e.g., 0=Open, 1=Closed or Angle)\nbot.set_gripper_state(1) # Close\ntime.sleep(0.5)\n\n# Set multiple joints at once\n# bot.set_arm_pose(base=90, shoulder=150, elbow=150, gripper=0)\n\n# Get current angles (if supported)\n# current_shoulder = bot.get_shoulder_angle()\n```\n\n## Combined Example: Drive, Grab, Return\n\n```python\ntry:\n    # Assume starting pose is known\n    # bot.set_arm_pose(...) \n    \n    # Drive forward\n    bot.set_motor_speeds(50, 50)\n    time.sleep(3) # Drive for 3 seconds\n    bot.stop_motors()\n    time.sleep(1)\n    \n    # Position arm to grab\n    bot.set_shoulder_angle(80)\n    bot.set_elbow_angle(120)\n    time.sleep(1.5)\n    \n    # Grab\n    bot.set_gripper_state(1) # Close\n    time.sleep(0.8)\n    \n    # Lift slightly\n    bot.set_shoulder_angle(110)\n    time.sleep(1)\n    \n    # Drive back\n    bot.set_motor_speeds(-50, -50)\n    time.sleep(3)\n    bot.stop_motors()\n    time.sleep(1)\n    \n    # Release\n    bot.set_gripper_state(0) # Open\n    time.sleep(0.8)\n    \n    # Reset arm pose\n    # bot.set_arm_pose(...) \n\nexcept KeyboardInterrupt:\n    print(\"Stopping.\")\nfinally:\n    bot.stop_motors()\n    # bot.set_arm_pose(...) # Go home\n    bot.disconnect()\n```\n\n## API Reference (Summary)\n\n*   `MobileGrabberBot(port, baudrate)`\n*   `set_motor_speeds(left_speed, right_speed)`\n*   `stop_motors()`\n*   `set_base_angle(angle)`\n*   `set_shoulder_angle(angle)`\n*   `set_elbow_angle(angle)`\n*   `set_gripper_state(state)` or `set_gripper_angle(angle)`\n*   `set_arm_pose(...)`\n*   *(Get angle functions may exist)*\n*   `disconnect()`\n\nConsult library documentation."}
{"_id": "CB-ARM-002_TMG_v1.1", "product_id": "CB-ARM-002", "product_name": "Mobile Grabber Bot", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.1", "title": "Mobile Grabber Bot Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# Mobile Grabber Bot Troubleshooting & Maintenance (v1.1)\n\n## Troubleshooting Common Issues\n\n*   **(General Power/Bluetooth Issues):** Refer to [All-Terrain Explorer Bot Troubleshooting & Maintenance Guide](/document/CB-WHL-002_TMG).\n*   **(Arm Joint / Servo Issues):** Refer to [Grabber Arm Kit Troubleshooting & Maintenance Guide](/document/CB-ARM-001_TMG).\n*   **(Drive Motor / Wheel Issues):** Refer to [All-Terrain Explorer Bot Troubleshooting & Maintenance Guide](/document/CB-WHL-002_TMG) (e.g., one wheel not spinning).\n*   **Robot Tips Over When Extending Arm / Lifting:**\n    *   **Center of Gravity:** Extending the arm significantly shifts the center of gravity. Avoid rapid extensions or heavy lifts when the arm is far out.\n    *   **Load:** Object is too heavy for the robot's stability.\n    *   **Uneven Surface:** Ensure operation on a flat surface.\n*   **Inconsistent Movement / Positioning (Drive & Arm):**\n    *   **Low Battery:** Combined load of motors and servos drains battery; performance degrades when low.\n    *   **Wheel Slippage:** Drive distances may be inaccurate due to wheel slip.\n    *   **Servo/Joint Play:** Accumulation of small mechanical play in joints can lead to inaccurate arm positioning.\n    *   **Code Timing:** Incorrect `Wait` times in code can cause actions to overlap or fail.\n\n## Maintenance\n\n*   **(General Cleaning):** Keep clean.\n*   **Screw Tightness:** Regularly check screws on both the mobile base (wheels, motors) and the arm joints/servos.\n*   **Wheel/Axle Cleaning:** Check drive wheels and caster for debris.\n*   **Battery Care:** Maintain charge.\n*   **Wire Inspection:** Ensure wires are not caught in arm joints or drive wheels."}
{"_id": "CB-ARM-002_SCS_v1.0", "product_id": "CB-ARM-002", "product_name": "Mobile Grabber Bot", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "Mobile Grabber Bot Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# Mobile Grabber Bot Safety & Compliance (v1.0)\n\n**WARNING: CHOKING HAZARD -- Small parts. Not for children under 3 years.**  \n**Recommended Age: 11+** Adult supervision recommended.\n\n## Battery Safety Instructions (Rechargeable)\n\n*   Follow guidelines for [All-Terrain Explorer Bot](/product/CB-WHL-002).\n\n## General Safety\n\n*   **Combined Hazards:** Combines pinch hazards of the arm with movement hazards of the mobile base. Keep clear during operation.\n*   Operate on a stable floor away from edges, stairs, liquids, people, pets.\n*   Be aware of the robot tipping over if the arm is overextended or lifts heavy objects.\n*   Keep clear of moving wheels and arm joints.\n*   Do not immerse in water.\n*   Components can get warm.\n\n## Bluetooth & RF Exposure\n\n*   Follow guidelines for [All-Terrain Explorer Bot](/product/CB-WHL-002).\n\n## Compliance Information (Example)\n\n*   Follow guidelines for [All-Terrain Explorer Bot](/product/CB-WHL-002) (FCC, IC, CE, ASTM).\n\nStore this sheet for future reference.  \nKinetic Constructs - Building Tomorrow's Play."}
{"_id": "CB-ARM-003_AM_v1.0", "product_id": "CB-ARM-003", "product_name": "Industrial Arm Pro", "doc_type": "Assembly Manual", "version": "1.0", "title": "Industrial Arm Pro Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# Industrial Arm Pro Assembly Manual (v1.0)\n\nAssemble your high-precision 5-axis robotic arm.\n\n## Parts List (High Precision Components)\n\n*   1x Heavy-Duty Base Plate (IAP-A1)\n*   1x Base Rotation Unit (Bearing + High-Torque Servo/Stepper) (IAP-A2)\n*   1x Shoulder Joint Assembly (Metal Gears, High-Torque Servo) (IAP-B1)\n*   1x Upper Arm Structure (Metal/Rigid Plastic) (IAP-B2)\n*   1x Elbow Joint Assembly (Metal Gears, High-Torque Servo) (IAP-C1)\n*   1x Forearm Structure (Metal/Rigid Plastic) (IAP-C2)\n*   1x Wrist Pitch Joint Assembly (Servo) (IAP-D1)\n*   1x Wrist Roll Joint Assembly (Servo) (IAP-D2)\n*   1x Gripper Assembly (Precision, Servo-Actuated) (IAP-E1)\n*   5-6x High-Torque, High-Precision Servos (Metal Geared) (IAP-S1)\n*   1x Pro Arm Control Board (Processor, Wi-Fi/USB) (IAP-C1)\n*   1x High-Current Power Supply (Wall Adapter) (IAP-P1)\n*   Precision Bearings Pack\n*   High-Strength Screw & Bolt Pack\n*   Wiring Harness / Connectors\n*   USB Cable (for programming/control)\n*   Required Tools (Allen Keys, Wrenches, Screwdrivers)\n\n*(Very detailed illustrations/CAD drawings essential)*\n\n## Assembly Steps (High Level - Precision Required)\n\n**Important:** Handle components carefully. Follow torque specifications if provided for bolts. Center servos before assembly.\n\n1.  **Assemble Base Rotation:** Mount the Base Rotation Unit (IAP-A2) including servo/stepper and bearing onto the Base Plate (IAP-A1).\n2.  **Assemble Shoulder Joint:** Attach the Shoulder Joint Assembly (IAP-B1) to the rotating part of the base unit.\n3.  **Attach Upper Arm:** Connect the Upper Arm Structure (IAP-B2) to the Shoulder Joint output.\n4.  **Assemble Elbow Joint:** Attach the Elbow Joint Assembly (IAP-C1) to the end of the Upper Arm.\n5.  **Attach Forearm:** Connect the Forearm Structure (IAP-C2) to the Elbow Joint output.\n6.  **Assemble Wrist (Pitch):** Attach the Wrist Pitch Joint (IAP-D1) to the Forearm.\n7.  **Assemble Wrist (Roll):** Attach the Wrist Roll Joint (IAP-D2) to the Wrist Pitch output.\n8.  **Mount Gripper:** Attach the Gripper Assembly (IAP-E1) to the Wrist Roll output.\n    *(Diagrams: Show assembly of each joint, highlighting bearings, gears, and servo mounting)*\n9.  **Mount Control Board:** Secure the Pro Arm Control Board (IAP-C1) to the Base Plate or designated area.\n10. **Connect Servos/Motors:** Carefully connect each joint servo/motor (Base, Shoulder, Elbow, Wrist Pitch, Wrist Roll, Gripper) to the corresponding ports on the Control Board using the provided harness/connectors.\n11. **Connect Power:** Connect the high-current Power Supply (IAP-P1) to the board.\n12. **Wire Management:** Neatly route and secure all wires, ensuring they don't impede joint movement through the full range of motion.\n\nAssembly requires precision and mechanical aptitude. Charge/Connect Power."}
{"_id": "CB-ARM-003_UG_v1.0", "product_id": "CB-ARM-003", "product_name": "Industrial Arm Pro", "doc_type": "User & App Guide", "version": "1.0", "title": "Industrial Arm Pro User & App Guide", "language": "en-US", "format": "Markdown", "text": "# Industrial Arm Pro User & App Guide (v1.0)\n\n## Powering the Arm\n\n*   Connect the specified High-Current Power Supply (IAP-P1) to the control board and a suitable wall outlet.\n*   Power ON via switch/button on the control board. Board may undergo a self-test/homing sequence.\n\n## Connecting for Control (USB / Wi-Fi)\n\n*   **Primary Method: USB:** Connect the arm's control board to a computer using the provided USB cable. This is typically used for programming via Python API and potentially specialized control software.\n*   **Secondary Method: Wi-Fi:** If configured (see API Guide or separate setup utility), the arm might be controllable over Wi-Fi via the Python API or control software.\n*   **Mobile App:** Basic control (manual joint movement, running pre-saved sequences) might be possible via the Kinetic Constructs app over Bluetooth/Wi-Fi, but primary control is expected via PC.\n\n## PC Control Software (If Provided)\n\n*   Kinetic Constructs may offer dedicated PC software for:\n    *   Manual control of each joint (sliders).\n    *   Setting joint angles or Cartesian coordinates (X, Y, Z, Pitch, Roll).\n    *   Teaching pendant functionality (recording waypoints).\n    *   Running saved sequences or Python scripts.\n    *   Firmware updates and diagnostics.\n    *(Screenshot: Example PC control interface)*\n\n## Calibration\n\n*   Due to the precision nature, initial calibration and potentially periodic re-calibration might be required. This could involve:\n    *   Running a homing sequence (moving joints to limit switches or known positions).\n    *   Using software tools to fine-tune zero positions or link lengths.\n*   Refer to specific calibration procedures in the API documentation or control software guide.\n\n## Basic Operation\n\n*   Designed for precise, repeatable movements.\n*   Higher payload capacity than simpler arms, but still limited (refer to specs).\n*   Operate on a very stable, level surface. Bolting the base down may be recommended for high-speed or high-load tasks."}
{"_id": "CB-ARM-003_API_v1.2", "product_id": "CB-ARM-003", "product_name": "Industrial Arm Pro", "doc_type": "Python API Reference", "version": "1.2", "title": "Industrial Arm Pro Python API Reference", "language": "en-US", "format": "Markdown", "text": "# Industrial Arm Pro Python API Reference (v1.2)\n\nUnlock precise control and advanced robotics concepts.\n\n## Setup & Connection (USB / Wi-Fi)\n\n*   **Install Library:** `pip install kinetic_constructs_bots`\n*   **Connection (USB):** Identify the correct serial port assigned to the arm when connected via USB.\n*   **Connection (Wi-Fi):** Requires prior Wi-Fi configuration (potentially via USB/software). Use the arm's IP address.\n\n```python\nfrom kinetic_constructs_bots import IndustrialArmPro\nimport time\n\n# --- USB Connection --- \n# serial_port = \"COM6\" # Or /dev/ttyACM0 etc.\n# try:\n#     arm = IndustrialArmPro(connection_method='serial', port=serial_port, baudrate=115200)\n#     print(\"Connected via USB!\")\n# except ConnectionError as e:\n#     print(f\"Failed to connect via USB: {e}\")\n#     exit()\n\n# --- Wi-Fi Connection --- \narm_ip = \"192.168.1.160\"\ntry:\n    arm = IndustrialArmPro(connection_method='wifi', ip_address=arm_ip)\n    print(\"Connected via Wi-Fi!\")\nexcept ConnectionError as e:\n    print(f\"Failed to connect via Wi-Fi: {e}\")\n    exit()\n\n```\n\n## Joint Space Control\n\n```python\n# Control individual joints by angle (degrees)\n# Angles relative to zero/home position\njoint_angles = {\n    'base': 45.0,\n    'shoulder': -30.0, \n    'elbow': 90.0, \n    'wrist_pitch': 15.0, \n    'wrist_roll': -60.0\n}\n\n# Move a single joint\narm.set_joint_angle('shoulder', -35.0)\ntime.sleep(1)\n\n# Move all specified joints simultaneously\narm.set_joint_angles(joint_angles, speed=80) # Speed 0-100%\ntime.sleep(arm.get_last_move_duration()) # Wait for move to complete\n\n# Get current joint angles\ncurrent_angles = arm.get_joint_angles()\nprint(f\"Current Angles: {current_angles}\")\n```\n\n## Cartesian Space Control (Inverse Kinematics - IK)\n\n```python\n# Control the gripper's position and orientation in 3D space\n# Coordinates (X, Y, Z) in mm relative to arm base\n# Orientation (Roll, Pitch, Yaw) in degrees\nx, y, z = 300.0, 50.0, 150.0\nroll, pitch, yaw = 0.0, 90.0, 45.0 # Example orientation\n\n# Move gripper to specified pose\nsuccess = arm.set_cartesian_pose(x, y, z, roll, pitch, yaw, speed=70)\nif success:\n    time.sleep(arm.get_last_move_duration())\nelse:\n    print(\"Target pose is unreachable.\")\n\n# Get current Cartesian pose\ncurrent_pose = arm.get_cartesian_pose()\nif current_pose:\n    print(f\"Current Pose (X,Y,Z,R,P,Y): {current_pose}\")\n```\n\n## Gripper Control\n\n```python\n# Open gripper\narm.set_gripper_state('open')\ntime.sleep(0.5)\n\n# Close gripper\narm.set_gripper_state('close')\ntime.sleep(0.5)\n\n# Set gripper opening width (if supported)\n# arm.set_gripper_width(25.0) # Width in mm\n\n# Get gripper state/width\n# gripper_status = arm.get_gripper_state()\n```\n\n## Other Functions\n\n```python\n# Homing sequence\narm.home()\ntime.sleep(arm.get_last_move_duration())\n\n# Set movement speed default (0-100%)\narm.set_speed(60)\n\n# Get status (e.g., idle, moving, error)\nstatus = arm.get_status()\n\n# Emergency Stop\n# arm.estop() \n```\n\n## API Reference (Summary)\n\n*   `IndustrialArmPro(connection_method, port/ip_address, ...)`\n*   `set_joint_angle(joint_name, angle)`\n*   `set_joint_angles(angles_dict, speed)`\n*   `get_joint_angles()` -> dict\n*   `set_cartesian_pose(x, y, z, roll, pitch, yaw, speed)` -> bool (success)\n*   `get_cartesian_pose()` -> tuple(x, y, z, r, p, y) or None\n*   `set_gripper_state('open'/'close')` or `set_gripper_width(mm)`\n*   `get_gripper_state()` -> str or float\n*   `home()`\n*   `set_speed(speed)`\n*   `get_status()` -> str\n*   `get_last_move_duration()` -> float (seconds)\n*   `estop()`\n*   `disconnect()`\n\nConsult full library documentation for coordinate systems, joint names, angle limits, error handling, and advanced motion planning features."}
{"_id": "CB-ARM-003_TMG_v1.0", "product_id": "CB-ARM-003", "product_name": "Industrial Arm Pro", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.0", "title": "Industrial Arm Pro Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# Industrial Arm Pro Troubleshooting & Maintenance (v1.0)\n\n## Troubleshooting Common Issues\n\n*   **Connection Failure (USB/Wi-Fi):**\n    *   **USB:** Ensure correct COM port/device file is selected. Check USB cable and port. Verify drivers are installed (may use standard FTDI/CH340 or custom). Check if other software is holding the port open. Restart PC and Arm.\n    *   **Wi-Fi:** Ensure arm is connected to the correct network. Verify IP address. Check PC firewall. Ping the arm's IP. Restart Arm and Router.\n*   **Arm Fails to Home / Homing Error:**\n    *   Check if any joints are obstructed or at their physical limits before starting homing.\n    *   Check if limit switches (if used) are connected and functioning.\n    *   Power cycle the arm.\n    *   Consult specific error codes from the API/software.\n*   **Inaccurate or Repeatability Issues:**\n    *   **Calibration:** Perform full calibration routine as per documentation.\n    *   **Loose Mechanics:** Check for any loose bolts or screws in joints, servo mounts, or linkages. Backlash in gears can contribute.\n    *   **Base Stability:** Ensure the arm's base is securely mounted on a stable, level surface.\n    *   **Overload:** Attempting movements that exceed the arm's payload or speed limits.\n    *   **Environmental Factors:** Temperature changes can slightly affect mechanics.\n*   **IK Fails / Cannot Reach Pose:**\n    *   The target X,Y,Z,R,P,Y coordinate is mathematically outside the arm's reachable workspace.\n    *   The target requires a joint angle that is beyond its mechanical limit.\n    *   Singularity: The target requires an impossible joint configuration (e.g., wrist aligning with elbow).\n    *   Try moving to the target in smaller increments or adjusting the orientation.\n*   **Excessive Noise or Vibration:**\n    *   Check for loose mechanical parts.\n    *   Lubrication might be needed on joints/gears (use specified type).\n    *   Servo tuning parameters (PID) might need adjustment (advanced users / via software).\n    *   Motor/gearbox damage.\n*   **Control Board Errors / Fault Lights:**\n    *   Consult error code documentation provided with the API/software.\n    *   Check power supply voltage and current.\n    *   Possible overheating or hardware fault.\n\n## Maintenance\n\n*   **Cleaning:** Keep arm free of dust and debris. Use compressed air for crevices. Wipe down with dry/slightly damp cloth.\n*   **Lubrication:** Follow manufacturer's schedule and lubricant recommendations for joints and gears.\n*   **Bolt Tightness:** Periodically check critical bolts for proper torque (if specified) or tightness.\n*   **Wiring Inspection:** Check wiring harness for chafing, pinching, or loose connections, especially near moving joints.\n*   **Calibration Checks:** Perform calibration checks periodically to ensure continued accuracy.\n*   **Firmware Updates:** Check Kinetic Constructs website/software for firmware updates for the control board."}
{"_id": "CB-ARM-003_SCS_v1.0", "product_id": "CB-ARM-003", "product_name": "Industrial Arm Pro", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "Industrial Arm Pro Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# Industrial Arm Pro Safety & Compliance (v1.0)\n\n**WARNING: This is an advanced piece of machinery, not a toy. Risk of injury if misused.**\n**Recommended Age: 14+ / Hobbyist / Educator.** Requires understanding of robotics principles and safety procedures.\n\n## Electrical Safety\n\n*   Use ONLY the specified high-current power supply. Incorrect voltage or current can damage the arm and create a fire hazard.\n*   Ensure power supply is certified for your region and plugged into a properly grounded outlet.\n*   Do not operate with damaged power cord or connectors.\n*   Keep liquids away from the arm and power supply.\n*   Disconnect power before performing maintenance or adjustments unless specifically required by the procedure.\n\n## Mechanical Safety\n\n*   **High Pinch/Crush Hazard:** The arm has multiple powerful joints capable of causing serious injury. Maintain a safe operating distance AT ALL TIMES when powered.\n*   **Collision Hazard:** Ensure the arm's workspace is clear of obstructions, people, and animals before operation.\n*   **Unexpected Movement:** Software errors or hardware faults could potentially cause unexpected rapid movements. Be prepared to cut power (Emergency Stop or unplug).\n*   **Payload Limits:** Do not exceed the specified maximum payload. Overloading can cause damage or instability.\n*   **Mounting Stability:** Ensure the arm base is securely fastened to a stable, heavy surface capable of handling the arm's weight and dynamic forces.\n*   **Eye Protection:** Consider wearing safety glasses during operation, especially if working with potentially ejected parts or tools.\n\n## Operational Safety\n\n*   Never leave the arm operating unattended.\n*   Implement safety interlocks or guarding if used in an automated or educational setting where untrained personnel might be present.\n*   Develop and follow safe operating procedures, including emergency stop protocols.\n\n## RF Exposure (If Wi-Fi/Bluetooth Equipped)\n\n*   Contains radio transmitters. Maintain >20cm distance during operation.\n\n## Compliance Information (Example)\n\n*   May fall under different regulations than toys (e.g., Machinery Directive in EU, FCC Part 15/18).\n*   FCC ID: [Example Pro Arm Board FCC ID]\n*   IC: [Example Pro Arm Board IC ID]\n*   CE Mark (Declaration of Conformity likely references Machinery Directive, EMC Directive, RoHS).\n*   Power Supply will have separate certifications (UL, CE, etc.).\n\n**Failure to follow safety procedures can result in serious injury or equipment damage.**\nStore this sheet for future reference.\nKinetic Constructs - Building Tomorrow's Play (Responsibly)."}
{"_id": "CB-DRN-001_AM_v1.0", "product_id": "CB-DRN-001", "product_name": "Sky Dart Drone Kit", "doc_type": "Assembly Manual", "version": "1.0", "title": "Sky Dart Drone Kit Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# Sky Dart Drone Kit Assembly Manual (v1.0)\n\nBuild your first drone!\n\n## Parts List\n\n*   1x Main Frame (DRN-A1)\n*   4x Motor Mount Arms (DRN-A2)\n*   4x Brushed Motors (2x Clockwise Rotation, 2x Counter-Clockwise Rotation - check markings/wire colors) (DRN-M1-CW, DRN-M1-CCW)\n*   4x Propellers (2x Type A, 2x Type B - match to motor rotation) (DRN-P1A, DRN-P1B)\n*   1x Flight Controller Board (DRN-C1)\n*   1x Rechargeable Drone Battery (LiPo) (DRN-B1)\n*   1x Drone Battery USB Charger (DRN-CH1)\n*   1x Outer Shell / Canopy (DRN-S1)\n*   1x RC Transmitter (Remote Control) (DRN-R1)\n*   Landing Gear Skids (Optional) (DRN-LG1)\n*   Assorted Screws\n*   Small Screwdriver\n*   Propeller Guard Set (Recommended) (DRN-PG1)\n\n*(Illustrations essential, showing motor rotation and propeller type matching)*\n\n## Assembly Steps\n\n**Safety First: Do NOT install propellers until the very last step after setup and binding!**\n\n1.  **Assemble Frame:** Attach Motor Mount Arms (DRN-A2) to the Main Frame (DRN-A1). Secure with screws.\n2.  **Mount Motors:** Insert the correct motor (CW or CCW) into each arm mount. Pay close attention to the correct placement (e.g., Front-Right=CW, Front-Left=CCW, Rear-Right=CCW, Rear-Left=CW - **VERIFY WITH DIAGRAM**). Secure motors (may press-fit or use small screws).\n    *(Diagram: Top-down view showing standard quadcopter motor layout and rotation direction)*\n3.  **Mount Flight Controller:** Secure the Flight Controller Board (DRN-C1) to the center of the Main Frame, ensuring correct orientation (e.g., arrow pointing forward).\n4.  **Connect Motors:** Plug the motor wires into the designated motor ports on the Flight Controller. Ensure CW/CCW motors go to the correct ports matching the diagram in Step 2.\n5.  **Attach Landing Gear (Optional):** Snap or screw on Landing Gear Skids (DRN-LG1).\n6.  **Install Battery Holder (if separate):** Attach battery holder/strap.\n7.  **Attach Canopy:** Place the Outer Shell / Canopy (DRN-S1) over the frame and secure.\n8.  **Install Prop Guards (Recommended):** Attach the Propeller Guards (DRN-PG1) around the motor areas.\n\n**STOP HERE FOR NOW.** Charge the drone battery and remote batteries before proceeding to the User Guide for Binding and Propeller Installation."}
{"_id": "CB-DRN-001_UG_v1.0", "product_id": "CB-DRN-001", "product_name": "Sky Dart Drone Kit", "doc_type": "User Guide", "version": "1.0", "title": "Sky Dart Drone Kit User Guide", "language": "en-US", "format": "Markdown", "text": "# Sky Dart Drone Kit User Guide (v1.0)\n\nFly safely and responsibly!\n\n## Charging Batteries\n\n*   **Drone Battery (LiPo):** Connect the Drone Battery (DRN-B1) to the USB Charger (DRN-CH1). Plug the charger into a USB port. LED indicator shows charging status (e.g., Red=Charging, Green=Done). Charge time approx 60-90 mins. **Never leave charging LiPo batteries unattended. Charge on a non-flammable surface.**\n*   **RC Transmitter:** Install required AA/AAA batteries (not included) into the RC Transmitter (DRN-R1), observing polarity.\n\n## Binding Transmitter to Drone\n\n*(This process links your specific remote to your drone)*\n\n1.  Place the drone on a flat, level surface.\n2.  Turn ON the RC Transmitter. Throttle stick should be DOWN.\n3.  Insert the fully charged Drone Battery into the drone's battery holder/connector. The drone's LEDs will likely start blinking rapidly.\n4.  On the RC Transmitter, push the **Throttle stick (usually Left Stick) all the way UP, then all the way DOWN.**\n5.  You should hear a beep from the transmitter and/or the drone's LEDs should change pattern (e.g., slow blink or solid ON).\n6.  Binding is complete. This usually only needs to be done once unless pairing with a different transmitter.\n\n## Pre-Flight Calibration (Gyro/Accelerometer)\n\n*   After binding, with the drone level, perform the calibration sequence (check remote manual - often involves holding both sticks down and to a specific corner for a few seconds). Drone LEDs will blink during calibration and return to normal when done.\n*   **Calibrate every time before the first flight of a session or if the drone drifts badly.**\n\n## **FINAL STEP: Propeller Installation**\n\n**WARNING: Ensure drone is OFF and battery is DISCONNECTED before installing propellers.** Spinning props are dangerous.\n\n1.  Identify Propeller Types (A/B or CW/CCW markings).\n2.  Match the correct propeller type to the correct motor rotation direction (refer to diagram in Assembly Manual or markings on frame/props).\n    *   Prop A -> CW Motors\n    *   Prop B -> CCW Motors (Or vice-versa - CHECK MARKINGS/MANUAL)\n3.  Press the propeller firmly onto the motor shaft. Ensure it's fully seated.\n    *(Diagram: Shows correct propeller placement matching motor rotation)*\n\n## Basic Flight Controls (Mode 2 Transmitter - typical)\n\n*(Diagram: RC Transmitter with sticks labelled)*\n\n*   **Left Stick Up/Down:** Throttle (Altitude Control - Up = Ascend, Down = Descend)\n*   **Left Stick Left/Right:** Yaw (Rotate/Spin drone Left/Right)\n*   **Right Stick Up/Down:** Pitch (Move drone Forward/Backward)\n*   **Right Stick Left/Right:** Roll (Move drone Left/Right - Strafe)\n*   **Trim Buttons:** Small buttons near sticks used to counteract drift (if drone moves slightly without input, press opposite trim button).\n*   **Other Buttons:** May include Auto Takeoff/Land, Speed Modes, Flip Button.\n\n## First Flight Tips\n\n*   **Location:** Fly indoors in a large, clear room OR outdoors in **calm conditions** (NO WIND) away from people, animals, trees, buildings, power lines.\n*   **Takeoff:** Place drone level. Slowly increase throttle (Left Stick Up) until drone lifts off. Aim for a stable hover 1m off ground.\n*   **Hover Practice:** Gently use Right Stick to keep drone stationary. Use Left Stick Left/Right for minor rotation adjustments.\n*   **Landing:** Slowly decrease throttle (Left Stick Down) until drone lands gently. Cut throttle completely once landed.\n*   **Short Flights:** Initial flights should be short (3-5 mins) as battery life is limited.\n\n## Powering Off\n\n1.  Disconnect drone battery.\n2.  Turn off RC Transmitter."}
{"_id": "CB-DRN-001_TMG_v1.1", "product_id": "CB-DRN-001", "product_name": "Sky Dart Drone Kit", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.1", "title": "Sky Dart Drone Kit Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# Sky Dart Drone Kit Troubleshooting & Maintenance (v1.1)\n\n## Troubleshooting Common Issues\n\n*   **Drone Won't Turn On / No Lights:**\n    *   Ensure drone battery is fully charged and properly connected.\n    *   Check battery connector for damage.\n*   **Transmitter Won't Turn On:**\n    *   Check transmitter batteries are installed correctly and are fresh.\n*   **Cannot Bind Transmitter to Drone:**\n    *   Ensure both devices are powered correctly.\n    *   Follow the binding procedure exactly (Throttle Up, then Down).\n    *   Make sure throttle stick was fully down before starting.\n    *   Try rebinding in a different location (away from potential RF interference).\n    *   Ensure you are using the correct transmitter for the drone.\n*   **Drone Won't Take Off / Lifts Unevenly / Flips Over Immediately:**\n    *   **PROPELERS ARE INCORRECTLY INSTALLED!** This is the MOST common cause. Double-check propeller type (A/B) matches motor rotation (CW/CCW) on ALL FOUR motors. Refer to diagrams.\n    *   Ensure all propellers are fully seated and not damaged.\n    *   Perform Gyro/Accelerometer calibration on a level surface.\n    *   Check if one motor is obstructed or not spinning freely.\n    *   Ensure drone battery is fully charged.\n*   **Drone Drifts Excessively:**\n    *   Perform Gyro/Accelerometer calibration on a perfectly level surface.\n    *   Use Trim buttons on the transmitter to counteract minor, consistent drift.\n    *   Check for damaged propellers (even small nicks matter).\n    *   Check for hair or debris wrapped around motor shafts.\n    *   If flying outdoors, wind is likely the cause.\n*   **Short Flight Time:**\n    *   Ensure battery is fully charged.\n    *   Aggressive flying uses more power.\n    *   Battery performance degrades over time. May need replacement after many cycles.\n    *   Check for anything causing extra drag or motor strain (damaged props, debris).\n*   **Loss of Control / Flyaway:**\n    *   Stay within control range (typically 20-50 meters for basic drones).\n    *   Avoid flying near sources of strong RF interference (Wi-Fi routers, power lines).\n    *   Ensure transmitter batteries are fresh.\n    *   If control is lost, immediately cut throttle (Left Stick Down) to minimize damage/loss.\n\n## Maintenance\n\n*   **Propellers:** Inspect propellers before every flight for chips, cracks, or bends. Replace damaged propellers immediately (use the correct type A/B!).\n*   **Motors:** Check for debris around motor shafts. Clean gently with compressed air if needed.\n*   **Cleaning:** Wipe drone frame with a dry cloth. Avoid liquids.\n*   **Battery Care:** Follow LiPo safety guidelines (see Safety Sheet). Do not puncture or damage battery. Store partially charged (approx 3.8V per cell) if storing long term. Dispose of damaged/swollen batteries properly.\n*   **Storage:** Store drone and transmitter in a cool, dry place."}
{"_id": "CB-DRN-001_SCS_v1.0", "product_id": "CB-DRN-001", "product_name": "Sky Dart Drone Kit", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "Sky Dart Drone Kit Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# Sky Dart Drone Kit Safety & Compliance (v1.0)\n\n**WARNING: DRONES ARE NOT TOYS. Misuse can cause serious injury or property damage. Fly responsibly.**\n**Recommended Age: 10+** Close adult supervision REQUIRED at all times.\n\n## Lithium Polymer (LiPo) Battery Safety - CRITICAL!\n\n*   Contains a LiPo battery. LiPo batteries can be DANGEROUS if mishandled.\n*   **Charging:**\n    *   Use ONLY the supplied USB charger.\n    *   NEVER leave charging batteries unattended.\n    *   Charge on a non-flammable surface (concrete, metal tray, LiPo bag).\n    *   Do NOT charge if battery is hot, swollen, punctured, or damaged.\n    *   Allow battery to cool before charging after flight.\n    *   Do not overcharge. Disconnect when green light indicates full.\n*   **Handling & Use:**\n    *   Do NOT puncture, crush, short-circuit, or expose battery to water or extreme temperatures.\n    *   If battery swells or smokes, immediately move to a safe, isolated outdoor area away from flammable materials. Do NOT attempt to extinguish with water initially (use sand or Class D extinguisher if available).\n*   **Storage:** Store partially charged (~50% or 3.8V/cell) in a cool, dry place, preferably in a LiPo-safe bag.\n*   **Disposal:** Dispose of LiPo batteries according to local regulations for hazardous waste (do NOT put in household trash). Discharge fully before disposal if safe to do so.\n\n## Flight Safety\n\n*   **Propeller Hazard:** Spinning propellers can cause serious cuts. Keep hands, face, hair, clothing clear. Ensure drone is OFF and battery DISCONNECTED when handling propellers.\n*   **Fly Legal:** Know and follow ALL local, state, and federal drone regulations (e.g., FAA rules in the US - registration may be required depending on weight, check current rules). Fly below altitude limits (e.g., 400ft AGL in US).\n*   **Fly Safe Location:**\n    *   Fly outdoors ONLY in open areas, away from people, animals, buildings, airports, power lines, trees, roads.\n    *   Maintain visual line of sight (VLOS) with the drone at all times.\n    *   Do NOT fly over people or moving vehicles.\n    *   Do NOT fly in adverse weather (wind, rain, snow, fog).\n    *   Do NOT fly at night (unless drone has appropriate lighting AND permitted by regulations).\n    *   Respect privacy. Do not fly where people have a reasonable expectation of privacy.\n*   **Operator Fitness:** Do NOT fly under the influence of alcohol or drugs.\n\n## Compliance Information (Example)\n\n*   **FCC:** Complies with Part 15. Transmitter operation subject to FCC rules.\n*   **CE:** Conforms to relevant EU directives (RED, Toy Safety if applicable, EMC).\n*   **Battery Compliance:** UN38.3 testing certification for LiPo transport.\n\n**Failure to follow safety procedures can lead to injury, damage, legal penalties, and loss of flying privileges.**\nStore this sheet for future reference.\nKinetic Constructs - Building Tomorrow's Play (Safely & Responsibly)."}
{"_id": "CB-DRN-002_AM_v1.0", "product_id": "CB-DRN-002", "product_name": "Vision Drone Explorer", "doc_type": "Assembly Manual", "version": "1.0", "title": "Vision Drone Explorer Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# Vision Drone Explorer Assembly Manual (v1.0)\n\nBuild your camera-equipped drone!\n\n## Parts List\n\n*   1x Main Frame with Integrated Camera Mount (VDE-A1)\n*   4x Motor Mount Arms (VDE-A2)\n*   4x Brushless Motors (More powerful, specific KV rating) (VDE-M1)\n*   4x Propellers (Matched to brushless motors) (VDE-P1)\n*   1x Flight Controller Board with Wi-Fi & Camera Interface (VDE-C1)\n*   1x Camera Module with Ribbon Cable (VDE-CAM1)\n*   1x GPS Module (Optional, if included) (VDE-GPS1)\n*   1x Barometer (usually integrated on Flight Controller)\n*   1x Rechargeable Drone Battery (Higher Capacity LiPo) (VDE-B1)\n*   1x Balance Charger for LiPo Battery (VDE-CH1)\n*   Landing Gear\n*   Assorted Screws, Motor Bolts\n*   Tools (Allen Keys, Screwdriver)\n*   Propeller Guards (Recommended)\n\n*(Illustrations essential)*\n\n## Assembly Steps\n\n**Safety First: Propellers installed LAST. Handle LiPo battery with care.**\n\n1.  **Assemble Frame:** Attach Arms (VDE-A2) to Main Frame (VDE-A1).\n2.  **Mount Motors:** Secure Brushless Motors (VDE-M1) to the arms using provided bolts. Ensure correct motor placement if specified (though often identical for brushless).\n    *(Diagram: Motor mounting, potentially showing wire routing)*\n3.  **Mount Flight Controller:** Secure the advanced Flight Controller (VDE-C1) to the frame center, ensuring correct orientation (forward arrow).\n4.  **Connect Motors to FC:** Connect the three wires from each brushless motor to the corresponding motor outputs on the Flight Controller. (Order might matter for direction - check FC documentation, may require software configuration later if wrong).\n    *(Diagram: Shows motor wire connections)*\n5.  **Mount Camera:** Secure the Camera Module (VDE-CAM1) in its mount on the frame. Carefully connect the ribbon cable to the designated camera port on the Flight Controller. Avoid sharp bends or damage to the cable.\n6.  **Mount GPS Module (if included):** Attach GPS module (VDE-GPS1) to its designated spot (often on a raised mast for clear sky view). Connect its cable to the GPS port on the FC.\n7.  **Mount Landing Gear.**\n8.  **Install Battery Tray/Strap.**\n9.  **Attach Covers/Canopy (if any).**\n10. **Install Prop Guards (Recommended).**\n\n**STOP HERE.** Charge drone battery. Proceed to User Guide for App Setup, Binding (if using RC), Calibration, and Propeller Installation."}
{"_id": "CB-DRN-002_UG_v1.0", "product_id": "CB-DRN-002", "product_name": "Vision Drone Explorer", "doc_type": "User & App Guide", "version": "1.0", "title": "Vision Drone Explorer User & App Guide", "language": "en-US", "format": "Markdown", "text": "# Vision Drone Explorer User & App Guide (v1.0)\n\nExplore the world from above!\n\n## Charging Battery (Balance Charger)\n\n*   **Drone Battery (LiPo):** Connect the Drone Battery (VDE-B1) main plug AND the smaller balance plug to the Balance Charger (VDE-CH1). Plug charger into wall outlet. Charger LEDs indicate status for each cell, ensuring balanced charge. **Follow LiPo safety rules strictly! Never leave unattended.**\n\n## Connecting & Setup (App Control Focus)\n\n1.  **Download App:** Install the Kinetic Constructs Drone Control app on your smartphone/tablet.\n2.  **Power On Drone:** Insert charged battery and power on the drone.\n3.  **Connect via Wi-Fi:** The drone will create its own Wi-Fi network (e.g., \"KINETIC_VDE_XXXX\"). Connect your phone/tablet to this Wi-Fi network (password might be default or none).\n4.  **Launch App:** Open the Drone Control app. It should automatically detect and connect to the drone.\n\n## App Interface\n\n*(Screenshot: App showing FPV feed, controls, telemetry)*\n\n*   **FPV Feed:** Live video from the drone's camera.\n*   **Virtual Joysticks:** For flight control (Throttle/Yaw, Pitch/Roll).\n*   **Telemetry Data:** Displays Altitude (from barometer), Speed (GPS if available), Battery Voltage, Wi-Fi Signal Strength, GPS Status (satellites locked).\n*   **Buttons:**\n    *   Auto Takeoff / Auto Land\n    *   Return-to-Home (RTH) (Requires GPS Lock)\n    *   Record Video / Take Photo\n    *   Flight Mode Selection (e.g., Altitude Hold, GPS Position Hold, Manual)\n    *   Settings / Calibration Menu\n\n## Pre-Flight Calibration\n\n*   **IMU Calibration (Gyro/Accelerometer):** Place drone level. Initiate calibration from the app's settings menu. Follow on-screen prompts.\n*   **Compass Calibration:** Initiate from app settings. Requires rotating the drone horizontally and vertically as prompted by the app. Perform away from large metal objects or magnetic interference.\n*   **GPS Lock (if applicable):** Wait outdoors with clear sky view until app indicates sufficient satellites locked for accurate position hold and RTH.\n\n## **FINAL STEP: Propeller Installation**\n\n**WARNING: Ensure drone is OFF and battery DISCONNECTED.**\n\n1.  Identify Propeller Types (A/B or CW/CCW).\n2.  Match correct propeller to correct brushless motor rotation (Check diagrams/markings). Brushless motors often have threaded shafts (CW/CCW threads) and self-tightening nuts.\n3.  Spin prop onto motor shaft in the correct direction (it should tighten as motor spins). Secure with prop nut if required (do not overtighten).\n    *(Diagram: Shows propeller direction for brushless motors)*\n\n## Flight Controls & Modes\n\n*   **Altitude Hold:** Drone attempts to maintain current altitude using barometer. You control horizontal movement.\n*   **GPS Position Hold (Requires GPS Lock):** Drone attempts to maintain current position and altitude using GPS and barometer. Resists wind drift.\n*   **Return-to-Home (RTH) (Requires GPS Lock):** Drone ascends to safe altitude, flies back to takeoff point (recorded via GPS), and lands automatically. Ensure takeoff point is clear.\n*   Practice basic maneuvers (hover, forward/back, left/right) in an open, safe area.\n\n## Recording Media\n\n*   Use app buttons to start/stop video recording or take photos. Media typically saved to your phone/tablet via Wi-Fi, or potentially to an onboard SD card (check drone specs).\n\n## Powering Off\n\n1.  Land drone.\n2.  Disconnect drone battery.\n3.  Disconnect phone from drone's Wi-Fi.\n4.  Close app."}
{"_id": "CB-DRN-002_BCG_v1.0", "product_id": "CB-DRN-002", "product_name": "Vision Drone Explorer", "doc_type": "Block Coding Guide", "version": "1.0", "title": "Vision Drone Explorer Block Coding Guide", "language": "en-US", "format": "Markdown", "text": "# Vision Drone Explorer Block Coding Guide (v1.0)\n\nProgram autonomous flight paths!\n\n## Accessing the Coding Interface\n\n*   Connect to the drone via Wi-Fi using the Kinetic Constructs Drone Control app.\n*   Navigate to the 'Code', 'Mission', or 'Blocks' section.\n\n## Drone Specific Blocks\n\n*   **Flight Control Blocks:**\n    *   `Takeoff to [altitude] meters`\n    *   `Land`\n    *   `Fly Forward [distance] meters at [speed] m/s`\n    *   `Fly To GPS Coordinate [Lat, Lon, Alt]` (Requires GPS)\n    *   `Hover for [seconds]`\n    *   `Rotate [angle] degrees`\n    *   `Change Altitude to [altitude] meters`\n*   **Camera Blocks:**\n    *   `Take Photo`\n    *   `Start Video Recording`\n    *   `Stop Video Recording`\n*   **Sensor Blocks:**\n    *   `Get Altitude (meters)`\n    *   `Get Ground Speed (m/s)` (Requires GPS)\n    *   `Get GPS Coordinates` (Requires GPS)\n    *   `Get Battery Voltage`\n*   **Control Flow Blocks:**\n    *   `Wait [seconds]`\n    *   `Repeat`, `If/Else`\n\n## Example Project 1: Simple Square Path\n\n```markdown\nWhen Start:\n  Wait until <GPS Status is Good> // Ensure GPS lock if needed\n  Takeoff to [3] meters\n  Wait [5] seconds // Allow stabilization\n  \n  // Fly Square\n  Fly Forward [10] meters at [2] m/s\n  Wait for move completion // Or calculate wait time\n  Rotate [90] degrees\n  Wait for rotation completion\n  \n  Fly Forward [10] meters at [2] m/s\n  Wait for move completion\n  Rotate [90] degrees\n  Wait for rotation completion\n  \n  Fly Forward [10] meters at [2] m/s\n  Wait for move completion\n  Rotate [90] degrees\n  Wait for rotation completion\n  \n  Fly Forward [10] meters at [2] m/s\n  Wait for move completion\n  Rotate [90] degrees\n  Wait for rotation completion\n  \n  // Finish\n  Hover for [5] seconds\n  Land\n```\n*Description: Attempts to fly a 10m square pattern at 3m altitude. Requires sufficient space and likely GPS for accuracy. `Wait for move completion` blocks are conceptual; might need `Wait [seconds]` based on distance/speed.* \n\n## Example Project 2: Aerial Photo Point\n\n```markdown\nWhen Start:\n  Takeoff to [5] meters\n  Wait [5] seconds\n  \n  Fly Forward [15] meters at [2] m/s\n  Wait for move completion\n  \n  Hover for [3] seconds\n  Take Photo\n  Wait [2] seconds\n  \n  // Return (approximate)\n  Rotate [180] degrees\n  Wait for rotation completion\n  Fly Forward [15] meters at [2] m/s\n  Wait for move completion\n  \n  Land\n```\n*Description: Takes off, flies forward, hovers, takes a picture, then attempts to return and land.* \n\n## Important Considerations\n\n*   **Safety:** ALWAYS test autonomous programs in a large, open, safe area with no obstacles or people. Be ready to take over manual control (via app) immediately if something goes wrong.\n*   **Accuracy:** Accuracy depends heavily on sensor quality (especially GPS) and environmental conditions (wind).\n*   **Battery Life:** Plan missions well within the drone's flight time limits.\n*   **Regulations:** Ensure autonomous flights comply with all local drone regulations.\n\n## Running Your Code\n\n*   Build the mission/program in the app.\n*   Upload the mission to the drone.\n*   Initiate the mission from the app (usually requires pre-flight checks).\n*   Monitor progress from the app. Use 'Pause' or 'Cancel Mission' if needed."}
{"_id": "CB-DRN-002_TMG_v1.2", "product_id": "CB-DRN-002", "product_name": "Vision Drone Explorer", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.2", "title": "Vision Drone Explorer Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# Vision Drone Explorer Troubleshooting & Maintenance (v1.2)\n\n## Troubleshooting Common Issues\n\n*   **(Basic Drone Issues - Uneven Lift, Binding):** Refer to [Sky Dart Drone Kit Troubleshooting & Maintenance Guide](/document/CB-DRN-001_TMG). Propeller installation and calibration remain critical.\n*   **Cannot Connect to Drone Wi-Fi:**\n    *   Ensure drone is powered ON.\n    *   Check if drone's Wi-Fi network is visible in your phone's settings.\n    *   Make sure you are within Wi-Fi range (can be short, 10-30m).\n    *   Try restarting drone and phone Wi-Fi.\n*   **App Cannot Connect to Drone (after connecting to Wi-Fi):**\n    *   Ensure you are connected to the *drone's* Wi-Fi, not your home network.\n    *   Restart the app and the drone.\n    *   Check for app updates.\n*   **No Video Feed / Poor Video Quality:**\n    *   Check camera ribbon cable connection to flight controller.\n    *   Poor Wi-Fi signal strength is the most common cause for lag/low quality. Stay within range.\n    *   Interference from other 2.4GHz devices.\n    *   Ensure camera lens is clean.\n*   **GPS Not Locking / Poor Position Hold:**\n    *   Fly outdoors with a clear, unobstructed view of the sky.\n    *   Allow several minutes for initial satellite lock.\n    *   Avoid flying near tall buildings or heavy tree cover.\n    *   Perform compass calibration away from metal/magnetic sources.\n    *   Check GPS module connection to flight controller.\n*   **Inaccurate Altitude Hold:**\n    *   Barometer is sensitive to pressure changes. Avoid rapid weather changes. Sudden gusts can affect readings.\n    *   Ensure barometer sensor (small hole on FC) is not blocked by debris or tape.\n    *   Perform IMU calibration on level ground.\n*   **Return-to-Home (RTH) Fails or Inaccurate:**\n    *   Requires a solid GPS lock *at the takeoff point* before starting flight.\n    *   Ensure the recorded Home Point in the app is correct.\n    *   Obstacles between drone and home point can cause issues. Ensure RTH altitude is set high enough to clear obstacles.\n    *   Strong winds can prevent drone from returning.\n    *   Low battery may trigger RTH but drone might not have enough power to return fully.\n*   **Motors Don't Spin / Erratic Motor Behavior (Brushless):**\n    *   Check motor connections to flight controller.\n    *   ESC (Electronic Speed Controller - often built into FC or separate) calibration might be needed (advanced procedure, check FC documentation).\n    *   Possible faulty motor or ESC/FC issue.\n\n## Maintenance\n\n*   **(Propeller / Motor / Cleaning):** Refer to [Sky Dart Drone Kit Troubleshooting & Maintenance Guide](/document/CB-DRN-001_TMG). Inspect brushless motors and props carefully.\n*   **Battery Care:** Strictly follow LiPo safety and balance charging procedures.\n*   **Camera Lens:** Keep clean with microfiber cloth.\n*   **Connectors:** Check motor, camera, GPS, and battery connectors periodically for secure fit.\n*   **Firmware Updates:** Check Kinetic Constructs app/website for firmware updates for the flight controller (can fix bugs and improve performance). Follow update instructions carefully."}
{"_id": "CB-DRN-002_SCS_v1.0", "product_id": "CB-DRN-002", "product_name": "Vision Drone Explorer", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "Vision Drone Explorer Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# Vision Drone Explorer Safety & Compliance (v1.0)\n\n**WARNING: DRONES ARE NOT TOYS. Misuse can cause serious injury or property damage. Fly responsibly.**  \n**Recommended Age: 12+** Requires understanding of flight dynamics, regulations, and app interfaces. Adult supervision strongly recommended.\n\n## Lithium Polymer (LiPo) Battery Safety - CRITICAL!\n\n*   Contains a LiPo battery. Follow ALL LiPo safety guidelines detailed in [Sky Dart Drone Kit Safety & Compliance Sheet](/document/CB-DRN-001_SCS_v1.0) (Charging, Handling, Storage, Disposal). Use the provided BALANCE CHARGER only.\n\n## Flight Safety\n\n*   **Propeller Hazard:** Brushless motors are powerful. Spinning propellers cause serious injury. Keep clear. Disconnect battery before handling props.\n*   **Fly Legal:** Know and follow ALL local/state/federal drone regulations (e.g., FAA rules in US - registration likely required based on weight/capabilities). Maintain VLOS. Fly below altitude limits.\n*   **Fly Safe Location:** Open areas away from people, animals, buildings, airports, power lines, etc. No flying over people/vehicles. Respect privacy.\n*   **Weather:** Avoid wind, rain, fog, snow.\n*   **Automation Risks:** Autonomous flight (block coding missions) carries additional risks. Always monitor flight closely and be prepared to immediately cancel the mission and take manual control via the app if the drone behaves unexpectedly. Test autonomous modes ONLY in extremely large, clear, safe areas.\n*   **GPS/Sensor Reliance:** Do not rely solely on GPS or sensors. They can fail or be inaccurate. Always maintain situational awareness.\n*   **Return-to-Home (RTH):** Understand how RTH works, its limitations (GPS accuracy, obstacles, battery), and how to cancel it.\n*   **Operator Fitness:** No flying under influence.\n\n## Wi-Fi & RF Exposure\n\n*   Contains Wi-Fi transmitter. Maintain >20cm separation distance.\n\n## Privacy\n\n*   The onboard camera records video and photos. Be mindful of privacy laws and etiquette. Do not record or photograph where people have a reasonable expectation of privacy without consent.\n\n## Compliance Information (Example)\n\n*   **FCC:** Complies with Part 15. Contains FCC ID: [Example VDE FC FCC ID]\n*   **IC:** Contains IC ID: [Example VDE FC IC ID]\n*   **CE:** Conforms to relevant EU directives (RED, EMC, RoHS, possibly Machinery if classified as such).\n*   **Battery Compliance:** UN38.3.\n\n**Failure to follow safety procedures can lead to severe injury, damage, legal penalties, and loss of flying privileges.**  \nStore this sheet for future reference.  \nKinetic Constructs - Building Tomorrow's Play (Safely & Responsibly)."}
{"_id": "CB-DRN-003_AM_v1.0", "product_id": "CB-DRN-003", "product_name": "Programmable Swarm Drone Pack (Set of 3)", "doc_type": "Assembly Manual", "version": "1.0", "title": "Programmable Swarm Drone Pack Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# Programmable Swarm Drone Pack Assembly Manual (v1.0)\n\nAssemble your fleet of coordinated drones!\n\n## Parts List (Per Drone x 3, Plus Controller)\n\n*   **Per Drone (x3):**\n    *   1x Swarm Drone Frame (Lightweight) (SDRN-A1)\n    *   4x Small Motors (Likely Coreless or small Brushless) (SDRN-M1)\n    *   4x Small Propellers (Matched) (SDRN-P1)\n    *   1x Swarm Flight Controller (w/ Wi-Fi/Mesh Radio) (SDRN-C1)\n    *   1x Small LiPo Battery (SDRN-B1)\n    *   Propeller Guards (SDRN-PG1)\n    *   Assorted Small Screws\n*   **Common Items:**\n    *   3x Individual USB Chargers (or Multi-Charger) (SDRN-CH1)\n    *   1x Master Control Interface (May be software based, or require a dedicated USB dongle/controller) (SDRN-MC1)\n    *   Spare Propellers\n    *   Small Screwdriver\n\n*(Illustrations needed)*\n\n## Assembly Steps (Per Drone x 3)\n\n**Safety First: Propellers installed LAST.**\n\n1.  **Mount Motors:** Insert motors into the Swarm Drone Frame (SDRN-A1). Ensure correct CW/CCW placement if applicable (check diagrams/markings).\n2.  **Mount Flight Controller:** Secure the Swarm FC (SDRN-C1) to the frame, noting orientation.\n3.  **Connect Motors:** Plug motor wires into the FC.\n4.  **Install Prop Guards (Recommended):** Attach guards.\n5.  **Repeat steps 1-4 for all three drones.**\n\n**STOP HERE.** Charge all drone batteries. Proceed to User Guide for Setup, Binding/Pairing, Calibration, and Propeller Installation."}
{"_id": "CB-DRN-003_UG_v1.0", "product_id": "CB-DRN-003", "product_name": "Programmable Swarm Drone Pack (Set of 3)", "doc_type": "User & App Guide", "version": "1.0", "title": "Programmable Swarm Drone Pack User & App Guide", "language": "en-US", "format": "Markdown", "text": "# Programmable Swarm Drone Pack User & App Guide (v1.0)\n\nCoordinate your drone fleet!\n\n## Charging Batteries\n\n*   Charge all three small drone LiPo batteries ([SDRN-B1](/product/SDRN-B1)) using the provided USB charger(s) ([SDRN-CH1](/product/SDRN-CH1)). **Follow LiPo safety rules strictly!**\n\n## Setup & Connection (PC Software Focus)\n\n*   **Install Software:** Install the Kinetic Constructs Swarm Control Center software on your PC.\n*   **Connect Master Controller (if applicable):** Plug in the USB dongle/controller ([SDRN-MC1](/product/SDRN-MC1)) if one is provided.\n*   **Power On Drones:** Insert charged batteries into all three drones and power them on (sequence might matter - e.g., one at a time).\n*   **Launch Software:** Open the Swarm Control Center software.\n*   **Pairing/Discovery:** The software should automatically scan for and discover the powered-on drones via their proprietary Wi-Fi or mesh radio communication. You may need to assign IDs (e.g., Drone 1, Drone 2, Drone 3) within the software.\n    *(Screenshot: Software interface showing discovered drones and status)*\n\n## Software Interface\n\n*   **Drone Status:** Shows connection status, battery level, and potentially basic telemetry (altitude if available) for each drone.\n*   **Manual Control (Optional):** May offer limited manual control of individual drones (takeoff, land, basic movement) for testing, but primary focus is programming.\n*   **Programming Interface:** Section for writing and uploading Python scripts to control the swarm.\n*   **Visualization:** May include a 2D or 3D visualization of the drones' relative positions (estimated based on commands or onboard sensors if advanced).\n*   **Calibration Tools:** Access to initiate IMU calibration for individual drones or the whole swarm.\n\n## Pre-Flight Calibration\n\n*   Place all drones on a flat, level surface.\n*   Use the Swarm Control Center software to initiate IMU calibration for all drones simultaneously or individually.\n\n## **FINAL STEP: Propeller Installation (x3)**\n\n**WARNING: Ensure drones are OFF and batteries DISCONNECTED.**\n\n1.  Install the correct propellers ([SDRN-P1](/product/SDRN-P1)) on each motor of all three drones, matching type to motor rotation.\n2.  Press firmly onto shafts.\n\n## Basic Operation (Programming Focus)\n\n*   These drones are designed primarily for coordinated flight programmed via Python scripts run from the PC software.\n*   Simple test flights (individual takeoff/hover/land) might be possible via software buttons.\n*   Refer to the Python API Reference ([Programmable Swarm Drone Pack Python API Reference](/document/CB-DRN-003_API_v1.0)) for programming details.\n\n## Powering Off\n\n1.  Land all drones (via software command or manual override if possible).\n2.  Disconnect batteries from all three drones.\n3.  Close Swarm Control Center software.\n4.  Unplug Master Controller (if applicable)."}
{"_id": "CB-DRN-003_API_v1.0", "product_id": "CB-DRN-003", "product_name": "Programmable Swarm Drone Pack (Set of 3)", "doc_type": "Python API Reference", "version": "1.0", "title": "Programmable Swarm Drone Pack Python API Reference", "language": "en-US", "format": "Markdown", "text": "# Programmable Swarm Drone Pack Python API Reference (v1.0)\n\nControl multiple drones simultaneously with Python.\n\n## Setup & Connection (PC Software Environment)\n\n*   **Install Library:** The necessary Python library is likely integrated with or installed alongside the Swarm Control Center PC software. `pip install kinetic_constructs_swarm` might be needed if distributed separately.\n*   **Run Scripts from Software:** Python scripts are typically written and executed *from within* the Swarm Control Center environment, which handles the connection to the drones via the master controller/radio.\n\n```python\nfrom kinetic_constructs_swarm import SwarmController, DroneHandle\nimport time\n\n# --- Initialization (Handled by Swarm Control Center) --- \n# Assuming 'sc' is the SwarmController object provided by the environment\nsc = SwarmController() # Or get from environment\n\n# Get handles to the discovered drones (IDs might be 0,1,2 or assigned names)\ndrones = sc.list_drones()\nif len(drones) < 3:\n    print(\"Error: Less than 3 drones detected.\")\n    exit()\n\n# Assign handles for easier access\ndrone0 = drones[0]\ndrone1 = drones[1]\ndrone2 = drones[2]\n\nprint(f\"Controlling Drones: {[d.id for d in drones]}\")\n\n# --- Pre-Flight --- \nprint(\"Calibrating all drones...\")\nsc.calibrate_all()\ntime.sleep(5) # Wait for calibration\n\nprint(\"Taking off all drones...\")\n# Takeoff command can target all drones or individual ones\nsc.takeoff_all(height=0.5) # Take off to 0.5 meters\ntime.sleep(5) # Wait for takeoff and stabilization\n\n```\n\n## Coordinated Flight Commands\n\n*   Commands can often target individual drones, groups, or the entire swarm.\n\n```python\n# --- Individual Control --- \nprint(\"Moving Drone 0 forward\")\ndrone0.move_forward(distance=0.5, speed=0.2)\ntime.sleep(3)\n\n# --- Group Control --- \nprint(\"Rotating Drones 1 and 2\")\nsc.command([drone1, drone2], 'rotate_degrees', angle=90, speed=30)\ntime.sleep(4)\n\n# --- Swarm Control (Relative Formations) --- \nprint(\"Forming a line formation\")\n# Example: Drone 1 stays put, Drone 0 moves left, Drone 2 moves right\n# Relative position commands might exist: move_relative_to(target_drone, dx, dy, dz)\n# Or absolute position commands if system supports localization (unlikely for basic kit)\nsc.command([drone0], 'move_by', dx=-0.3, dy=0, dz=0, speed=0.1)\nsc.command([drone2], 'move_by', dx=0.3, dy=0, dz=0, speed=0.1)\ntime.sleep(4)\n\nprint(\"Moving swarm forward together\")\nsc.move_all_by(dx=0, dy=0.5, dz=0, speed=0.2)\ntime.sleep(3)\n\n# --- Landing --- \nprint(\"Landing all drones...\")\nsc.land_all()\ntime.sleep(5)\n\n# --- Cleanup --- \nprint(\"Disconnecting...\")\nsc.disconnect_all()\n\n```\n\n## API Reference (Conceptual Summary)\n\n*   **SwarmController Object (`sc`):**\n    *   `list_drones()` -> List[DroneHandle]\n    *   `calibrate_all()` / `calibrate([drone_list])`\n    *   `takeoff_all(height)` / `takeoff([drone_list], height)`\n    *   `land_all()` / `land([drone_list])`\n    *   `command([drone_list], command_name, **kwargs)`: Send command to specific drones.\n    *   `move_all_by(dx, dy, dz, speed)`: Move whole swarm relative.\n    *   `rotate_all_by(angle, speed)`\n    *   `disconnect_all()`\n*   **DroneHandle Object (`drone0`, `drone1`, etc.):**\n    *   `id`: Unique identifier.\n    *   `get_battery()` -> int (%)\n    *   `get_status()` -> str\n    *   `move_forward(distance, speed)`\n    *   `move_by(dx, dy, dz, speed)`\n    *   `rotate_degrees(angle, speed)`\n    *   `set_led_color(r, g, b)` (If drones have LEDs)\n\n**Note:** The exact API structure and available commands depend heavily on the specific implementation by Kinetic Constructs. This is a generalized example. Check the Swarm Control Center's documentation for precise details.\nRequires careful planning of relative movements, timing, and collision avoidance in scripts."}
{"_id": "CB-DRN-003_TMG_v1.0", "product_id": "CB-DRN-003", "product_name": "Programmable Swarm Drone Pack (Set of 3)", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.0", "title": "Programmable Swarm Drone Pack Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# Programmable Swarm Drone Pack Troubleshooting & Maintenance (v1.0)\n\n## Troubleshooting Common Issues\n\n*   **(Basic Drone Issues - Uneven Lift, Calibration):** Refer to [Sky Dart Drone Kit Troubleshooting & Maintenance Guide](/document/CB-DRN-001_TMG). Critical to check propeller installation on all drones.\n*   **Software Cannot Detect Drones:**\n    *   Ensure all drones are powered ON with charged batteries.\n    *   Ensure Master Controller USB dongle (if used) is properly connected to PC.\n    *   Check if drones are within radio range of the PC/dongle (can be short range).\n    *   Restart drones one by one, then restart the Swarm Control Center software.\n    *   Check for driver issues with the USB dongle.\n    *   Possible RF interference.\n*   **One Drone Not Responding to Commands:**\n    *   Check battery level of the specific drone in the software.\n    *   Verify it's within radio range.\n    *   Try calibrating that specific drone.\n    *   Power cycle the individual drone.\n    *   Possible hardware fault with that drone's FC or radio.\n*   **Drones Drift / Unstable Flight:**\n    *   Perform IMU calibration for all drones on a very level surface.\n    *   Fly indoors in a draft-free environment. These small drones are highly susceptible to air currents.\n    *   Check propellers for damage on all drones.\n    *   Ensure consistent battery levels across the swarm if possible (though software should compensate).\n*   **Collisions Between Drones:**\n    *   **Programming Error:** The most likely cause. Review swarm logic in Python script for relative movements, timing, and path conflicts.\n    *   **Drift:** Uncorrected drift can lead to collisions even with correct programming.\n    *   **External Factors:** Unexpected air currents.\n    *   Implement larger safety margins and slower speeds in swarm commands initially.\n*   **Short Flight Times:**\n    *   These are small drones with small batteries; expect short flight times (likely 5-8 minutes).\n    *   Ensure all batteries are fully charged.\n\n## Maintenance\n\n*   **Propellers:** Inspect frequently, replace damaged ones (x3 drones = more props to check!).\n*   **Motors:** Keep clean, check for debris.\n*   **Battery Care:** Strictly follow LiPo safety. Manage charging for multiple small batteries.\n*   **Cleaning:** Keep drones clean.\n*   **Software Updates:** Check for updates to the Swarm Control Center software and potentially drone firmware (updates might be pushed via the software)."}
{"_id": "CB-DRN-003_SCS_v1.0", "product_id": "CB-DRN-003", "product_name": "Programmable Swarm Drone Pack (Set of 3)", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "Programmable Swarm Drone Pack Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# Programmable Swarm Drone Pack Safety & Compliance (v1.0)\n\n**WARNING: MULTIPLE DRONES OPERATING SIMULTANEOUSLY INCREASES RISK. Fly with extreme caution.**  \n**Recommended Age: 14+ / Educator / Researcher.** Requires programming skills and understanding of multi-agent systems.\n\n## Lithium Polymer (LiPo) Battery Safety - CRITICAL!\n\n*   Contains multiple small LiPo batteries. Follow ALL LiPo safety guidelines detailed in [Sky Dart Drone Kit Safety & Compliance Sheet](/document/CB-DRN-001_SCS_v1.0) for EACH battery (Charging, Handling, Storage, Disposal).\n\n## Flight Safety\n\n*   **Increased Collision Risk:** Flying multiple drones in close proximity significantly increases the risk of mid-air collisions.  \n    *   ALWAYS test swarm programs in a VERY LARGE, open indoor area (e.g., gymnasium) or outdoors in PERFECTLY CALM conditions, completely away from people/obstacles.  \n    *   Maintain large separation distances initially.  \n    *   Be prepared for unexpected behavior or collisions.  \n*   **Propeller Hazard (x3):** Keep clear of all drones during operation. Disconnect batteries before handling props.  \n*   **Fly Legal & Safe Location:** Follow ALL general drone safety rules (VLOS, altitude, no-fly zones, etc.) as per [Sky Dart Drone Kit Safety & Compliance Sheet](/document/CB-DRN-001_SCS_v1.0) and [Vision Drone Explorer Safety & Compliance Sheet](/document/CB-DRN-002_SCS_v1.0). Apply them to the entire swarm operation.  \n*   **Containment:** Consider using drone netting or a designated, enclosed flight area for swarm experiments, especially indoors.  \n*   **Emergency Stop:** Know how to quickly land ALL drones via the Swarm Control Center software in an emergency.\n\n## RF Exposure\n\n*   Drones and potentially master controller emit radio waves. Maintain appropriate separation distance.\n\n## Compliance Information (Example)\n\n*   Each drone and the master controller will have FCC/IC/CE compliance information.  \n*   FCC ID (Drone): [Example Swarm Drone FC FCC ID]  \n*   FCC ID (Controller): [Example Master Controller FCC ID]  \n*   IC (Drone): [Example Swarm Drone FC IC ID]  \n*   IC (Controller): [Example Master Controller IC ID]  \n*   CE: Conforms to RED, EMC, RoHS.  \n*   Battery Compliance: UN38.3.\n\n**Operating drone swarms requires advanced planning, careful programming, and strict adherence to safety protocols.**  \nStore this sheet for future reference.  \nKinetic Constructs - Building Tomorrow's Play (Safely & Responsibly)."}
{"_id": "CB-HMN-001_AM_v1.0", "product_id": "CB-HMN-001", "product_name": "KinetiBot Prime", "doc_type": "Assembly Manual", "version": "1.0", "title": "KinetiBot Prime Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# KinetiBot Prime Assembly Manual (v1.0)\n\nAssemble the flagship humanoid robot!\n\n## Parts List (Extremely Complex)\n\n*   **Torso & Head:**\n    *   Main Torso Structure (HMN-A1)\n    *   Head Assembly (HMN-A2)\n    *   Waist Rotation Joint/Servo (HMN-A3)\n*   **Legs (x2):**\n    *   Hip Joint Assembly (3 Servos: Yaw, Pitch, Roll) (HMN-L1)\n    *   Thigh Structure (HMN-L2)\n    *   Knee Joint Assembly (1 Servo: Pitch) (HMN-L3)\n    *   Shin Structure (HMN-L4)\n    *   Ankle Joint Assembly (2 Servos: Pitch, Roll) (HMN-L5)\n    *   Foot Structure (HMN-L6)\n*   **Arms (x2):**\n    *   Shoulder Joint Assembly (3 Servos: Yaw, Pitch, Roll) (HMN-R1)\n    *   Upper Arm Structure (HMN-R2)\n    *   Elbow Joint Assembly (1 Servo: Pitch) (HMN-R3)\n    *   Forearm Structure (HMN-R4)\n    *   (Optional: Wrist/Hand Assembly with additional servos)\n*   **Electronics:**\n    *   Humanoid Master Control Board (High Power, Advanced Processor, Wi-Fi/BT) (HMN-C1)\n    *   IMU Sensor Module (Gyro/Accelerometer/Magnetometer) (HMN-C2)\n    *   High-Capacity, High-Discharge LiPo Battery (HMN-B1)\n    *   Power Distribution Board/Regulators (HMN-P1)\n*   **Servos:** 20+ High-Torque, Metal-Geared Digital Servos (HMN-S1)\n*   Servo Horns, Brackets, Linkages Pack\n*   Extensive Screw, Bolt, Nut, Bearing Pack\n*   Wiring Harnesses\n*   Balance Charger\n*   Tools\n\n*(Extremely detailed, multi-view illustrations and potentially video guides required)*\n\n## Assembly Steps (High Level - Expert Assembly)\n\n**Critical:** Servo Centering. Precision assembly. Follow torque specs if provided.\n\n1.  **Build Torso/Waist:** Assemble main torso structure and waist rotation joint.\n2.  **Build Legs (x2):** Assemble each leg, integrating servos at Hip (3), Knee (1), Ankle (2). Attach foot.\n    *(Diagram: Exploded view of one complete leg assembly)*\n3.  **Attach Legs to Torso:** Connect completed legs to the torso/waist structure.\n4.  **Build Arms (x2):** Assemble each arm, integrating servos at Shoulder (3), Elbow (1). (Add wrist/hand if included).\n    *(Diagram: Exploded view of one complete arm assembly)*\n5.  **Attach Arms to Torso:** Connect completed arms to the torso/shoulder mounts.\n6.  **Assemble Head:** Attach head structure to torso (may include neck servos if applicable).\n7.  **Install Electronics:** Carefully mount Master Control Board, IMU Sensor (critical orientation!), Power Distribution Board, and Battery within the torso or designated compartments.\n8.  **Connect Servos:** Meticulously connect all 20+ servos to the correct ports on the Master Control Board using wiring harnesses.\n9.  **Connect IMU & Power:** Connect IMU sensor cable and power system wiring.\n10. **Wire Management:** Extremely important. Route all wires safely, securely, ensuring no pinching or restriction of movement through full joint ranges.\n11. **Attach Body Shells/Covers.**\n\nAssembly is exceptionally complex, time-consuming, and requires significant technical skill. Charge battery fully using balance charger."}
{"_id": "CB-HMN-001_UG_v1.1", "product_id": "CB-HMN-001", "product_name": "KinetiBot Prime", "doc_type": "User & App Guide", "version": "1.1", "title": "KinetiBot Prime User & App Guide", "language": "en-US", "format": "Markdown", "text": "# KinetiBot Prime User & App Guide (v1.1)\n\n## Charging & Power\n\n*   Charge the high-capacity LiPo battery (HMN-B1) using the provided Balance Charger. **Follow LiPo safety rules strictly!**\n*   Power ON/OFF via main switch, likely on the torso/back.\n*   Robot may perform a startup sequence including self-calibration/balancing checks.\n\n## Connecting (Wi-Fi Recommended)\n\n*   **Primary: Wi-Fi:** Use the Kinetic Constructs app (via Bluetooth for initial setup) or PC software to connect KinetiBot Prime to your Wi-Fi network for full functionality (Python control, complex interactions).\n*   **Bluetooth:** For basic app control and setup.\n\n## App / PC Software Controls\n\n*(Screenshot: Advanced interface showing humanoid status, joint control, motion editor)*\n\n*   **Status Display:** Shows battery level, IMU orientation, joint positions, balance status.\n*   **Manual Joint Control:** Sliders/dials to control individual servos (use with caution!).\n*   **Pre-defined Motions:** Buttons to trigger complex actions like:\n    *   Walking (Forward, Backward, Turning)\n    *   Getting Up (from sitting/fallen position)\n    *   Waving, Gesturing\n    *   Balancing routines\n*   **Motion Editor:** Advanced interface (likely PC software) to create custom keyframe animations by posing the robot and saving joint angles over time.\n*   **Python Interface:** Connection details and potentially environment for running Python scripts.\n*   **Calibration & Diagnostics:** Tools to calibrate IMU, check servo status, fine-tune balance parameters.\n\n## Balancing & Walking\n\n*   KinetiBot Prime uses its IMU sensor and complex algorithms running on the Master Control Board to actively balance while standing and walking.\n*   Walking requires careful coordination of leg movements and torso shifts to maintain dynamic stability.\n*   Performance depends heavily on calibration, surface conditions, and battery level.\n\n## Basic Operation\n\n*   Operate on a flat, stable, unobstructed surface.\n*   Avoid sudden pushes or uneven terrain, especially initially.\n*   Start with basic standing and balancing before attempting complex walks or motions.\n*   Be prepared for the robot to fall, especially during testing or on imperfect surfaces. Operate in an area where falls won't cause significant damage."}
{"_id": "CB-HMN-001_BCG_v1.0", "product_id": "CB-HMN-001", "product_name": "KinetiBot Prime", "doc_type": "Block Coding Guide", "version": "1.0", "title": "KinetiBot Prime Block Coding Guide", "language": "en-US", "format": "Markdown", "text": "# KinetiBot Prime Block Coding Guide (v1.0)\n\nProgram high-level actions for your humanoid robot!\n\n## Accessing the Coding Interface\n\n*   Connect via the Kinetic Constructs app (likely Wi-Fi preferred) or potentially dedicated PC software.\n*   Navigate to the 'Code' or 'Motion Programming' section.\n\n## Humanoid Specific Blocks (High-Level Focus)\n\n*   **Motion Command Blocks:**\n    *   `Walk [Forward/Backward/Left/Right] for [Steps/Duration]`\n    *   `Turn [Angle] degrees`\n    *   `Perform Predefined Motion [GetUp/Wave/Bow/Dance]`\n    *   `Move To Pose [Pose Name]` (Poses created in Motion Editor)\n    *   `Stop All Motion`\n*   **Balance & State Blocks:**\n    *   `Enable/Disable Balancing` (Use with extreme caution!)\n    *   `Get Robot Orientation (Pitch/Roll/Yaw)`\n    *   `Get Balance Status` (e.g., Standing, Walking, Falling)\n*   **Joint Control (Limited Recommended Use):**\n    *   `Set Joint [Joint Name] Angle to [degrees]` (May override balancing - use carefully!)\n*   **Timing & Control Blocks:**\n    *   `Wait [seconds]`\n    *   `Repeat`, `If/Else`\n\n## Example Project 1: Walk and Wave\n\n```markdown\nWhen Start:\n  Wait until <Balance Status is Standing>\n  Wait [2] seconds\n  \n  Walk [Forward] for [5] Steps\n  Wait for motion completion // Conceptual block\n  \n  Perform Predefined Motion [Wave]\n  Wait for motion completion\n  \n  Turn [180] degrees\n  Wait for motion completion\n  \n  Walk [Forward] for [5] Steps\n  Wait for motion completion\n  \n  Stop All Motion\n```\n*Description: Makes the robot walk forward 5 steps, wave, turn around, walk back 5 steps, and stop.* \n\n## Example Project 2: Balance Challenge Reaction\n\n```markdown\nWhen Start:\n  Enable Balancing\n  Forever {\n    Pitch = Get Robot Orientation (Pitch)\n    Roll = Get Robot Orientation (Roll)\n    \n    // Simple reaction if tilted too far\n    If abs(Pitch) > 20 or abs(Roll) > 20 then {\n       // Try to regain balance - might need specific 'Regain Balance' block\n       Perform Predefined Motion [Attempt Balance] // Conceptual\n       Wait [1] second \n       // If still tilted, maybe try a 'crouch'?\n       If abs(Get Robot Orientation(Pitch)) > 20 then {\n           Perform Predefined Motion [Crouch] // Safer pose\n       }\n    }\n    Wait [0.1] seconds // Check orientation frequently\n  }\n```\n*Description: Continuously monitors pitch and roll. If the robot tilts significantly, it triggers a conceptual 'Attempt Balance' or 'Crouch' motion. Real balancing logic is far more complex and handled by firmware.* \n\n## Important Considerations\n\n*   **High-Level Abstraction:** Block coding for humanoids typically focuses on commanding pre-programmed, complex motions (walking, getting up) rather than direct joint control, as balancing is critical and handled by underlying firmware.\n*   **Motion Editor:** Creating custom smooth motions often requires using a separate Motion Editor tool (likely PC software) to define keyframes, then triggering those named motions from blocks.\n*   **Safety:** Test programs carefully. Unexpected block combinations could lead to falls. Start simple.\n\n## Running Your Code\n\n*   Build sequence in app/software.\n*   Upload/Run the sequence.\n*   Monitor robot's actions closely."}
{"_id": "CB-HMN-001_API_v1.1", "product_id": "CB-HMN-001", "product_name": "KinetiBot Prime", "doc_type": "Python API Reference", "version": "1.1", "title": "KinetiBot Prime Python API Reference", "language": "en-US", "format": "Markdown", "text": "# KinetiBot Prime Python API Reference (v1.1)\n\nAdvanced Python control for the KinetiBot Prime humanoid.\n\n## Setup & Connection (Wi-Fi Preferred)\n\n*   **Install Library:** `pip install kinetic_constructs_bots`\n*   **Connection:** Connect via Wi-Fi using the robot's IP address.\n\n```python\nfrom kinetic_constructs_bots import KinetiBotPrime\nimport time\n\nrobot_ip = \"192.168.1.170\"\n\ntry:\n    bot = KinetiBotPrime(ip_address=robot_ip)\n    print(\"Connected to KinetiBot Prime!\")\n    # Wait for robot to initialize and stabilize\n    bot.wait_for_stable()\n    print(\"Robot is stable.\")\nexcept ConnectionError as e:\n    print(f\"Failed to connect: {e}\")\n    exit()\nexcept TimeoutError:\n    print(\"Robot did not stabilize in time.\")\n    exit()\n\n```\n\n## High-Level Motion Control\n\n```python\n# --- Walking --- \nprint(\"Walking forward...\")\n# Walk commands might be blocking (wait for completion) or non-blocking\nbot.walk_forward(steps=5, speed=50) # Speed 0-100%\n# bot.wait_for_motion_complete() # If non-blocking\n\nprint(\"Turning...\")\nbot.turn(angle=-90, speed=60) # Negative angle for left turn\n# bot.wait_for_motion_complete()\n\n# Stop ongoing walk\n# bot.stop_walk()\n\n# --- Predefined Motions --- \nprint(\"Waving...\")\nbot.play_motion(\"Wave\") # Name matches motion created in editor\ntime.sleep(bot.get_motion_duration(\"Wave\")) # Wait for motion duration\n\nprint(\"Getting up...\")\n# Ensure robot is fallen before calling get_up\n# if bot.get_status() == 'fallen':\n#     bot.play_motion(\"GetUp\")\n#     bot.wait_for_stable()\n\n```\n\n## Getting Robot State\n\n```python\nstatus = bot.get_status() # e.g., 'standing', 'walking', 'fallen', 'moving'\nprint(f\"Robot Status: {status}\")\n\nbattery_percent = bot.get_battery_level()\nprint(f\"Battery: {battery_percent}%\")\n\n# Get IMU data (orientation)\norientation = bot.get_orientation() # Returns dict {'roll': r, 'pitch': p, 'yaw': y}\nif orientation:\n    print(f\"Orientation: R={orientation['roll']:.1f}, P={orientation['pitch']:.1f}, Y={orientation['yaw']:.1f}\")\n\n# Get individual joint angles (read-only recommended)\njoint_angles = bot.get_joint_angles() # Returns dict {'joint_name': angle, ...}\n# print(f\"Left Knee Angle: {joint_angles.get('L_Knee_Pitch')}\")\n```\n\n## Advanced Control (Use with Caution)\n\n```python\n# --- Direct Joint Control (Can destabilize robot!) --- \n# Use ONLY for specific poses when balancing is maybe disabled or managed\n# bot.set_joint_angle('R_Shoulder_Pitch', -30.0, speed=30)\n# time.sleep(1)\n\n# --- Balance Control --- \n# bot.enable_balance(True/False) # Disabling balance is DANGEROUS\n# balance_params = bot.get_balance_parameters() # Get PID etc.\n# bot.set_balance_parameters({...}) # Modify tuning (Expert use only!)\n```\n\n## Example: Simple Interaction\n\n```python\ntry:\n    print(\"Robot performing introduction...\")\n    bot.play_motion(\"Bow\")\n    time.sleep(bot.get_motion_duration(\"Bow\"))\n    \n    bot.walk_forward(steps=3)\n    # bot.wait_for_motion_complete()\n    \n    bot.play_motion(\"Wave\")\n    time.sleep(bot.get_motion_duration(\"Wave\"))\n    \n    bot.turn(180)\n    # bot.wait_for_motion_complete()\n    \n    bot.walk_forward(steps=3)\n    # bot.wait_for_motion_complete()\n\nexcept KeyboardInterrupt:\n    print(\"Stopping script.\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\nfinally:\n    print(\"Stopping robot motion...\")\n    bot.stop_all_motion() # Ensure robot stops safely\n    # Consider commanding a stable pose like 'crouch' if possible\n    # bot.play_motion(\"Crouch\") \n    bot.disconnect()\n    print(\"Disconnected.\")\n```\n\n## API Reference (Summary)\n\n*   `KinetiBotPrime(ip_address)`\n*   `wait_for_stable(timeout)`\n*   `walk_forward/backward/left/right(steps/duration, speed)`\n*   `turn(angle, speed)`\n*   `stop_walk()` / `stop_all_motion()`\n*   `play_motion(motion_name)`\n*   `get_motion_duration(motion_name)` -> float\n*   `wait_for_motion_complete()`\n*   `get_status()` -> str\n*   `get_battery_level()` -> int\n*   `get_orientation()` -> dict or None\n*   `get_joint_angles()` -> dict or None\n*   `set_joint_angle(joint_name, angle, speed)` (Advanced)\n*   `enable_balance(bool)` (Advanced/Dangerous)\n*   `disconnect()`\n\nConsult full library/SDK documentation for joint naming conventions, motion editor integration, error handling, and advanced features like sensor integration or AI behaviors."}
{"_id": "CB-HMN-001_TMG_v1.2", "product_id": "CB-HMN-001", "product_name": "KinetiBot Prime", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.2", "title": "KinetiBot Prime Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# KinetiBot Prime Troubleshooting & Maintenance (v1.2)\n\n## Troubleshooting Common Issues\n\n*   **(General Connectivity - Wi-Fi/BT, Power Issues):** Refer to previous TMGs ([Arctic Explorer TrackBot Troubleshooting & Maintenance Guide](/document/CB-TRK-002_TMG_v1.0), etc.). Ensure high-power battery is fully charged.\n*   **Robot Fails to Stand / Immediately Falls:**\n    *   **IMU Calibration:** Critical. Perform IMU calibration via app/software on a perfectly level surface.\n    *   **Servo Centering/Zero Position:** Initial assembly errors or drift over time. May require mechanical adjustment or software recalibration of zero positions for multiple joints.\n    *   **Incorrect Assembly:** Double-check entire assembly, especially leg/ankle joints and IMU orientation.\n    *   **Surface:** Ensure surface is flat and non-slippery.\n    *   **Code/Command Error:** Sending incorrect initial pose commands.\n    *   **Hardware Fault:** Faulty IMU, servo, or control board.\n*   **Unstable Walking / Frequent Falls:**\n    *   **Calibration:** IMU and joint zero positions.\n    *   **Surface:** Try different surfaces.\n    *   **Gait Parameters:** Walking speed or step height/length might be too aggressive for the surface or current balance ability. Try slower speeds or different pre-defined gaits.\n    *   **Loose Mechanics:** Check for loose screws/bolts in legs, ankles, hips. Backlash can severely impact balance.\n    *   **Low Battery:** Balance and walking require significant power; performance degrades rapidly with low battery.\n    *   **Balance Tuning (Expert):** PID or other balance control parameters in firmware/software may need tuning (requires deep understanding).\n*   **Specific Joint Malfunction:**\n    *   Check servo connection.\n    *   Check for mechanical binding or obstruction.\n    *   Ensure servo horn is secure.\n    *   Possible faulty servo (requires careful replacement).\n*   **Overheating:**\n    *   Continuous complex motion generates significant heat in servos and control board.\n    *   Ensure adequate ventilation. Do not block vents on torso.\n    *   Allow cooling periods.\n*   **Software/Firmware Glitches:**\n    *   Ensure robot firmware and control software/app are updated to latest versions.\n    *   Restart robot and control software.\n\n## Maintenance\n\n*   **Cleaning:** Keep clean, dust-free. Use compressed air. Avoid liquids.\n*   **Bolt/Screw Tightness:** EXTREMELY important. Regularly check tightness of all structural bolts and servo horn screws throughout the robot.\n*   **Wiring Inspection:** Periodically inspect the complex wiring harness for any damage, especially near joints.\n*   **Battery Care:** Strictly follow LiPo safety and balance charging. High-capacity batteries require careful handling.\n*   **Joint Mechanics:** Check for excessive play/backlash in joints. May require tightening or eventual replacement of worn parts/bearings.\n*   **Calibration:** Perform IMU and potentially joint zero calibration periodically.\n*   **Firmware Updates:** Stay updated."}
{"_id": "CB-HMN-001_SCS_v1.0", "product_id": "CB-HMN-001", "product_name": "KinetiBot Prime", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "KinetiBot Prime Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# KinetiBot Prime Safety & Compliance (v1.0)\n\n**WARNING: ADVANCED ROBOTIC SYSTEM. HIGH RISK of injury or damage if misused. NOT a toy.**  \n**Recommended Age: 14+ / Advanced Hobbyist / Educator / Researcher.** Requires expertise in robotics, programming, and safety.\n\n## Lithium Polymer (LiPo) Battery Safety - CRITICAL!\n\n*   Contains a high-capacity, high-discharge LiPo battery. Follow ALL LiPo safety guidelines (Charging with BALANCE CHARGER, Handling, Storage, Disposal) as detailed in [Sky Dart Drone Kit Safety & Compliance Sheet](/document/CB-DRN-001_SCS_v1.0). Risk of fire or explosion if mishandled.\n\n## Mechanical & Operational Safety\n\n*   **Significant Pinch/Crush Hazard:** Robot has numerous powerful joints (20+ servos). Keep hands, fingers, hair, clothing, tools, and objects WELL CLEAR during operation.\n*   **Impact/Collision Hazard:** Robot is heavy and can move unexpectedly. Maintain a large safe operating zone around the robot. Prevent unintended access by untrained individuals or pets.\n*   **Falling Hazard:** The robot WILL fall during operation, especially during development or on imperfect surfaces. Operate in an area where falls will not cause injury or damage to the robot or surroundings. Consider padded flooring.\n*   **Stability:** Never rely on the robot remaining stable. Be prepared for sudden loss of balance.\n*   **Lifting/Handling:** Robot is heavy. Use proper lifting techniques. Do NOT lift by limbs. Power OFF before moving.\n*   **Emergency Stop:** Know how to activate emergency stop (via software/API) or quickly disconnect main power in case of malfunction.\n*   **Overheating:** Servos and electronics can get very hot. Handle with caution after operation.\n\n## Electrical Safety\n\n*   Use ONLY the specified power supply/charger.\n*   Keep liquids away.\n*   Disconnect power before maintenance unless required by procedure.\n\n## RF Exposure (Wi-Fi/Bluetooth)\n\n*   Contains radio transmitters. Maintain >20cm distance.\n\n## Compliance Information (Example)\n\n*   Likely subject to Machinery Directive, EMC, RoHS in EU. FCC Part 15/18 in US.\n*   FCC ID: [Example Humanoid Board FCC ID]\n*   IC: [Example Humanoid Board IC ID]\n*   CE Declaration of Conformity available separately.\n*   Battery UN38.3 certified.\n\n**Safe operation requires constant vigilance, adherence to procedures, and respect for the robot's capabilities and hazards.**  \nStore this sheet for future reference.  \nKinetic Constructs - Building Tomorrow's Play (Safely & Responsibly)."}
{"_id": "CB-BB-001_AM_v1.0", "product_id": "CB-BB-001", "product_name": "BattleBot Arena Starter Set (2 Bots)", "doc_type": "Assembly Manual", "version": "1.0", "title": "BattleBot Arena Starter Set Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# BattleBot Arena Starter Set Assembly Manual (v1.0)\n\nBuild your bots and prepare for battle!\n\n## Parts List (Per Bot x 2, plus Arena)\n\n*   **Per Bot (x2):**\n    *   1x Battle Bot Chassis (BB-A1 - maybe different colors)\n    *   2x Drive Motors (BB-M1)\n    *   4x Wheels (BB-W1)\n    *   1x Bot Main Board (Receiver/Motor Driver) (BB-C1)\n    *   1x Battery Box (AA Batteries) (BB-B1)\n    *   1x Weapon Mount Point\n    *   Set of Weapon Parts (e.g., Flipper Arm, Pusher Plate) (BB-WP1)\n    *   Assorted Screws\n*   **Common Items:**\n    *   2x IR Remote Controllers (BB-R1)\n    *   1x Foldable Mini Arena Walls Set (BB-ARENA1)\n    *   Sticker Sheet (for customization)\n    *   Small Screwdriver\n\n*(Illustrations needed)*\n\n## Assembly Steps (Per Bot x 2)\n\n1.  **Mount Motors:** Attach Drive Motors (BB-M1) to the Chassis (BB-A1).\n2.  **Attach Wheels:** Push Wheels (BB-W1) onto motor axles.\n3.  **Mount Main Board:** Secure Bot Main Board (BB-C1) onto chassis.\n4.  **Connect Motors:** Plug motor wires into the board.\n5.  **Mount Battery Box:** Attach Battery Box (BB-B1) and connect to board.\n6.  **Assemble Weapon:** Choose weapon parts (Flipper or Pusher) and assemble onto the Weapon Mount Point. Flipper might involve simple pivot, Pusher bolts on directly.\n    *(Diagram: Show assembly of both flipper and pusher options)*\n7.  **Install Batteries (Bot):** Insert required AA batteries (not included) into Battery Box, observing polarity.\n8.  **Apply Stickers (Optional):** Customize your bot!\n9.  **Repeat for second bot.**\n\n## Arena Assembly\n\n1.  Unfold the Arena Walls (BB-ARENA1).\n2.  Connect wall sections together using provided clips or tabs to form the arena boundary.\n    *(Diagram: Show arena setup)*\n\nAssembly Complete! Install batteries in remotes."}
{"_id": "CB-BB-001_UG_v1.0", "product_id": "CB-BB-001", "product_name": "BattleBot Arena Starter Set (2 Bots)", "doc_type": "User Guide", "version": "1.0", "title": "BattleBot Arena Starter Set User Guide", "language": "en-US", "format": "Markdown", "text": "# BattleBot Arena Starter Set User Guide (v1.0)\n\nLet the battles begin!\n\n## Getting Started\n\n1.  **Install Batteries (Remotes):** Insert required AAA batteries (not included) into both IR Remotes (BB-R1).\n2.  **Power On Bots:** Ensure batteries are in both bots. Turn ON the power switch on each bot.\n3.  **Place Bots in Arena:** Put both assembled bots inside the assembled arena.\n\n## Remote Controls\n\n*(Diagram: Show IR Remote layout)*\n\n*   **Left Stick (or Buttons):** Controls Left Wheels (Forward/Backward).\n*   **Right Stick (or Buttons):** Controls Right Wheels (Forward/Backward).\n*   **Driving:** Use tank-style steering:\n    *   Both Sticks Forward = Move Straight Forward\n    *   Both Sticks Backward = Move Straight Backward\n    *   Left Stick Forward, Right Stick Backward = Spin Right\n    *   Right Stick Forward, Left Stick Backward = Spin Left\n*   **Weapon Button:** (If included) Press designated button to activate the simple weapon (e.g., trigger a quick flip - mechanism is usually very basic).\n\n## Gameplay (Suggested Rules)\n\n*   **Objective:** Push the opponent's bot out of the arena OR flip them over (if using flipper weapon).\n*   **Start:** Bots start in opposite corners.\n*   **Match Time:** Set a time limit (e.g., 2 minutes).\n*   **Winner:** The bot remaining in the arena or upright at the end of time wins. Or first to push/flip opponent wins.\n*   **No Active Weapons Outside Arena.**\n\n## Tips\n\n*   IR remotes require line of sight to the bot's IR receiver (usually on the main board).\n*   Keep battles inside the arena to prevent bots driving off tables.\n*   Experiment with different driving strategies (ramming, flanking).\n\n## Powering Off\n\n*   Turn OFF power switch on both bots.\n*   Remove batteries if storing for long periods."}
{"_id": "CB-BB-001_TMG_v1.0", "product_id": "CB-BB-001", "product_name": "BattleBot Arena Starter Set (2 Bots)", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.0", "title": "BattleBot Arena Starter Set Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# BattleBot Arena Starter Set Troubleshooting & Maintenance (v1.0)\n\n## Troubleshooting Common Issues\n\n*   **Bot Won't Turn On:**\n    *   Check bot batteries (freshness, correct installation, polarity).\n    *   Check battery box connection to main board.\n    *   Ensure power switch is ON.\n*   **Remote Not Controlling Bot:**\n    *   Check remote batteries.\n    *   Ensure bot is turned ON.\n    *   Check line of sight between remote and bot's IR receiver.\n    *   Make sure you are using the correct remote for the bot (if they operate on different channels - usually not for simple IR sets).\n    *   Strong sunlight/fluorescent light interference.\n*   **One Side/Wheel Not Moving:**\n    *   Check motor wire connection to the main board for that side.\n    *   Check wheel is pushed on fully and not blocked by debris.\n    *   Possible motor failure.\n*   **Weapon Not Working:**\n    *   Check if weapon button on remote functions.\n    *   Check weapon mechanism on bot for obstruction or breakage (parts are simple, may break in battle).\n    *   If weapon uses a separate small motor/servo (unlikely for starter set), check its connection.\n*   **Bots Interfere With Each Other's Remotes:**\n    *   Simple IR systems may use the same codes. Try to keep remotes pointed directly at their respective bots.\n\n## Maintenance\n\n*   **Cleaning:** Wipe bots clean after battles. Remove debris from wheels/axles.\n*   **Battery Care:** Use fresh batteries for best performance. Remove batteries during storage.\n*   **Damage Check:** Inspect bots for damage after battles (cracked chassis, broken weapon parts). Simple repairs might be possible with glue, or replacement parts may be needed (check availability).\n*   **Arena Care:** Wipe arena clean. Fold carefully for storage."}
{"_id": "CB-BB-001_SCS_v1.0", "product_id": "CB-BB-001", "product_name": "BattleBot Arena Starter Set (2 Bots)", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "BattleBot Arena Starter Set Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# BattleBot Arena Starter Set Safety & Compliance (v1.0)\n\n**WARNING: CHOKING HAZARD -- Small parts. Not for children under 3 years.**  \n**Recommended Age: 8+** Adult supervision recommended.\n\n## Battery Safety Instructions (AA/AAA)\n\n*   Follow standard non-rechargeable battery safety guidelines (correct type/polarity, don't mix old/new, remove when exhausted/storing) as detailed in [RoverBot Starter Kit Safety & Compliance Sheet](/document/CB-WHL-001_SCS_v1.0).\n\n## General Safety\n\n*   Keep fingers, hair, clothing away from moving wheels and simple weapon mechanisms.\n*   Conduct battles INSIDE the provided arena on a stable surface (e.g., floor or large table) to prevent bots falling.\n*   Do not throw bots or intentionally crash them into hard surfaces outside the arena.\n*   While weapons are simple, avoid pointing flippers towards eyes at close range.\n*   Do not immerse bots or remotes in water.\n\n## Compliance Information (Example)\n\n*   Conforms to safety requirements of ASTM F963.\n*   FCC Part 15 compliant (for IR remotes).\n*   CE Mark.\n\nStore this sheet for future reference.\nKinetic Constructs - Building Tomorrow's Play."}
{"_id": "CB-BB-002_AM_v1.1", "product_id": "CB-BB-002", "product_name": "Programmable BattleBot Pro", "doc_type": "Assembly Manual", "version": "1.1", "title": "Programmable BattleBot Pro Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# Programmable BattleBot Pro Assembly Manual (v1.1)\n\nBuild and customize your advanced battle robot!\n\n## Parts List\n\n*   1x Pro Battle Chassis (Metal/Durable Plastic) (PBB-A1)\n*   2x High-Torque Drive Motors w/ Gearbox (PBB-M1)\n*   4x Durable Wheels (PBB-W1)\n*   1x Pro Bot Control Board (Processor, Motor Drivers, Servo Ports, Bluetooth) (PBB-C1)\n*   1x Rechargeable Battery Pack (LiPo or NiMH) (PBB-B1)\n*   1x Weapon Servo (High Torque, Metal Gear) (PBB-S1)\n*   Modular Weapon System Parts:\n    *   Flipper Arm Set (PBB-WF1)\n    *   Spinner Disk Set (Horizontal/Vertical Option?) (PBB-WS1) - Requires dedicated weapon motor if spinner\n    *   Axe/Hammer Set (PBB-WH1)\n*   Weapon Mounting Brackets & Linkages\n*   Armor Plate Set (Optional/Included) (PBB-ARM1)\n*   Assorted Screws, Bolts, Nuts\n*   USB Charging Cable\n*   Tools\n\n*(Illustrations essential, showing different weapon builds)*\n\n## Assembly Steps\n\n**Safety First: Disconnect battery when working on internals. Handle LiPo battery carefully.**\n\n1.  **Mount Drive Motors:** Secure High-Torque Motors (PBB-M1) to the Chassis (PBB-A1).\n2.  **Attach Wheels:** Mount Wheels (PBB-W1) to motor shafts.\n3.  **Mount Control Board:** Secure Pro Bot Control Board (PBB-C1) onto chassis.\n4.  **Connect Drive Motors:** Plug motor wires into drive motor ports on the board.\n5.  **Install Battery:** Secure Battery Pack (PBB-B1) and connect to board power input.\n6.  **Assemble & Mount Weapon:**\n    *   **Choose Weapon Type:** (Flipper, Spinner, Hammer)\n    *   **Mount Weapon Servo/Motor:** Attach Weapon Servo (PBB-S1) or dedicated weapon motor (if spinner) to the chassis using appropriate brackets.\n    *   **Assemble Weapon Mechanism:** Connect flipper arm/linkage, spinner disk/hub, or hammer/axe arm to the servo/motor output.\n    *   *(Diagrams: Separate detailed views for assembling Flipper, Spinner, Hammer options)*\n7.  **Connect Weapon Servo/Motor:** Plug weapon servo/motor into designated port on the control board.\n8.  **Attach Armor Plates (Optional):** Secure armor plates (PBB-ARM1) to chassis.\n9.  **Wire Management:** Secure all wires away from moving parts.\n\nAssembly Complete. Charge battery."}
{"_id": "CB-BB-002_UG_v1.0", "product_id": "CB-BB-002", "product_name": "Programmable BattleBot Pro", "doc_type": "User & App Guide", "version": "1.0", "title": "Programmable BattleBot Pro User & App Guide", "language": "en-US", "format": "Markdown", "text": "# Programmable BattleBot Pro User & App Guide (v1.0)\n\nUnleash programmable combat strategies!\n\n## Charging & Power\n\n*   Charge the rechargeable battery pack (PBB-B1) using the provided USB cable (or dedicated charger if LiPo). **Follow battery safety guidelines (LiPo or NiMH).**\n*   Power ON/OFF via main switch on the bot.\n\n## Connecting to the App\n\n*   Connect via Bluetooth using the Kinetic Constructs app.\n\n## App Controls - Drive & Weapon\n\n*(Screenshot: App interface with drive controls and weapon activation button)*\n\n*   **Drive Controls:** Virtual joysticks for tank-style steering.\n*   **Weapon Control:** Dedicated button(s) to activate the weapon servo/motor (e.g., Fire Flipper, Spin Up/Down, Swing Hammer).\n*   **Customization:** App may allow configuration of weapon speed, servo limits, etc.\n\n## App Controls - Block Coding & Python\n\n*   Access block coding interface to program autonomous or semi-autonomous strategies.\n*   App provides connection info/environment for Python control (Bluetooth Serial or Wi-Fi if board supports it).\n\n## Basic Operation\n\n*   Designed for more robust combat than the starter set.\n*   Weapons (especially spinners) can be dangerous. Operate ONLY within a suitable, enclosed battle arena.\n*   Practice driving and weapon timing.\n\n## Battle Safety\n\n*   **USE A PROPER BATTLE ARENA:** Requires a sturdy, fully enclosed arena (polycarbonate recommended) to contain debris and prevent bots from exiting unpredictably.\n*   **EYE PROTECTION:** Mandatory for anyone near the arena during operation.\n*   **REMOTE KILL SWITCH:** Ensure app/remote has a reliable way to disable robot movement and weapons instantly.\n*   **WEAPON LOCKS:** Use physical safety locks for transport/maintenance, especially for spinners.\n*   See Safety Sheet for more details."}
{"_id": "CB-BB-002_BCG_v1.0", "product_id": "CB-BB-002", "product_name": "Programmable BattleBot Pro", "doc_type": "Block Coding Guide", "version": "1.0", "title": "Programmable BattleBot Pro Block Coding Guide", "language": "en-US", "format": "Markdown", "text": "# Programmable BattleBot Pro Block Coding Guide (v1.0)\n\nCode your bot's battle tactics!\n\n## Accessing the Coding Interface\n\n*   Connect via the Kinetic Constructs app ('Code' section).\n\n## BattleBot Blocks\n\n*   **Drive Blocks:**\n    *   `Set Left Motor Speed [-100 to 100]%`\n    *   `Set Right Motor Speed [-100 to 100]%`\n    *   `Drive Forward/Backward/Spin for [seconds]`\n*   **Weapon Blocks:**\n    *   `Activate Weapon` (Generic trigger)\n    *   `Set Flipper [Up/Down]` (If flipper)\n    *   `Set Hammer [Swing/Retract]` (If hammer)\n    *   `Set Spinner Speed [Percent/RPM]` (If spinner)\n    *   `Deactivate Weapon` or `Stop Weapon Motor`\n*   **Sensor Blocks (Optional - if sensors added):**\n    *   `Get Distance (cm)` (If Ultrasonic added)\n    *   `Is Bumper Pressed?` (If bump sensors added)\n*   **Timing & Control:**\n    *   `Wait [seconds]`\n    *   `Repeat`, `If/Else`\n\n## Example Project 1: Charge and Flip\n\n```markdown\nWhen Start:\n  // Wait for signal or timer?\n  Wait [3] seconds \n  \n  // Charge forward\n  Set Left Motor Speed [100]%\n  Set Right Motor Speed [100]%\n  Wait [1.5] seconds \n  \n  // Assume contact is made, fire flipper\n  Set Flipper [Up] \n  Wait [0.5] seconds // Wait for flip\n  Set Flipper [Down] // Retract flipper\n  \n  // Back up slightly\n  Set Left Motor Speed [-50]%\n  Set Right Motor Speed [-50]%\n  Wait [0.8] seconds\n  \n  // Stop\n  Set Left Motor Speed [0]%\n  Set Right Motor Speed [0]%\n```\n*Description: A simple autonomous routine: wait, charge forward, fire flipper, back up. Relies on timing, no sensor input.* \n\n## Example Project 2: Spin Up and Patrol (Spinner Weapon)\n\n```markdown\nWhen Start:\n  Set Spinner Speed [100]% // Spin up weapon\n  Wait [5] seconds // Allow time to reach speed\n  \n  // Simple patrol pattern\n  Forever {\n    Drive Forward for [2] seconds\n    Wait [2] seconds\n    Spin Left for [1] second\n    Wait [1] second\n  }\n```\n*Description: Spins up the weapon and then drives in a repeating forward-and-turn pattern. CAUTION: Autonomous movement with active spinner is dangerous.* \n\n## Strategies & Considerations\n\n*   **Autonomous Mode:** Program full routines triggered at match start.\n*   **Semi-Auto Mode:** Program reactions triggered by remote button presses (e.g., press button 1 executes 'Charge and Flip').\n*   **Sensor Integration:** Adding sensors (distance, bumpers) allows for more intelligent reactions (e.g., fire weapon only when opponent is close).\n*   **Power Management:** Weapons can draw significant power. Code needs to manage battery life.\n*   **Safety:** Test autonomous code EXTREMELY carefully within a secure arena.\n\n## Running Your Code\n\n*   Build code in app.\n*   Upload to bot.\n*   Trigger execution (at match start or via remote).\n*   Have emergency stop ready!"}
{"_id": "CB-BB-002_API_v1.0", "product_id": "CB-BB-002", "product_name": "Programmable BattleBot Pro", "doc_type": "Python API Reference", "version": "1.0", "title": "Programmable BattleBot Pro Python API Reference", "language": "en-US", "format": "Markdown", "text": "# Programmable BattleBot Pro Python API Reference (v1.0)\n\nControl drive, weapons, and strategy with Python.\n\n## Setup & Connection (Bluetooth Serial / Wi-Fi)\n\n*   **Install Library:** `pip install kinetic_constructs_bots`\n*   **Connection:** Via Bluetooth Serial Port Profile (SPP) or Wi-Fi if supported by the Pro Control Board.\n\n```python\nfrom kinetic_constructs_bots import BattleBotPro\nimport time\n\n# --- Bluetooth Serial Example --- \n# serial_port = \"COM7\" \n# try:\n#     bot = BattleBotPro(connection_method='serial', port=serial_port, baudrate=115200)\n#     print(\"Connected via Bluetooth Serial!\")\n# except ConnectionError as e:\n#     print(f\"Failed to connect: {e}\")\n#     exit()\n\n# --- Wi-Fi Example (If Supported) --- \nbot_ip = \"192.168.1.175\"\ntry:\n    bot = BattleBotPro(connection_method='wifi', ip_address=bot_ip)\n    print(\"Connected via Wi-Fi!\")\nexcept ConnectionError as e:\n    print(f\"Failed to connect: {e}\")\n    exit()\n\n```\n\n## Drive Control\n\n```python\n# Direct motor control (-100 to 100)\nbot.set_motor_speeds(left=80, right=80) # Forward\ntime.sleep(1)\n\nbot.set_motor_speeds(left=-60, right=60) # Spin\ntime.sleep(0.5)\n\nbot.stop_motors()\n\n# Higher level functions might exist\n# bot.drive(speed=75, duration=2)\n# bot.spin(direction='cw', speed=70, duration=1)\n```\n\n## Weapon Control\n\n*   Commands depend on the weapon type configured/detected.\n\n```python\n# --- Flipper Example --- \n# bot.set_weapon_config('flipper') # If configuration needed\nbot.activate_weapon(action='up') # Or bot.flipper_up()\ntime.sleep(0.3)\nbot.activate_weapon(action='down') # Or bot.flipper_down()\n\n# --- Hammer Example --- \n# bot.set_weapon_config('hammer')\nbot.activate_weapon(action='swing') # Or bot.hammer_swing()\ntime.sleep(0.6)\nbot.activate_weapon(action='retract') # Or bot.hammer_retract()\n\n# --- Spinner Example --- \n# bot.set_weapon_config('spinner')\nbot.set_weapon_speed(100) # Spin up to 100%\ntime.sleep(5) # Wait to spin up\n# ...battle logic...\nbot.set_weapon_speed(0) # Spin down\n\n# --- Generic Activation --- \n# bot.activate_weapon(duration=0.5) # Simple timed activation\n```\n\n## Sensor Reading (If Optional Sensors Added)\n\n```python\n# distance = bot.get_distance() # Ultrasonic\n# if distance is not None and distance < 30:\n#     print(\"Opponent nearby!\")\n\n# bumper_state = bot.get_bumper_state() # {'left': False, 'right': True}\n# if bumper_state and bumper_state['front']:\n#     print(\"Front impact!\")\n```\n\n## Example: Autonomous Ram & Flip\n\n```python\ntry:\n    print(\"Waiting for start...\")\n    time.sleep(3)\n    \n    print(\"Charging!\")\n    bot.set_motor_speeds(100, 100)\n    time.sleep(1.5) # Drive forward\n    bot.stop_motors() # Stop briefly for aiming/impact\n    \n    print(\"Flip!\")\n    bot.activate_weapon(action='up')\n    time.sleep(0.4)\n    bot.activate_weapon(action='down')\n    \n    print(\"Retreating...\")\n    bot.set_motor_speeds(-60, -60)\n    time.sleep(1)\n    bot.stop_motors()\n\nexcept KeyboardInterrupt:\n    print(\"Stopping.\")\nfinally:\n    bot.stop_motors()\n    bot.set_weapon_speed(0) # Ensure spinner stops if used\n    bot.disconnect()\n```\n\n## API Reference (Summary)\n\n*   `BattleBotPro(connection_method, port/ip_address, ...)`\n*   `set_motor_speeds(left, right)`\n*   `stop_motors()`\n*   `set_weapon_config(type)` (Optional)\n*   `activate_weapon(...)` (Specific actions depend on type)\n*   `set_weapon_speed(speed)` (For spinners)\n*   `get_distance()` -> float or None\n*   `get_bumper_state()` -> dict or None\n*   `get_battery_level()` -> float or None\n*   `disconnect()`\n\nConsult library documentation for exact weapon commands and sensor functions."}
{"_id": "CB-BB-002_TMG_v1.1", "product_id": "CB-BB-002", "product_name": "Programmable BattleBot Pro", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.1", "title": "Programmable BattleBot Pro Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# Programmable BattleBot Pro Troubleshooting & Maintenance (v1.1)\n\nKeep your Pro Bot battle-ready!\n\n## Troubleshooting Common Issues\n\n*   **(General Power/Connectivity Issues):** Refer to base robot TMGs ([All-Terrain Explorer Bot](/product/CB-WHL-002)/[Tank Treads Bot](/product/CB-TRK-002) style). Ensure battery (LiPo/NiMH) is charged and connected securely.\n*   **Drive Motor Issues (One side not working, etc.):**\n    *   Check motor connections to Pro Control Board.\n    *   Inspect gears (if accessible) for damage/debris.\n    *   Check wheel mounting.\n    *   Possible motor or control board driver failure.\n*   **Weapon Not Actuating / Weak Actuation:**\n    *   **Servo Weapon (Flipper/Hammer):** Check servo connection. Ensure servo horn/linkage is secure and not stripped. Check for mechanical binding. Ensure servo has sufficient torque (battery charged). Possible faulty servo.\n    *   **Motor Weapon (Spinner):** Check weapon motor connection. Ensure motor spins freely when off. Check battery power (spinners draw high current). Check coupling between motor and weapon. Possible faulty motor or speed controller (if separate/on board).\n*   **Code Not Running Correctly / Unexpected Behavior:**\n    *   Verify code logic in blocks or Python.\n    *   Ensure correct commands are being sent for the installed weapon type.\n    *   Check timing (`Wait`) blocks - may need adjustment.\n    *   Check sensor logic if sensors are used.\n    *   Ensure bot firmware and control software/library are up to date.\n*   **Bot Damaged During Battle:**\n    *   Inspect chassis, armor, wheels, weapon for cracks or breaks.\n    *   Check internal components (board, battery, wires) for damage or loose connections.\n    *   Replace damaged parts as needed (check part availability).\n\n## Maintenance (Crucial for Battle Bots)\n\n*   **Post-Battle Inspection:** ALWAYS inspect the bot thoroughly after every battle, even if it seems undamaged.\n    *   Check screw/bolt tightness everywhere (chassis, motors, weapon mounts, armor).\n    *   Inspect weapon for sharpness (if applicable), damage, secure mounting.\n    *   Check wheels for damage and secure fit.\n    *   Look for wire damage (cuts, pinching).\n    *   Check battery connector and battery itself for any signs of damage.\n*   **Battery Care:** Follow safety guidelines for LiPo/NiMH. Recharge promptly after use. Inspect for damage.\n*   **Weapon Maintenance:**\n    *   **Spinners:** Ensure secure mounting, check for balance issues (vibration), potentially sharpen (with appropriate safety gear and skill).\n    *   **Flippers/Hammers:** Check linkage integrity, servo horn tightness, lubricate pivots if necessary.\n*   **Cleaning:** Keep internals free of battle debris (metal shavings, plastic bits). Clean wheels/tracks.\n*   **Spare Parts:** Keep common spares on hand (screws, possibly weapon parts, wheels) for quick repairs during events."}
{"_id": "CB-BB-002_SCS_v1.0", "product_id": "CB-BB-002", "product_name": "Programmable BattleBot Pro", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "Programmable BattleBot Pro Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# Programmable BattleBot Pro Safety & Compliance (v1.0)\n\n**WARNING: HIGH POWER ROBOTIC COMBAT DEVICE. Significant risk of injury or property damage if safety procedures are ignored.**  \n**Recommended Age: 12+** REQUIRES adult supervision and operation within approved safety enclosures.\n\n## Battery Safety (LiPo / NiMH)\n\n*   Follow specific safety guidelines for the battery type used (LiPo detailed in [Sky Dart Drone Kit Safety & Compliance Sheet](/document/CB-DRN-001_SCS_v1.0), NiMH requires care against short circuits, proper charging). Use only the specified charger.\n\n## Battle Arena Safety - MANDATORY\n\n*   **NEVER operate outside a fully enclosed, robust safety arena.** Arena walls must be high enough and strong enough (e.g., thick polycarbonate) to contain bots and flying debris from weapon impacts.\n*   Ensure arena floor is clear and suitable.\n*   Keep spectators at a safe distance from the arena.\n\n## Personal Protective Equipment (PPE)\n\n*   **EYE PROTECTION (Safety Glasses/Goggles) is MANDATORY** for anyone operating or near the arena during robot operation.\n\n## Weapon Safety\n\n*   **Spinning Weapons:** Extremely dangerous. Can cause severe lacerations or launch debris at high speed.\n    *   Always use physical weapon safety locks when not actively competing.\n    *   Ensure spinner is balanced to minimize vibration.\n    *   Allow spinners to come to a COMPLETE stop before approaching the robot.\n*   **Flippers/Hammers:** Can exert significant force. Keep hands and body clear of weapon path.\n\n## Operational Safety\n\n*   **Remote Kill Switch / Failsafe:** Ensure the control system (app/remote/software) has a reliable, easily accessible way to immediately disable drive motors and weapon power.\n*   **Power Off:** Always turn off the main power switch on the bot AND disconnect the battery before handling, performing maintenance, or removing from the arena.\n*   **Clear Communication:** Operators should clearly announce powering on/off, activating weapons, etc.\n*   **Hands Out:** Never reach into the arena while bots are active.\n*   **Transport:** Secure the bot safely for transport, with battery disconnected and weapon locks engaged.\n\n## RF Exposure (Bluetooth / Wi-Fi)\n\n*   Maintain >20cm distance if applicable.\n\n## Compliance Information (Example)\n\n*   May not fall under standard toy regulations due to power/hazard levels.\n*   FCC/IC/CE compliance for radio modules (Bluetooth/Wi-Fi).\n*   Battery compliance (UN38.3 for LiPo).\n\n**Robot combat is an inherently dangerous activity. Prioritize safety above all else.**  \nStore this sheet for future reference.  \nKinetic Constructs - Building Tomorrow's Play (Safely & Responsibly).\n"}
{"_id": "CB-ANM-001_AM_v1.0", "product_id": "CB-ANM-001", "product_name": "Robo-Pup Companion Bot", "doc_type": "Assembly Manual", "version": "1.0", "title": "Robo-Pup Companion Bot Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# Robo-Pup Companion Bot Assembly Manual (v1.0)\n\nBuild your friendly robotic dog!\n\n## Parts List\n\n*   1x Main Body Shell (Top & Bottom) (RPUP-A1, RPUP-A2)\n*   4x Leg Assemblies (Pre-assembled or requiring servo attachment) (RPUP-L1)\n*   4x Paw/Feet Covers (RPUP-L2)\n*   1x Head Assembly (with possible neck servo) (RPUP-H1)\n*   1x Tail Assembly (with possible wag servo) (RPUP-T1)\n*   4-6x Servos (Legs, Neck, Tail) (RPUP-S1)\n*   1x Robo-Pup Control Board (Sound, Mic, Touch Sensors, Bluetooth) (RPUP-C1)\n*   1x Touch Sensor Module (Head/Back) (RPUP-C2)\n*   1x Microphone Module (RPUP-C3)\n*   1x Speaker Module (RPUP-C4)\n*   1x Rechargeable Battery Pack (RPUP-B1)\n*   Assorted Screws, Servo Horns\n*   USB Charging Cable\n*   Screwdriver\n\n*(Illustrations needed)*\n\n## Assembly Steps (Moderate Complexity)\n\n1.  **Prepare Body:** Open Main Body Shell (RPUP-A1/A2).\n2.  **Mount Leg Servos/Assemblies:** Attach leg servos (if not pre-assembled) or complete leg assemblies (RPUP-L1) to the designated points on the lower body shell.\n3.  **Mount Head/Neck Servo:** Attach neck servo (if included) and Head Assembly (RPUP-H1) to the front of the body.\n4.  **Mount Tail Servo/Assembly:** Attach tail servo (if included) and Tail Assembly (RPUP-T1) to the rear.\n5.  **Mount Control Board & Battery:** Secure the Control Board (RPUP-C1) and Battery (RPUP-B1) inside the body.\n6.  **Mount Sensors/Speaker:** Install Touch Sensor (RPUP-C2) (e.g., under top shell), Microphone (RPUP-C3) (near head), and Speaker (RPUP-C4) in their designated spots.\n7.  **Connect Components:**\n    *   Plug in all servo cables (Legs, Neck, Tail) to the board.\n    *   Connect Touch Sensor, Microphone, and Speaker cables to the board.\n    *   Connect Battery to the board.\n8.  **Wire Management:** Neatly route wires inside the body.\n9.  **Close Body Shell:** Carefully close the Top (RPUP-A1) and Bottom (RPUP-A2) body shells, securing with screws.\n10. **Attach Paws:** Add Paw/Feet Covers (RPUP-L2) if separate.\n\nAssembly Complete. Charge battery."}
{"_id": "CB-ANM-001_UG_v1.0", "product_id": "CB-ANM-001", "product_name": "Robo-Pup Companion Bot", "doc_type": "User & App Guide", "version": "1.0", "title": "Robo-Pup Companion Bot User & App Guide", "language": "en-US", "format": "Markdown", "text": "# Robo-Pup Companion Bot User & App Guide (v1.0)\n\nMeet your new interactive friend!\n\n## Charging & Power\n\n*   Charge the battery via USB.\n*   Power ON/OFF via switch on the body.\n\n## Connecting to the App\n\n*   Connect via Bluetooth using the Kinetic Constructs app.\n\n## Interaction Modes\n\n*   **Autonomous Mode:** Robo-Pup may exhibit basic behaviors on its own after power-on (e.g., sitting, looking around, occasional barks/wags based on internal programming).\n*   **App Control Mode:** Use the app for direct control and interaction.\n\n## App Controls\n\n*(Screenshot: App interface showing Robo-Pup status and interaction buttons)*\n\n*   **Movement:** Buttons/Joystick for simple walking (Forward, Turn), Sitting, Standing.\n*   **Actions:** Buttons for pre-programmed actions like 'Wag Tail', 'Bark', 'Nod Head', 'Play Dead'.\n*   **Sensor Feedback:** App may show if touch sensor is activated.\n*   **Voice Commands (Via App):** Press and hold a button in the app to speak simple commands (e.g., \"Sit\", \"Speak\", \"Come here\"). The phone's microphone processes the command and sends instructions to the bot via Bluetooth.\n*   **Block Coding:** Access the block coding interface to customize behaviors.\n\n## Direct Interaction (Without App)\n\n*   **Touch Sensor:** Petting the sensor on the head/back may trigger reactions (e.g., wagging tail, happy sounds) based on the current program (default or custom).\n*   **Sound Reaction (Basic):** May react to loud noises (clap) with a bark or startle action (depends on programming).\n\n## Basic Operation\n\n*   Operate on smooth, flat surfaces.\n*   Voice command recognition via the app depends on phone's microphone quality and ambient noise.\n*   Touch sensor requires direct contact."}
{"_id": "CB-ANM-001_BCG_v1.0", "product_id": "CB-ANM-001", "product_name": "Robo-Pup Companion Bot", "doc_type": "Block Coding Guide", "version": "1.0", "title": "Robo-Pup Companion Bot Block Coding Guide", "language": "en-US", "format": "Markdown", "text": "# Robo-Pup Companion Bot Block Coding Guide (v1.0)\n\nProgram your Robo-Pup's personality!\n\n## Accessing the Coding Interface\n\n*   Connect via the Kinetic Constructs app ('Code' section).\n\n## Robo-Pup Specific Blocks\n\n*   **Motion Blocks:**\n    *   `Walk [Forward/Backward] [Steps/Duration]`\n    *   `Turn [Left/Right] [Angle/Duration]`\n    *   `Sit Down`\n    *   `Stand Up`\n    *   `Wag Tail [Speed/Duration]`\n    *   `Move Head [Angle/Position]`\n    *   `Perform Action [PlayDead/Shake/Etc.]`\n*   **Sound Blocks:**\n    *   `Play Sound [Bark/Whine/Happy/Etc.]`\n*   **Sensor Blocks:**\n    *   `When [Touch Sensor] is [Pressed/Held]` (Event Block)\n    *   `Is [Touch Sensor] Pressed?` (Boolean)\n    *   `When Loud Sound Detected` (Event Block - Basic Clap Detection)\n    *   `When Voice Command [Sit/Speak/Etc.] Received` (Event Block - Via App Mic)\n*   **Control & Logic:**\n    *   Standard `Wait`, `Repeat`, `If/Else`, Variables.\n\n## Example Project 1: Reaction to Petting\n\n```markdown\nWhen Start:\n   // Default state loop (optional)\n\nWhen [Touch Sensor] is [Pressed]:\n  // Happy Reaction Sequence\n  Wag Tail Speed [Fast] Duration [2] seconds\n  Play Sound [Happy Bark]\n  Move Head [Nod] // Conceptual block for nodding\n```\n*Description: When the touch sensor on the head/back is pressed, the Robo-Pup wags its tail, makes a happy sound, and nods.* \n\n## Example Project 2: Simple Voice Command Response\n\n```markdown\nWhen Start:\n  // Bot is ready\n\nWhen Voice Command [Sit] Received:\n  Sit Down\n  Wait [1] second\n  Play Sound [Affirmative Bark]\n\nWhen Voice Command [Speak] Received:\n  Play Sound [Bark]\n  Wait [0.5] seconds\n  Play Sound [Bark]\n```\n*Description: Programs specific actions to occur when the user speaks recognized commands via the app's microphone.* \n\n## Example Project 3: Guard Dog Mode (Basic)\n\n```markdown\nWhen Start:\n  // Stand and wait\n  Stand Up\n\nWhen Loud Sound Detected:\n  // Alert sequence\n  Play Sound [Growl]\n  Wait [0.5] seconds\n  Play Sound [Loud Bark]\n  Turn [Left] [90] degrees // Look around\n  Wait [1] second\n  Turn [Right] [180] degrees\n  Wait [1] second\n  Turn [Left] [90] degrees // Return to center\n```\n*Description: If a loud sound (like a clap) is detected, the bot growls, barks, and turns as if investigating.* \n\n## Running Your Code\n\n*   Build code in the app.\n*   Upload/Run the code. The custom behaviors will now be active on the Robo-Pup, reacting to sensors and app commands as programmed."}
{"_id": "CB-ANM-001_TMG_v1.0", "product_id": "CB-ANM-001", "product_name": "Robo-Pup Companion Bot", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.0", "title": "Robo-Pup Companion Bot Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# Robo-Pup Companion Bot Troubleshooting & Maintenance (v1.0)\n\n## Troubleshooting Common Issues\n\n*   **(General Power/Connectivity/Servo Issues):** Refer to previous TMGs ([All-Terrain Explorer Bot Troubleshooting & Maintenance Guide](/document/CB-WHL-002_TMG_v1.0), [QuadruPed Walker Kit Troubleshooting & Maintenance Guide](/document/CB-LEG4-001_TMG_v1.0)). Ensure battery is charged.\n*   **Touch Sensor Not Responding:**\n    *   Ensure sensor module is correctly plugged into the board.\n    *   Check if the sensor surface is clean.\n    *   Verify code is correctly using the 'When Touched' or 'Is Touched?' blocks.\n*   **Voice Commands (Via App) Not Working:**\n    *   Ensure phone's microphone permissions are granted for the [KinetiBot Prime]( /product/CB-HMN-001) app.\n    *   Speak clearly and closely to the phone's microphone in a quiet environment.\n    *   Verify the command is one recognized by the app/firmware (check command list).\n    *   Ensure Bluetooth connection is stable.\n*   **Sounds Not Playing / Garbled:**\n    *   Check speaker connection to the board.\n    *   Ensure volume isn't muted in the app (if applicable).\n    *   Possible faulty speaker or board issue.\n*   **Legs Moving Incorrectly / Poor Walking:**\n    *   Check servo connections and calibration (if app allows).\n    *   Ensure legs/feet are not obstructed.\n    *   Check for loose screws in leg joints.\n    *   Try on a different surface.\n\n## Maintenance\n\n*   **Cleaning:** Wipe the body shell with a dry or slightly damp cloth. Keep sensors clean.\n*   **Battery Care:** Follow rechargeable battery guidelines.\n*   **Joints:** Check leg/neck/tail joints for smooth movement. Check screw tightness.\n*   **Storage:** Store in a clean, dry place."}
{"_id": "CB-ANM-001_SCS_v1.0", "product_id": "CB-ANM-001", "product_name": "Robo-Pup Companion Bot", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "Robo-Pup Companion Bot Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# Robo-Pup Companion Bot Safety & Compliance (v1.0)\n\n**WARNING: CHOKING HAZARD -- Small parts. Not for children under 3 years.**  \n**Recommended Age: 8+** Adult supervision recommended.\n\n## Battery Safety Instructions (Rechargeable)\n\n*   Follow guidelines for [All-Terrain Explorer Bot](/product/CB-WHL-002) (Rechargeable Battery Pack).\n\n## General Safety\n\n*   **Pinch Hazards:** Moving legs, neck, and tail can create minor pinch points. Keep fingers clear.\n*   Operate on floor level away from stairs or edges where it could fall.\n*   Do not immerse in water.\n*   Handle gently; dropping can damage internal components.\n*   Do not obstruct moving parts.\n\n## Bluetooth & RF Exposure\n\n*   Follow guidelines for [All-Terrain Explorer Bot](/product/CB-WHL-002).\n\n## Compliance Information (Example)\n\n*   Follow guidelines for [All-Terrain Explorer Bot](/product/CB-WHL-002) (FCC, IC, CE, ASTM).\n\nStore this sheet for future reference.  \nKinetic Constructs - Building Tomorrow's Play."}
{"_id": "CB-ANM-002_AM_v1.0", "product_id": "CB-ANM-002", "product_name": "BioMorph Insectoid Bot", "doc_type": "Assembly Manual", "version": "1.0", "title": "BioMorph Insectoid Bot Assembly Manual", "language": "en-US", "format": "Markdown", "text": "# BioMorph Insectoid Bot Assembly Manual (v1.0)\n\nConstruct your crawling or flapping insect-like robot!\n\n## Parts List (Modular Design)\n\n*   1x Insectoid Main Body/Chassis (BMI-A1)\n*   **Option A: Legged Locomotion**\n    *   6x Leg Servo Mounts (BMI-L1A)\n    *   6x Upper Leg Segments (BMI-L2A)\n    *   6x Lower Leg Segments (BMI-L3A)\n    *   12x Micro Servos (2 per leg) (BMI-S1A)\n*   **Option B: Winged Locomotion**\n    *   2x Wing Servo Mounts (BMI-L1B)\n    *   2x Wing Structures (Left/Right) (BMI-L2B)\n    *   2x Wing Membranes (Fabric/Plastic) (BMI-L3B)\n    *   2x Standard Servos ( flapping motion) (BMI-S1B)\n*   **Common Electronics:**\n    *   1x BioMorph Control Board (Servo Driver, Bluetooth) (BMI-C1)\n    *   1x Small Rechargeable Battery (BMI-B1)\n    *   (Optional Sensors: e.g., IR Obstacle Sensor) (BMI-C2)\n*   Servo Horns, Screws, Linkages\n*   USB Charging Cable\n*   Tools\n\n*(Illustrations needed for both Legged and Winged builds)*\n\n## Assembly Steps (Choose Legged OR Winged)\n\n**Important:** Center servos before assembly.\n\n**IF BUILDING LEGGED VERSION (e.g., 6-Legged Walker):**\n\n1.  **Mount Leg Servos:** Attach Leg Servo Mounts (BMI-L1A) and 12 Micro Servos (BMI-S1A) to the Main Body (BMI-A1) in a hexapod configuration (3 per side).\n2.  **Assemble Legs:** Attach Upper (BMI-L2A) and Lower (BMI-L3A) leg segments using servo horns and linkages to create 6x two-jointed legs.\n    *(Diagram: Assembly of one 2-DOF leg)*\n3.  **Mount Board & Battery:** Install Control Board (BMI-C1) and Battery (BMI-B1) onto/into the chassis.\n4.  **Connect Servos:** Plug all 12 leg servos into the board.\n5.  **Connect Optional Sensor(s):** Plug in IR sensor (BMI-C2) if used.\n6.  **Connect Battery.**\n7.  **Wire Management.**\n\n**IF BUILDING WINGED VERSION (e.g., Flapping Mechanism):**\n\n1.  **Mount Wing Servos:** Attach Wing Servo Mounts (BMI-L1B) and 2 Standard Servos (BMI-S1B) to the Main Body (BMI-A1).\n2.  **Assemble Wings:** Attach Wing Structures (BMI-L2B) and Membranes (BMI-L3B) to the servo horns using appropriate linkages to enable flapping motion when servos rotate.\n    *(Diagram: Assembly of wing structure and linkage to servo)*\n3.  **Mount Board & Battery:** Install Control Board (BMI-C1) and Battery (BMI-B1).\n4.  **Connect Servos:** Plug the 2 wing servos into the board.\n5.  **Connect Optional Sensor(s).**\n6.  **Connect Battery.**\n7.  **Wire Management.**\n\nAssembly Complete (for chosen version). Charge battery."}
{"_id": "CB-ANM-002_UG_v1.0", "product_id": "CB-ANM-002", "product_name": "BioMorph Insectoid Bot", "doc_type": "User & App Guide", "version": "1.0", "title": "BioMorph Insectoid Bot User & App Guide", "language": "en-US", "format": "Markdown", "text": "# BioMorph Insectoid Bot User & App Guide (v1.0)\n\nExplore biomimicry in motion!\n\n## Charging & Power\n\n*   Charge the battery via USB.\n*   Power ON/OFF via switch.\n\n## Connecting to the App\n\n*   Connect via Bluetooth using the Kinetic Constructs app.\n*   The app may detect which version (Legged/Winged) was built based on servo connections or require manual selection.\n\n## App Controls (Varies by Build)\n\n*(Screenshot: App showing controls relevant to the build - legs or wings)*\n\n*   **Legged Version:**\n    *   Joystick/Buttons for basic hexapod walking (Forward, Turn).\n    *   Buttons for simple actions (e.g., 'Wiggle Legs', 'Raise Body').\n*   **Winged Version:**\n    *   Slider/Button to control flapping speed/intensity.\n    *   (Note: This version likely doesn't achieve actual flight, but simulates flapping motion).\n*   **Common Controls:**\n    *   Sensor display (if optional sensors connected).\n    *   Servo calibration screen.\n    *   Block coding access.\n\n## Basic Operation\n\n*   **Legged:** Operates like a simplified hexapod walker.\n*   **Winged:** Demonstrates flapping mechanics. Does not fly.\n*   Explore how different servo movements create insect-like motion."}
{"_id": "CB-ANM-002_BCG_v1.0", "product_id": "CB-ANM-002", "product_name": "BioMorph Insectoid Bot", "doc_type": "Block Coding Guide", "version": "1.0", "title": "BioMorph Insectoid Bot Block Coding Guide", "language": "en-US", "format": "Markdown", "text": "# BioMorph Insectoid Bot Block Coding Guide (v1.0)\n\nProgram crawling or flapping behaviors!\n\n## Accessing the Coding Interface\n\n*   Connect via the Kinetic Constructs app ('Code' section).\n*   Available blocks may differ slightly depending on Legged/Winged configuration.\n\n## BioMorph Blocks\n\n*   **Legged Version Blocks:**\n    *   `Start Walking [Direction]` (Uses default simple gait)\n    *   `Stop Walking`\n    *   `Set Leg [Num] Joint [Num] Angle [Deg]` (Low-level)\n    *   `Perform Action [Wiggle/Raise]`\n*   **Winged Version Blocks:**\n    *   `Set Flapping Speed [Percent]`\n    *   `Stop Flapping`\n    *   `Set Wing Servo [Left/Right] Angle [Deg]` (Low-level)\n*   **Common Blocks:**\n    *   `Get Sensor Value [Sensor Name]` (If optional sensor connected)\n    *   Timing, Control, Logic blocks.\n\n## Example Project 1: Legged - Obstacle Avoidance Turn\n\n```markdown\n// Assumes optional IR sensor connected to 'FrontSensor' port\nWhen Start:\n  Start Walking [Forward]\n  Forever {\n    Distance = Get Sensor Value [FrontSensor] // Value interpretation depends on sensor\n    If Distance < [Threshold] then { // If object is close\n       Stop Walking\n       // Perform a turn\n       Set Left Leg Servos [...] // Complex sequence needed for turning\n       Set Right Leg Servos [...] \n       Wait [Turn Duration]\n       // Resume walking\n       Start Walking [Forward]\n    }\n    Wait [0.1] seconds\n  }\n```\n*Description: Walks forward. If the front sensor detects an obstacle, it stops, attempts a turn (requires complex low-level servo commands for a simple hexapod turn), then continues. Simple `Turn` block might not exist.* \n\n## Example Project 2: Winged - Pulsing Flap\n\n```markdown\nWhen Start:\n  Forever {\n    Set Flapping Speed [80]%\n    Wait [1.5] seconds\n    Set Flapping Speed [30]%\n    Wait [1] second\n  }\n```\n*Description: Creates a pattern of fast flapping followed by slower flapping.* \n\n## Exploring Biomimicry\n\n*   Use low-level servo control (`Set Leg/Wing Angle`) to experiment.\n*   Try programming different leg sequences for the legged version to simulate various insect gaits (tripod, wave).\n*   Adjust flapping patterns and speeds for the winged version.\n\n## Running Your Code\n\n*   Build, Upload, Run via the app."}
{"_id": "CB-ANM-002_TMG_v1.0", "product_id": "CB-ANM-002", "product_name": "BioMorph Insectoid Bot", "doc_type": "Troubleshooting & Maintenance Guide", "version": "1.0", "title": "BioMorph Insectoid Bot Troubleshooting & Maintenance Guide", "language": "en-US", "format": "Markdown", "text": "# BioMorph Insectoid Bot Troubleshooting & Maintenance (v1.0)\n\n## Troubleshooting Common Issues\n\n*   **(General Power/Connectivity/Servo Issues):** Refer to previous TMGs. Ensure battery charged.\n*   **Legged Version - Poor Walking / Instability:**\n    *   Check servo connections and calibration.\n    *   Ensure all legs assembled correctly and symmetrically.\n    *   Check for binding joints or loose screws.\n    *   Default gait may be simple; smooth walking requires complex programming.\n*   **Winged Version - Wings Not Flapping / Uneven Flapping:**\n    *   Check wing servo connections.\n    *   Ensure linkages are connected correctly and move freely.\n    *   Check servo horns are secure.\n    *   Verify code is sending correct commands to both servos.\n    *   Possible faulty servo.\n*   **(Optional Sensor Issues):** Check sensor connection and code logic.\n\n## Maintenance\n\n*   **Cleaning:** Keep clean.\n*   **Screw Tightness:** Check servo horn and assembly screws.\n*   **Joints/Linkages:** Ensure smooth, unobstructed movement.\n*   **Battery Care.**\n*   **Wing Membranes (Winged Version):** Check for tears or damage."}
{"_id": "CB-ANM-002_SCS_v1.0", "product_id": "CB-ANM-002", "product_name": "BioMorph Insectoid Bot", "doc_type": "Safety & Compliance Sheet", "version": "1.0", "title": "BioMorph Insectoid Bot Safety & Compliance Sheet", "language": "en-US", "format": "Markdown", "text": "# BioMorph Insectoid Bot Safety & Compliance (v1.0)\n\n**WARNING: CHOKING HAZARD -- Small parts. Not for children under 3 years.**  \n**Recommended Age: 10+** Adult supervision recommended.\n\n## Battery Safety Instructions (Rechargeable)\n\n*   Follow guidelines for [All-Terrain Explorer Bot](/product/CB-WHL-002) (Rechargeable Battery Pack).\n\n## General Safety\n\n*   **Pinch Hazards:** Moving legs or flapping wings can create minor pinch points. Keep clear.\n*   Operate on a stable surface away from edges.\n*   Do not immerse in water.\n*   Handle carefully.\n\n## Bluetooth & RF Exposure\n\n*   Follow guidelines for [All-Terrain Explorer Bot](/product/CB-WHL-002).\n\n## Compliance Information (Example)\n\n*   Follow guidelines for [All-Terrain Explorer Bot](/product/CB-WHL-002) (FCC, IC, CE, ASTM).\n\nStore this sheet for future reference.  \nKinetic Constructs - Building Tomorrow's Play."}
{"_id": "CB-EXP-001_UG_v1.0", "product_id": "CB-EXP-001", "product_name": "Sensor Expansion Pack", "doc_type": "User Guide", "version": "1.0", "title": "ConstructoBots Sensor Expansion Pack User Guide", "language": "en-US", "format": "Markdown", "text": "# ConstructoBots Sensor Expansion Pack User Guide (v1.0)\n\nAdd new senses to your compatible ConstructoBots!\n\n## Compatibility\n\n*   Designed for use with ConstructoBots models featuring designated expansion ports (e.g., [All-Terrain Explorer Bot](/product/CB-WHL-002), [Tank Treads Bot](/product/CB-TRK-001), [Arctic Explorer TrackBot](/product/CB-TRK-002), check specific robot manual).\n\n## Pack Contents\n\n*   1x Light Sensor Module (with cable)\n*   1x Sound Sensor Module (Microphone) (with cable)\n*   1x Temperature Sensor Module (with cable)\n*   Mounting Screws/Hardware (if needed)\n\n*(Illustrations of each sensor module)*\n\n## Installation\n\n1.  **Power Off Robot:** Ensure your ConstructoBot is turned OFF and battery disconnected if possible.\n2.  **Choose Sensor & Location:** Decide which sensor(s) you want to add and find a suitable mounting point on your robot's chassis (may use existing holes or require specific expansion mounts).\n3.  **Mount Sensor:** Secure the sensor module using appropriate screws/hardware (if provided).\n4.  **Connect Cable:** Plug the sensor cable into the sensor module and the other end into a corresponding expansion port on the robot's main control board. Ports are usually labeled (e.g., 'LIGHT', 'SOUND', 'TEMP', or generic 'SENSOR1', 'SENSOR2'). **Refer to your robot's manual for correct port assignments.** Ensure connector is oriented correctly.\n5.  **Repeat for other sensors if desired.**\n\n## Using the Sensors\n\n*   Once connected, the sensors can be accessed through the robot's programming interface (Block Coding or Python API).\n*   Refer to the Block Coding Guide ([Sensor Expansion Pack Block Coding Guide](/document/CB-EXP-001_BCG_v1.0)) or Python API Reference ([Sensor Expansion Pack Python API Reference](/document/CB-EXP-001_API_v1.0)) for specific blocks/functions to read sensor values."}
{"_id": "CB-EXP-001_BCG_v1.0", "product_id": "CB-EXP-001", "product_name": "Sensor Expansion Pack", "doc_type": "Block Coding Guide", "version": "1.0", "title": "Sensor Expansion Pack Block Coding Guide", "language": "en-US", "format": "Markdown", "text": "# Sensor Expansion Pack Block Coding Guide (v1.0)\n\nUse new sensor data in your robot programs!\n\n## Accessing Sensor Blocks\n\n*   Connect your sensor-equipped robot to the Kinetic Constructs app ('Code' section).\n*   New blocks should appear under the 'Sensors' category corresponding to the connected expansion sensors.\n\n## New Sensor Blocks\n\n*   **Light Sensor:**\n    *   `Get Light Level (Port#)`: Returns a value representing ambient light intensity (e.g., 0-100 or 0-1023). Higher values usually mean brighter light. Requires specifying the port the sensor is plugged into if multiple sensor ports exist.\n*   **Sound Sensor:**\n    *   `Get Sound Level (Port#)`: Returns a value representing ambient sound intensity.\n    *   `When Loud Sound Detected (Port#)`: Event block triggered by sounds exceeding a certain threshold.\n*   **Temperature Sensor:**\n    *   `Get Temperature (°C / °F) (Port#)`: Returns the temperature reading.\n\n## Example Project: Light-Activated Bot\n\n```markdown\n// Assumes Light Sensor connected to Port 1\nWhen Start:\n  Forever {\n    LightValue = Get Light Level (Port# 1)\n    If LightValue > 70 then { // If it's bright\n       Set Left Motor Speed [50]%\n       Set Right Motor Speed [50]%\n    } else { // If it's dark\n       Stop Moving\n    }\n    Wait [0.2] seconds\n  }\n```\n*Description: The robot moves forward when the light level is high and stops when it's low.* \n\n## Example Project: Clap-Activated Action\n\n```markdown\n// Assumes Sound Sensor connected to Port 2\nWhen Start:\n  // Waiting state\n\nWhen Loud Sound Detected (Port# 2):\n  // Do a little dance\n  Spin Left for [0.5] seconds\n  Wait [0.2] seconds\n  Spin Right for [0.5] seconds\n  Wait [0.2] seconds\n  Stop Moving\n```\n*Description: When a loud sound (like a clap) is detected, the robot performs a short spinning sequence.* \n\n## Tips\n\n*   Sensor readings can be noisy. You might need to average readings or use thresholds carefully.\n*   Experiment to see what values sensors return in different conditions (dark/light, quiet/loud)." }
{"_id": "CB-EXP-001_API_v1.0", "product_id": "CB-EXP-001", "product_name": "Sensor Expansion Pack", "doc_type": "Python API Reference", "version": "1.0", "title": "Sensor Expansion Pack Python API Reference", "language": "en-US", "format": "Markdown", "text": "# Sensor Expansion Pack Python API Reference (v1.0)\n\nIntegrate new sensor data into your Python scripts.\n\n## Accessing Sensors\n\n*   The specific Python functions depend on the main robot's API library (e.g., `ArcticExplorer`, `MobileGrabberBot`). The library needs to support reading from generic sensor ports.\n*   You typically need to specify the port number where the sensor is connected.\n\n## Sensor Functions (Illustrative Examples)\n\n```python\n# Assume 'bot' is the connected robot object (e.g., bot = ArcticExplorer(...))\n\n# --- Light Sensor (Assuming connected to Sensor Port 1) --- \nlight_value = bot.get_sensor_value(port=1, sensor_type='light') # Or specific function\n# light_value = bot.get_light_level(port=1) \nif light_value is not None:\n    print(f\"Light Level (Port 1): {light_value}\")\n\n# --- Sound Sensor (Assuming connected to Sensor Port 2) --- \nsound_level = bot.get_sensor_value(port=2, sensor_type='sound') # Or specific function\n# sound_level = bot.get_sound_level(port=2)\nif sound_level is not None:\n    print(f\"Sound Level (Port 2): {sound_level}\")\n# Note: Event-based triggers ('When Loud Sound') are harder in basic Python APIs\n# Might require continuous polling and threshold checking in the script.\n\n# --- Temperature Sensor (Assuming connected to Sensor Port 3) --- \ntemp_c = bot.get_sensor_value(port=3, sensor_type='temperature') # Or specific function\n# temp_c = bot.get_temperature(port=3, unit='C')\nif temp_c is not None:\n    print(f\"Temperature (Port 3): {temp_c}°C\")\n\n```\n\n## Example: Temperature-Controlled Fan Bot\n\n```python\nimport time\n\n# Assume bot object is created and connected\n# Assume Temperature Sensor on Port 3\n\ntemp_threshold = 28.0 # degrees C\n\ntry:\n    while True:\n        temp = bot.get_temperature(port=3)\n        \n        if temp is not None:\n            if temp > temp_threshold:\n                print(f\"Hot ({temp}°C)! Turning on fan (motors)...\")\n                bot.set_motor_speeds(30, 30) # Spin motors slowly\n            else:\n                print(f\"Cool ({temp}°C). Turning off fan.\")\n                bot.stop_motors()\n        else:\n            print(\"Waiting for temperature reading...\")\n            bot.stop_motors() # Safety stop if sensor fails\n            \n        time.sleep(5) # Check every 5 seconds\n\nexcept KeyboardInterrupt:\n    print(\"Stopping.\")\nfinally:\n    bot.stop_motors()\n    bot.disconnect()\n\n```\n\n## Important Notes\n\n*   Consult the specific API documentation for YOUR robot model to find the exact function names and parameters for accessing expansion sensors.\n*   Sensor ports might be ADC (Analog-to-Digital Converter) inputs, returning raw values (e.g., 0-1023) that need conversion to meaningful units (light %, temp °C) based on sensor specs.\n*   Error handling (what happens if sensor is disconnected or fails) is important."}
{"_id": "CB-EXP-001_SI_v1.0", "product_id": "CB-EXP-001", "product_name": "Sensor Expansion Pack", "doc_type": "Safety Information", "version": "1.0", "title": "Sensor Expansion Pack Safety Information", "language": "en-US", "format": "Markdown", "text": "# Sensor Expansion Pack Safety Information (v1.0)\n\n**WARNING: CHOKING HAZARD -- Small parts (sensors, screws). Not for children under 3 years.**\n\n## Handling Electronic Components\n\n*   Handle sensor modules by their edges to avoid touching sensitive components or pins.\n*   **Static Electricity:** Ground yourself by touching a large metal object before handling sensors, especially in dry environments, to avoid damaging components with static discharge.\n*   Ensure the main robot is powered OFF before connecting or disconnecting sensor modules.\n*   Connect cables gently but firmly. Do not force connectors if they don't align easily.\n*   Ensure correct polarity/orientation when plugging into the main control board.\n\n## General Safety\n\n*   These sensors are low voltage and generally safe, but should be used as intended with compatible Kinetic Constructs robots.\n*   Do not expose sensors to water, extreme temperatures, or physical shock.\n*   Keep wires away from moving robot parts (wheels, gears, tracks)."}
{"_id": "CB-EXP-002_UG_v1.0", "product_id": "CB-EXP-002", "product_name": "Advanced Servo Pack (4 Servos)", "doc_type": "User Guide", "version": "1.0", "title": "ConstructoBots Advanced Servo Pack User Guide", "language": "en-US", "format": "Markdown", "text": "# ConstructoBots Advanced Servo Pack User Guide (v1.0)\n\nExpand the articulation of your advanced ConstructoBots!\n\n## Compatibility\n\n*   Designed for use with ConstructoBots models featuring available servo ports and mechanical mounting points suitable for standard-size, high-torque servos (e.g., [HexaBot Explorer](/product/CB-LEG6-001), [ArachnoBot Builder](/product/CB-SPDR-009), [Mobile Grabber Bot](/product/CB-ARM-002), [KinetiBot Prime](/product/CB-HMN-001), check specific robot manual).\n*   Requires a control board capable of driving additional servos and a power system sufficient to handle the increased load.\n\n## Pack Contents\n\n*   4x High-Torque, Metal-Geared Standard Servos\n*   Assorted Servo Horns Pack (various shapes)\n*   Servo Mounting Screws\n\n*(Illustrations of servo and horn types)*\n\n## Installation\n\n1.  **Power Off Robot:** Ensure your ConstructoBot is turned OFF and the main battery disconnected.\n2.  **Identify Mounting Point:** Determine where you want to add the servo(s) on your robot's structure (e.g., adding extra joints to a leg, enhancing a robotic arm, building a custom mechanism).\n3.  **Mount Servo:** Secure the servo using appropriate brackets (may require parts from the main robot kit or custom fabrication) and mounting screws.\n4.  **Connect Servo:** Plug the servo's 3-pin connector (Signal, V+, GND) into an unused servo port on the robot's main control board. **Note the port number** for programming purposes. Ensure correct polarity/orientation.\n5.  **Attach Horn & Linkage:** Select the appropriate servo horn, center the servo if necessary (briefly power on or use tester, then power off), attach the horn securely, and connect any mechanical linkages required for your design.\n\n## Using the Servos\n\n*   Once connected and mechanically integrated, the new servos can be controlled via the robot's programming interface (Block Coding or Python API).\n*   You will need to use the specific port number you connected the servo to in your code.\n*   Refer to your robot's [Block Coding Guide](/document/CB-WHL-003_BCG_v1.0) or [Python API Reference](/document/CB-ARM-002_API_v1.0) for functions like `Set Servo [Port Number] Angle [degrees]`."}
{"_id": "CB-EXP-002_SI_v1.0", "product_id": "CB-EXP-002", "product_name": "Advanced Servo Pack (4 Servos)", "doc_type": "Safety Information", "version": "1.0", "title": "Advanced Servo Pack Safety Information", "language": "en-US", "format": "Markdown", "text": "# Advanced Servo Pack Safety Information (v1.0)\n\n**WARNING: CHOKING HAZARD -- Small parts (servos, screws, horns). Not for children under 3 years.**\n\n## Handling Servos\n\n*   Handle servos with care. Avoid dropping them.\n*   Do not manually force the servo output shaft against its internal gears; this can cause damage.\n*   Ensure the main robot is powered OFF before connecting or disconnecting servos.\n*   Connect the 3-pin connector with correct polarity (usually Black/Brown=GND, Red=V+, Orange/Yellow/White=Signal). Reversing power can destroy the servo.\n\n## Power Considerations\n\n*   Adding servos significantly increases the robot's power consumption.\n*   Ensure your robot's battery and power regulation system can handle the additional load of 4 high-torque servos operating simultaneously.\n*   Insufficient power can lead to erratic servo behavior (jittering), brownouts (board resetting), or poor performance.\n\n## Mechanical Safety\n\n*   **Pinch Hazard:** Moving servos and attached linkages create pinch points. Keep fingers, hair, etc., clear during operation.\n*   Ensure servos are securely mounted. A loose servo can cause unexpected movement or damage.\n*   Ensure attached horns and linkages are secure. A loose horn will result in loss of control for that joint."}
{"_id": "CB-EDU-001_EG_v1.0", "product_id": "CB-EDU-001", "product_name": "Classroom RoverBot Bundle (Set of 5)", "doc_type": "Educator Guide", "version": "1.0", "title": "Classroom RoverBot Bundle Educator Guide", "language": "en-US", "format": "Markdown", "text": "# Classroom RoverBot Bundle Educator Guide (v1.0)\n\nFacilitating Robotics Exploration with the [RoverBot Starter Kit]( /product/CB-WHL-001)\n\n## Bundle Overview\n\n*   **Contents:** 5x [RoverBot Starter Kits]( /product/CB-WHL-001), 5x IR Remotes, this guide.\n*   **Target Audience:** Grades 1-4 (Ages 6-9)\n*   **Focus Areas:** Basic Mechanics, Assembly Skills, Following Instructions, Simple Machines (Wheels/Axles), Introduction to Remote Control & Obstacle Avoidance.\n*   **Time Estimate:** 1-2 hours for assembly, additional time for activities.\n\n## Learning Objectives\n\n*   Students will be able to identify key components of a simple robot (chassis, motors, wheels, sensors, controller).\n*   Students will be able to follow multi-step visual instructions to assemble the [RoverBot Starter Kit]( /product/CB-WHL-001).\n*   Students will develop fine motor skills through handling small parts and screws.\n*   Students will understand the cause-and-effect relationship between remote control inputs and robot movement.\n*   Students will observe basic sensor functionality (IR obstacle avoidance).\n*   Students will practice collaboration and troubleshooting in small groups.\n\n## Preparation\n\n*   **Materials:** Ensure all 5 kits are complete. Provide 4x AA batteries per robot and 2x AAA batteries per remote (20x AA, 10x AAA total). Have extra small screwdrivers available.\n*   **Space:** Requires table space for assembly (recommend small groups of 2-3 students per kit) and floor space for operation.\n*   **Optional:** Create simple obstacle courses using blocks, books, or tape on the floor.\n\n## Lesson Plan Outline\n\n1.  **Introduction (10-15 min):**\n    *   What is a robot? Discuss examples.\n    *   Introduce the RoverBot kit and its purpose.\n    *   Briefly show key parts (chassis, motors, wheels, sensor).\n    *   Discuss safety (small parts, handling tools).\n2.  **Assembly Session (45-75 min):**\n    *   Distribute kits to small groups.\n    *   Guide students step-by-step through the [Assembly Manual]( /document/CB-WHL-001_AM_v1.0). Projecting steps or having helpers circulate is useful.\n    *   Emphasize careful screw tightening (not too tight).\n    *   Assist with tricky steps (wire connections, motor alignment).\n    *   Troubleshoot common issues (refer to [Troubleshooting & Maintenance Guide]( /document/CB-WHL-001_TMG_v1.0)).\n3.  **Operation & Exploration (20-30 min):**\n    *   Install batteries in bots and remotes.\n    *   Guide students through powering on and basic remote controls (Forward, Backward, Turn).\n    *   Allow free exploration time in a designated floor area.\n    *   Introduce Obstacle Avoidance mode. Have students observe how the bot reacts to obstacles (hands, walls, blocks).\n4.  **Activities (Optional Extension):**\n    *   **Robot Maze:** Create a simple maze with blocks for students to navigate using remote control.\n    *   **Robot Soccer (Simple):** Use a lightweight ball and designated goals.\n    *   **Obstacle Course Challenge:** Time students navigating a defined course.\n    *   **Robot Parade:** Decorate the [RoverBots]( /product/CB-WHL-001) and have a parade.\n5.  **Wrap-up & Discussion (10 min):**\n    *   What challenges did you face during assembly? How did you solve them?\n    *   How does the remote control work?\n    *   How does the sensor help the robot avoid obstacles?\n    *   What else could robots like this be used for?\n    *   Discuss cleanup and storage.\n\n## Classroom Management Tips\n\n*   **Group Work:** Encourage students to work together, assigning roles (e.g., parts finder, assembler, instruction reader).\n*   **Pacing:** Monitor progress and provide support where needed. Some groups finish faster than others.\n*   **Troubleshooting:** Empower students to try basic troubleshooting first (check connections, batteries) before asking for help.\n*   **Battery Management:** Have a system for collecting/charging/distributing batteries.\n\n## Curriculum Connections\n\n*   **Science:** Simple Machines, Sensors, Basic Electronics.\n*   **Technology & Engineering:** Following Designs, Assembly, Problem-Solving.\n*   **Math:** Counting parts, Spatial Reasoning.\n*   **Arts:** Customization/Decoration (optional).\n\nRefer to individual product documents (AM, UG, TMG, SCS) for [RoverBot Starter Kit]( /product/CB-WHL-001) for detailed technical information."}
{"_id": "CB-EDU-002_EG_v1.0", "product_id": "CB-EDU-002", "product_name": "Coding Explorer Classroom Pack (Set of 5)", "doc_type": "Educator Guide", "version": "1.0", "title": "Coding Explorer Classroom Pack Educator Guide", "language": "en-US", "format": "Markdown", "text": "# Coding Explorer Classroom Pack Educator Guide (v1.0)\n\nIntroducing Block Coding with the [All-Terrain Explorer Bot](//product/CB-WHL-002)\n\n## Bundle Overview\n\n*   **Contents:** 5x [All-Terrain Explorer Bots](//product/CB-WHL-002), this guide.\n*   **Target Audience:** Grades 3-6 (Ages 8-12)\n*   **Focus Areas:** Mechanics, Electronics, Introduction to Programming (Block-Based), Sequencing, Loops, Conditionals (If/Else), Sensor Input (Ultrasonic), Problem-Solving.\n*   **Time Estimate:** 1-2 hours for assembly, 2-4+ hours for coding activities (multiple sessions recommended).\n*   **Required:** 5x compatible smartphones/tablets with Bluetooth and the Kinetic Constructs app installed.\n\n## Learning Objectives\n\n*   Students will assemble a more complex robot involving geared motors and sensors.\n*   Students will connect the robot to a smart device via Bluetooth.\n*   Students will understand the concept of programming as giving instructions to a machine.\n*   Students will utilize a block-based coding interface (drag-and-drop).\n*   Students will create simple programs involving sequences of movement commands.\n*   Students will implement loops (`Repeat`, `Forever`) for repetitive tasks.\n*   Students will use sensor data (ultrasonic distance) within conditional statements (`If/Else`) to make decisions.\n*   Students will debug simple programs.\n*   Students will design solutions to programming challenges.\n\n## Preparation\n\n*   **Materials:** Ensure all 5 kits are complete. Fully charge all 5 robot batteries using USB cables. Ensure 5 compatible tablets/phones are charged and have the Kinetic Constructs app installed and Bluetooth enabled.\n*   **Space:** Table space for assembly, floor space for testing programs.\n*   **Optional:** Obstacles (blocks, boxes), tape for creating paths or zones.\n*   **App Familiarization:** Become familiar with the Kinetic Constructs app interface, especially the block coding section.\n\n## Lesson Plan Outline (Multi-Session Suggestion)\n\n**Session 1: Assembly & Basic Control (1.5-2 hours)**\n\n1.  **Introduction (10 min):** Review simple robots. Introduce the Explorer Bot and its capabilities (coding, sensors).\n2.  **Assembly (60-90 min):** Guide students through assembling the [All-Terrain Explorer Bots](//product/CB-WHL-002) (refer to [All-Terrain Explorer Bot Assembly Manual](//document/CB-WHL-002_AM_v1.1)). This is more complex than the RoverBot.\n3.  **App Connection & Drive Mode (15-20 min):** Guide students through charging (if needed), powering on, installing the app, and connecting via Bluetooth (refer to [All-Terrain Explorer Bot User Guide](//document/CB-WHL-002_UG_v1.0)). Allow brief exploration using the app's manual drive mode.\n\n**Session 2: Introduction to Block Coding (1-1.5 hours)**\n\n1.  **Intro to Coding Concepts (15 min):** What is code? Algorithms? Sequencing? Introduce the block coding interface in the app.\n2.  **First Program - Sequence (20-30 min):** Guide students to create a simple sequence: Move Forward, Wait, Turn Left, Wait, Move Forward, Stop. Run and observe.\n3.  **Introducing Loops (15-20 min):** Explain `Repeat` block. Modify the sequence to drive in a square using a `Repeat 4 times` loop.\n4.  **Debugging Practice (10 min):** Discuss what happens if waits are too short, turns not 90 degrees, etc. Try fixing simple bugs.\n\n**Session 3: Sensor Input & Conditionals (1-1.5 hours)**\n\n1.  **Introducing Sensors (10 min):** Explain the ultrasonic sensor - how it measures distance.\n2.  **Sensor Blocks (15 min):** Show the `Get Distance` block and how to display its value (if app supports).\n3.  **Conditional Logic (15 min):** Explain `If/Else` blocks. Concept of making decisions based on conditions (`Distance < 20`).\n4.  **Obstacle Avoidance Program (30-40 min):** Guide students to build a basic obstacle avoidance program (refer to Example 2 in [All-Terrain Explorer Bot Block Coding Guide](//document/CB-WHL-002_BCG_v1.0)). Test with hands or blocks. Debug why it might turn too soon/late.\n\n**Session 4: Challenges & Projects (Ongoing)**\n\n*   **Challenge 1: Maze Navigation:** Create a simple maze. Students program bot to navigate it (may require combining timed moves and sensor checks).\n*   **Challenge 2: Follow the Wall:** Program bot to drive alongside a wall using the distance sensor.\n*   **Challenge 3: Robot Dance:** Program a synchronized dance routine using multiple bots.\n*   **Open Project:** Students design and program their own robot behavior.\n\n## Classroom Management & Technical Tips\n\n*   **App Installation:** Ensure apps are pre-installed or have a plan for student installation.\n*   **Bluetooth Pairing:** Manage pairing 5 bots to 5 devices. Label bots and devices clearly (e.g., Bot #1 pairs with Tablet #1).\n*   **Charging:** Have a charging station available. Monitor battery levels via the app.\n*   **Troubleshooting:** Be prepared for common issues: connection drops, code not running, sensor misreads (refer to [All-Terrain Explorer Bot Troubleshooting & Maintenance Guide](//document/CB-WHL-002_TMG_v1.0)).\n\n## Curriculum Connections\n\n*   **Computer Science:** Programming Fundamentals (Sequence, Loops, Conditionals), Debugging, Algorithms.\n*   **Science:** Sensors, Measurement (Distance), Sound (Ultrasonic).\n*   **Technology & Engineering:** Robotics, Bluetooth Communication, Mechanical Assembly.\n*   **Math:** Angles, Distance, Variables (if used).\n\nRefer to individual product documents (AM, UG, BCG, TMG, SCS) for [All-Terrain Explorer Bot](//product/CB-WHL-002) for detailed technical information."}
